<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://george-gca.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://george-gca.github.io/" rel="alternate" type="text/html"/><updated>2024-05-17T01:08:15+00:00</updated><id>https://george-gca.github.io/feed.xml</id><title type="html">blank</title><entry><title type="html">sli.dev for non-web developers</title><link href="https://george-gca.github.io/blog/2023/slidev_for_non_web_devs/" rel="alternate" type="text/html" title="sli.dev for non-web developers"/><published>2023-06-01T17:19:10+00:00</published><updated>2023-06-01T17:19:10+00:00</updated><id>https://george-gca.github.io/blog/2023/slidev_for_non_web_devs</id><content type="html" xml:base="https://george-gca.github.io/blog/2023/slidev_for_non_web_devs/"><![CDATA[<p>I always struggled every time I had to do a new presentation. Don’t get me wrong, Google Slides is good, and suffices for most common use cases. The problem is when the slides keeps changing, and you want to do some versioning on them. I made some slides in the past using LaTeX with the Beamer class. A friend even showed me a <a href="https://github.com/deuslirio/UFGTeX-Presentation">nicer template</a> than the default ones. The problem is, though this solution is portable (you can generate a PDF file), it lacks some features that I wanted, like animations, transitions, and support for drawing.</p> <p>I took a look at <a href="https://revealjs.com/">Reveal.js</a>, but it was too much work to setup and maintain. I also went for <a href="https://remarkjs.com/">Remark</a>, but the <a href="https://github.com/gnab/remark">last update</a> was more than 2 years ago. That’s when I found <a href="https://sli.dev/">sli.dev</a>. It’s a framework <a href="https://github.com/slidevjs/slidev">under constant development</a> for creating slides using <a href="https://sli.dev/guide/syntax.html">Markdown</a>. It’s based on a lot of web technologies, but you don’t need to be fluent on them to use it. Here is everything that you’ll need to get started.</p> <h2 id="installing-node-version-manager-nvm">Installing node version manager (nvm)</h2> <p><a href="https://github.com/nvm-sh/nvm">nvm</a> allows you to quickly install and use different versions of node via the command line. To install the latest version, run the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>get_latest_github_raw_no_v<span class="o">()</span> <span class="o">{</span>
  <span class="c"># use it for when the link for the download doesn't have a version included in the name of the file</span>
  <span class="c"># e.g.: https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh</span>
  <span class="c"># usage: get_latest_github_raw_no_v "user/repo" "filename"</span>
  <span class="nv">version</span><span class="o">=</span><span class="si">$(</span>curl <span class="nt">--silent</span> <span class="s2">"https://api.github.com/repos/</span><span class="nv">$1</span><span class="s2">/releases/latest"</span> |  <span class="c"># Get latest release from GitHub api</span>
    <span class="nb">grep</span> <span class="s1">'"tag_name":'</span> |                                             <span class="c"># Get tag line</span>
    <span class="nb">sed</span> <span class="nt">-E</span> <span class="s1">'s/.*"([^"]+)".*/\1/'</span><span class="si">)</span>                                    <span class="c"># Pluck JSON value</span>
  <span class="nb">echo</span> <span class="s2">"https://raw.githubusercontent.com/</span><span class="nv">$1</span><span class="s2">/</span><span class="nv">$version</span><span class="s2">/"</span><span class="nv">$2</span>
<span class="o">}</span>

<span class="c"># Install node version manager (nvm)</span>
<span class="nv">site</span><span class="o">=</span><span class="si">$(</span>get_latest_github_raw_no_v <span class="s2">"nvm-sh/nvm"</span> <span class="s2">"install.sh"</span><span class="si">)</span>
curl <span class="nt">-o-</span> <span class="nv">$site</span> | bash
</code></pre></div></div> <p>Then, add the following lines to your <code class="language-plaintext highlighter-rouge">~/.bashrc</code> file:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># enable node version manager</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-d</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.nvm"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">export </span><span class="nv">NVM_DIR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.nvm"</span>
    <span class="o">[</span> <span class="nt">-s</span> <span class="s2">"</span><span class="nv">$NVM_DIR</span><span class="s2">/nvm.sh"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="se">\.</span> <span class="s2">"</span><span class="nv">$NVM_DIR</span><span class="s2">/nvm.sh"</span>  <span class="c"># This loads nvm</span>
    <span class="o">[</span> <span class="nt">-s</span> <span class="s2">"</span><span class="nv">$NVM_DIR</span><span class="s2">/bash_completion"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="se">\.</span> <span class="s2">"</span><span class="nv">$NVM_DIR</span><span class="s2">/bash_completion"</span>  <span class="c"># This loads nvm bash_completion</span>
<span class="k">fi</span>
</code></pre></div></div> <p>Restart your terminal, or just reload the <code class="language-plaintext highlighter-rouge">~/.bashrc</code> file:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">.</span> ~/.bashrc
</code></pre></div></div> <h2 id="installing-node-latest-version">Installing Node (latest version)</h2> <p>To install the latest node version, run the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvm <span class="nb">install</span> <span class="si">$(</span>nvm ls-remote | <span class="nb">grep</span> <span class="nt">-i</span> latest | <span class="nb">tail</span> <span class="nt">-n</span> 1 |
  <span class="nb">sed</span> <span class="nt">-ne</span> <span class="s1">'s/[^v0-9]*\(\([0-9]*\.\)\{0,4\}[0-9][^.]\).*/\1/p'</span> | xargs<span class="si">)</span>
</code></pre></div></div> <p>In my case, the latest version available is <code class="language-plaintext highlighter-rouge">v20.2.0</code>. You can check the installed version by running:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node <span class="nt">--version</span>
</code></pre></div></div> <h2 id="installing-slidev">Installing sli.dev</h2> <p>To install sli.dev, simply run:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm init slidev
</code></pre></div></div> <p>This command will install everything you need, ask for the project name, and start the template project. After the installation, you should see the following lines in your terminal:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public slide show   &gt; http://localhost:3030/
  presenter mode      &gt; http://localhost:3030/presenter/
  remote control      &gt; pass --remote to enable

  shortcuts           &gt; restart | open | edit
</code></pre></div></div> <p>If the browser did not open automatically, you can open it manually by accessing the URL <code class="language-plaintext highlighter-rouge">http://localhost:3030/</code>. To stop running the server, just press <code class="language-plaintext highlighter-rouge">Ctrl+C</code> in the terminal. After stopped, you can start the development server again by entering the created directory and running:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm run-script dev
</code></pre></div></div> <p>To see a list of scripts, run <code class="language-plaintext highlighter-rouge">npm run</code>:</p> <pre><code class="language-txt">Scripts available in XXXXXXXXX via `npm run-script`:
  build
    slidev build
  dev
    slidev --open
  export
    slidev export
</code></pre> <p>If you want to modify any of these commands (or create more, like exporting presenter notes), you can edit the <code class="language-plaintext highlighter-rouge">package.json</code> file. For example, to add a command to export presenter notes, add the following lines to the <code class="language-plaintext highlighter-rouge">scripts</code> section:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"export_notes"</span><span class="p">:</span><span class="w"> </span><span class="s2">"slidev export-notes"</span><span class="w">
</span></code></pre></div></div> <h2 id="changing-slidev-template">Changing sli.dev template</h2> <p>You can change the presentation theme simply by editing the <code class="language-plaintext highlighter-rouge">theme</code> attribute on the <a href="https://sli.dev/guide/syntax.html#front-matter-layouts">front matter</a> of <code class="language-plaintext highlighter-rouge">slides.md</code> file. When you change and save it, the cli interface will automatically download and apply the new theme.</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">theme</span><span class="pi">:</span> <span class="s">academic</span>
</code></pre></div></div> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2023-06-01-slidev_for_non_web_devs/change_theme-480.webp 480w,/assets/img/blog/2023-06-01-slidev_for_non_web_devs/change_theme-800.webp 800w,/assets/img/blog/2023-06-01-slidev_for_non_web_devs/change_theme-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog/2023-06-01-slidev_for_non_web_devs/change_theme.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> sli.dev installing new theme. </div> <h2 id="basic-settings">Basic settings</h2> <p>I am not a hardcore sli.dev user or web developer. So there were some things that took some time for me to figure out, and I think it is worth mentioning. The first one is forcing the slides to be in dark mode. To do that, add the following line to the front matter of <code class="language-plaintext highlighter-rouge">slides.md</code>:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">colorSchema</span><span class="pi">:</span> <span class="s2">"</span><span class="s">dark"</span>
</code></pre></div></div> <p>While using the <code class="language-plaintext highlighter-rouge">academic</code> theme, by default every slide with a <code class="language-plaintext highlighter-rouge"># title</code> will be added to the table of contents. To hide a slide from the table of contents, add the following line to the front matter of the slide:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hideInToc</span><span class="pi">:</span> <span class="kc">true</span>
</code></pre></div></div> <p>For the sake of organization, I like to create a different file for each section in my presentation, then import these files in my main <code class="language-plaintext highlighter-rouge">slides.md</code>. To do that, create a new file with the markdown extension, then add the following lines to <code class="language-plaintext highlighter-rouge">slides.md</code> for each file to be included:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">src</span><span class="pi">:</span> <span class="s">slides/other_slide.md</span>
<span class="nn">---</span>
</code></pre></div></div> <h2 id="exporting-slides">Exporting slides</h2> <p><a href="https://sli.dev/guide/exporting.html">Exporting to PDF or PNG</a> relies on <code class="language-plaintext highlighter-rouge">Playwright</code> for rendering. You will therefore need to install <code class="language-plaintext highlighter-rouge">playwright-chromium</code> to use this feature. For this, run:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i <span class="nt">-D</span> playwright-chromium
</code></pre></div></div> <p>Then, add the following lines to the <code class="language-plaintext highlighter-rouge">scripts</code> section of the <code class="language-plaintext highlighter-rouge">package.json</code> file:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"export_slides"</span><span class="p">:</span><span class="w"> </span><span class="s2">"slidev export --with-toc --with-clicks"</span><span class="w">
</span></code></pre></div></div> <p>To export the slides, run:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm run-script export_slides
</code></pre></div></div> <h2 id="updating-dependencies">Updating dependencies</h2> <p>To update <code class="language-plaintext highlighter-rouge">node</code> to the latest LTS release, run:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvm <span class="nb">install</span> <span class="si">$(</span>nvm ls-remote | <span class="nb">grep</span> <span class="nt">-i</span> latest | <span class="nb">tail</span> <span class="nt">-n</span> 1 |
  <span class="nb">sed</span> <span class="nt">-ne</span> <span class="s1">'s/[^v0-9]*\(\([0-9]*\.\)\{0,4\}[0-9][^.]\).*/\1/p'</span> | xargs<span class="si">)</span> <span class="nt">--reinstall-packages-from</span><span class="o">=</span>current
</code></pre></div></div> <p>To check for dependencies that need to be updated, run:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm outdated
</code></pre></div></div> <p>which will output something like this:</p> <pre><code class="language-txt">Package      Current   Wanted  Latest  Location                  Depended by
@slidev/cli  0.43.11  0.43.15  0.46.1  node_modules/@slidev/cli  xxxxxxxx
</code></pre> <p>To updated installed dependencies, simply run:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm update
</code></pre></div></div> <p>Keep in mind that <code class="language-plaintext highlighter-rouge">npm update</code> will never update to a major breaking-changes version, only to a minor one. What this means is, it will use the <code class="language-plaintext highlighter-rouge">Wanted</code> version in the table above instead of the <code class="language-plaintext highlighter-rouge">Latest</code> version. To obtain the <code class="language-plaintext highlighter-rouge">Latest</code> version, call the install command with <code class="language-plaintext highlighter-rouge">@latest</code> appended to the package name. For example, to update <code class="language-plaintext highlighter-rouge">@slidev/cli</code> to the latest version, run:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> @slidev/cli@latest
</code></pre></div></div>]]></content><author><name></name></author><category term="web"/><category term="presentation"/><category term="programming"/><category term="code"/><category term="slides"/><category term="sli.dev"/><category term="web"/><summary type="html"><![CDATA[How to setup and use sli.dev for non-web developers]]></summary></entry><entry><title type="html">Improving your python code with simple tricks</title><link href="https://george-gca.github.io/blog/2023/simple-improvements-python-code/" rel="alternate" type="text/html" title="Improving your python code with simple tricks"/><published>2023-01-25T13:28:15+00:00</published><updated>2023-01-25T13:28:15+00:00</updated><id>https://george-gca.github.io/blog/2023/simple-improvements-python-code</id><content type="html" xml:base="https://george-gca.github.io/blog/2023/simple-improvements-python-code/"><![CDATA[<p>Sometimes our code is running slow. Sometimes it is eating up memory. Maybe it is just not as readable as we would like it to be. In this post, we will see how to use some functions from the default library to improve our code. All the code used in this post <a href="https://gist.github.com/george-gca/bea9d8c23a0932a22d6b1b80006629f4">is available here</a>. While I only presented a few functions that I use frequently, there are many more that can be used to improve your code. I encourage you to check the <a href="https://docs.python.org/3/library/">official documentation</a> to see what else is available.</p> <h2 id="use-list-comprehension-whenever-possible">Use <a href="https://realpython.com/list-comprehension-python/">list comprehension</a> whenever possible</h2> <h3 id="what-does-it-mean">What does it mean?</h3> <p>List comprehension is basically another way to create a list. Suppose we want to create a list from values in a range:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># traditional way
</span><span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">):</span>
  <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="c1"># list comprehension
</span><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)]</span>
</code></pre></div></div> <h3 id="why-does-it-matter">Why does it matter?</h3> <p>List comprehension is usually much faster than the traditional loop. Let’s compare them:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">):</span>
  <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">1.04 s ± 89.8 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 293.57 MiB
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)]</span>
</code></pre></div></div> <pre><code class="language-txt">731 ms ± 71.6 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 285.82 MiB
</code></pre> <h3 id="other-examples">Other examples</h3> <h4 id="creating-a-list-with-an-if-condition">Creating a list with an <code class="language-plaintext highlighter-rouge">if</code> condition</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">):</span>
  <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">1.11 s ± 24 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: -0.25 MiB
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)</span> <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
</code></pre></div></div> <pre><code class="language-txt">944 ms ± 6.79 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 115.54 MiB
</code></pre> <hr/> <h4 id="creating-a-list-with-an-if-else-condition">Creating a list with an <code class="language-plaintext highlighter-rouge">if else</code> condition</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">):</span>
  <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">1.61 s ± 90.5 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 32.89 MiB
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)]</span>
</code></pre></div></div> <pre><code class="language-txt">1.33 s ± 11.4 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 273.82 MiB
</code></pre> <h3 id="fastest-way-to-create-a-list">Fastest way to create a list</h3> <p>When generating a list from a generator (<code class="language-plaintext highlighter-rouge">range</code> in this case), it is even faster to use the <code class="language-plaintext highlighter-rouge">list()</code> constructor.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">))</span>
</code></pre></div></div> <p>To validate this, let’s compare the code for 7 runs, 10 loops each:</p> <table> <thead> <tr> <th style="text-align: center"> </th> <th style="text-align: center">loop</th> <th style="text-align: center">list comprehension</th> <th style="text-align: center">list constructor</th> </tr> </thead> <tbody> <tr> <td style="text-align: center">mean ± std. dev. per loop</td> <td style="text-align: center">1.04 s ± 89.8 ms</td> <td style="text-align: center">731 ms ± 71.6 ms</td> <td style="text-align: center">301 ms ± 18.4 ms</td> </tr> <tr> <td style="text-align: center">memory increment</td> <td style="text-align: center">293.57 MiB</td> <td style="text-align: center">285.82 MiB</td> <td style="text-align: center">75.12 MiB</td> </tr> </tbody> </table> <p>Why is the <code class="language-plaintext highlighter-rouge">list()</code> constructor faster? According to <a href="https://stackoverflow.com/a/29356931">this answer in StackOverflow</a>:</p> <blockquote> <p>The list comprehension executes the loop in Python bytecode, just like a regular for loop. The list() call iterates entirely in C code, which is far faster.</p> </blockquote> <p>To compare all these solutions, lets check the equivalent bytecodes. For the loop solution:</p> <pre><code class="language-txt">1           0 BUILD_LIST               0
            2 STORE_NAME               0 (tmp)

2           4 LOAD_NAME                1 (range)
            6 LOAD_CONST               0 (10000000)
            8 CALL_FUNCTION            1
            10 GET_ITER
    &gt;&gt;   12 FOR_ITER                14 (to 28)
            14 STORE_NAME               2 (i)
            16 LOAD_NAME                0 (tmp)
            18 LOAD_METHOD              3 (append)
            20 LOAD_NAME                2 (i)
            22 CALL_METHOD              1
            24 POP_TOP
            26 JUMP_ABSOLUTE           12
    &gt;&gt;   28 LOAD_CONST               1 (None)
            30 RETURN_VALUE
</code></pre> <p>For the list comprehension solution:</p> <pre><code class="language-txt">1           0 LOAD_CONST               0 (&lt;code object &lt;listcomp&gt; at 0x7f272c8eaf50, file "&lt;stdin&gt;", line 1&gt;)
            2 LOAD_CONST               1 ('&lt;listcomp&gt;')
            4 MAKE_FUNCTION            0
            6 LOAD_NAME                0 (range)
            8 LOAD_NAME                1 (10_000_000)
            10 CALL_FUNCTION            1
            12 GET_ITER
            14 CALL_FUNCTION            1
            16 POP_TOP
            18 LOAD_CONST               2 (None)
            20 RETURN_VALUE

Disassembly of &lt;code object &lt;listcomp&gt; at 0x7f272c8eaf50, file "&lt;stdin&gt;", line 1&gt;:
1           0 BUILD_LIST               0
            2 LOAD_FAST                0 (.0)
    &gt;&gt;    4 FOR_ITER                 8 (to 14)
            6 STORE_FAST               1 (i)
            8 LOAD_FAST                1 (i)
            10 LIST_APPEND              2
            12 JUMP_ABSOLUTE            4
    &gt;&gt;   14 RETURN_VALUE
</code></pre> <p>And for the list constructor solution:</p> <pre><code class="language-txt">1           0 LOAD_NAME                0 (list)
            2 LOAD_NAME                1 (range)
            4 LOAD_NAME                2 (10_000_000)
            6 CALL_FUNCTION            1
            8 CALL_FUNCTION            1
            10 POP_TOP
            12 LOAD_CONST               0 (None)
            14 RETURN_VALUE
</code></pre> <p>We can see that the <code class="language-plaintext highlighter-rouge">list()</code> constructor generates less bytecodes.</p> <h2 id="use-generators-and-iterators-whenever-possible">Use <a href="https://realpython.com/introduction-to-python-generators/">generators</a> and <a href="https://docs.python.org/3/glossary.html#term-iterator">iterators</a> whenever possible</h2> <p>To create a generator like a list comprehension (called <a href="https://docs.python.org/3/glossary.html#index-20">generator expression</a>), just replace the squared brackets [ ] with parenthesis ( ).</p> <h3 id="why-does-it-matter-1">Why does it matter?</h3> <p><a href="https://docs.python.org/3/glossary.html#index-19">Generators</a> looks like a normal function, except that it contains <code class="language-plaintext highlighter-rouge">yield</code> expressions for producing a series of values usable in a for-loop or that can be retrieved one at a time with the <code class="language-plaintext highlighter-rouge">next()</code> function. It returns a <a href="https://docs.python.org/3/glossary.html#term-generator-iterator">generator iterator</a>, which temporarily suspends processing, remembering the location execution state (including local variables and pending try-statements).</p> <p>Let’s do some comparisons:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">([</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)])</span>
</code></pre></div></div> <pre><code class="language-txt">860 ms ± 30.4 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">((</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)))</span>
</code></pre></div></div> <pre><code class="language-txt">609 ms ± 2.93 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
</code></pre> <p>Not that different right? Now, let’s check the memory usage. Let’s focus on increment, since it represents the difference in memory between the beginning and end of this execution.</p> <pre><code class="language-txt">memory increment: 263.44 MiB
</code></pre> <pre><code class="language-txt">memory increment: 0.00 MiB
</code></pre> <p>What happened? The generator only returns one element at a time, which is given to the sum function. This way, we don’t need to pre-generate the whole list to perform the sum of the elements. In fact, since the <a href="https://docs.python.org/3/library/functions.html#sum">sum</a> function gets an iterator as parameter, we could call it like this:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">))</span>
</code></pre></div></div> <pre><code class="language-txt">593 ms ± 90.4 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.01 MiB
</code></pre> <p>Or even:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">))</span>
</code></pre></div></div> <pre><code class="language-txt">168 ms ± 4.68 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.00 MiB
</code></pre> <p>Which runs way faster.</p> <h2 id="avoid-generating-all-the-values-whenever-possible">Avoid generating all the values whenever possible</h2> <p>For the sake of these examples, suppose we have an ordered list of values.</p> <h3 id="what-to-do-if-we-want-only-the-values-lower-than-a-limit">What to do if we want only the values lower than a limit?</h3> <p>The list comprehension way of achieving this is this:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)</span> <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1_000_000</span><span class="p">]</span>
</code></pre></div></div> <pre><code class="language-txt">596 ms ± 7.16 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.02 MiB
</code></pre> <p>Now, with loops:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">):</span>
  <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1_000_000</span><span class="p">:</span>
    <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="k">break</span>
</code></pre></div></div> <pre><code class="language-txt">116 ms ± 2.37 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.01 MiB
</code></pre> <p>Why is it faster with loops?</p> <p>Because using list comprehension, the whole list must be generated before selecting the elements. The same is not true for the loop, that only runs through some of the values.</p> <h3 id="can-we-do-better">Can we do better?</h3> <p>Yes, with <a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile">takewhile</a>.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">itertools</span> <span class="kn">import</span> <span class="n">takewhile</span>

<span class="n">tmp</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">takewhile</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">1_000_000</span><span class="p">,</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)))</span>
</code></pre></div></div> <pre><code class="language-txt">107 ms ± 2.37 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.01 MiB
</code></pre> <hr/> <p>Note: <code class="language-plaintext highlighter-rouge">takewhile</code> is only faster when you know that the condition will be satisfied “soon enough”.</p> <hr/> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">):</span>
  <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9_000_000</span><span class="p">:</span>
    <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="k">break</span>
</code></pre></div></div> <pre><code class="language-txt">1.12 s ± 27.5 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 3.70 MiB
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)</span> <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9_000_000</span><span class="p">]</span>
</code></pre></div></div> <pre><code class="language-txt">1.05 s ± 51 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 246.21 MiB
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">takewhile</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">9_000_000</span><span class="p">,</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)))</span>
</code></pre></div></div> <pre><code class="language-txt">1.06 s ± 8.41 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.00 MiB
</code></pre> <p>In this case it is quicker to generate the whole list, and then filter it. But note, while using list comprehension is quicker, <code class="language-plaintext highlighter-rouge">takewhile</code> takes less memory, since it still doesn’t need to store the whole list, even momentarily.</p> <h3 id="what-if-we-want-only-the-values-higher-than-a-limit">What if we want only the values higher than a limit?</h3> <p>First, let’s try with loops:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">):</span>
  <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">1_000_000</span><span class="p">:</span>
    <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">1.3 s ± 93.3 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.15 MiB
</code></pre> <p>Now, with list comprehension:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)</span> <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">1_000_000</span><span class="p">]</span>
</code></pre></div></div> <pre><code class="language-txt">978 ms ± 11.2 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 169.84 MiB
</code></pre> <p>In this case, since the loop will run through every element, it is slower than the list comprehension. It takes less memory though, since it doesn’t need to store the whole list in memory.</p> <h3 id="can-we-do-better-1">Can we do better?</h3> <p>Yes, with <a href="https://docs.python.org/3/library/itertools.html#itertools.dropwhile">dropwhile</a>.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">itertools</span> <span class="kn">import</span> <span class="n">dropwhile</span>

<span class="n">tmp</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">dropwhile</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">1_000_000</span><span class="p">,</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)))</span>
</code></pre></div></div> <pre><code class="language-txt">442 ms ± 10.2 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.05 MiB
</code></pre> <hr/> <p>Note: <code class="language-plaintext highlighter-rouge">dropwhile</code> also is only faster when you know that the condition will be satisfied “soon enough”.</p> <hr/> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">):</span>
  <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">9_000_000</span><span class="p">:</span>
    <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">654 ms ± 9.3 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.00 MiB
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)</span> <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">9_000_000</span><span class="p">]</span>
</code></pre></div></div> <pre><code class="language-txt">623 ms ± 13.6 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.01 MiB
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">dropwhile</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">9_000_000</span><span class="p">,</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)))</span>
</code></pre></div></div> <pre><code class="language-txt">924 ms ± 104 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.01 MiB
</code></pre> <h3 id="what-about-when-we-want-to-get-the-first-n-samples">What about when we want to get the first N samples?</h3> <p>With loops:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">n</span><span class="p">,</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)):</span>
  <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">1_000_000</span><span class="p">:</span>
    <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="k">break</span>
</code></pre></div></div> <pre><code class="language-txt">147 ms ± 3.09 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.00 MiB
</code></pre> <p>Doing it with list comprehension:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)][:</span><span class="mi">1_000_000</span><span class="p">]</span>
</code></pre></div></div> <pre><code class="language-txt">523 ms ± 10.8 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.01 MiB
</code></pre> <p>Why is it faster with loops?</p> <p>Because using list comprehension, the whole list must be generated before doing the slice operation. The same is not true for the loop, that only runs through some of the values.</p> <h3 id="can-we-do-better-2">Can we do better?</h3> <p>Yes, with <a href="https://docs.python.org/3/library/itertools.html#itertools.islice">islice</a>.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">itertools</span> <span class="kn">import</span> <span class="n">islice</span>

<span class="n">tmp</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">islice</span><span class="p">((</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)),</span> <span class="mi">1_000_000</span><span class="p">))</span>
</code></pre></div></div> <pre><code class="language-txt">72.5 ms ± 1.82 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.01 MiB
</code></pre> <h3 id="what-about-when-we-want-to-get-the-last-n-samples">What about when we want to get the last N samples?</h3> <p>We can achieve the same result with <code class="language-plaintext highlighter-rouge">islice</code>. Let’s get straight to the comparisons:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">n</span><span class="p">,</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)):</span>
  <span class="k">if</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">9_000_000</span><span class="p">:</span>
    <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">1.44 s ± 95.3 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.00 MiB
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)][</span><span class="mi">9_000_000</span><span class="p">:]</span>
</code></pre></div></div> <pre><code class="language-txt">743 ms ± 8.52 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 177.31 MiB
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">islice</span><span class="p">((</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)),</span> <span class="mi">9_000_000</span><span class="p">,</span> <span class="bp">None</span><span class="p">))</span>
</code></pre></div></div> <pre><code class="language-txt">796 ms ± 11.8 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: -0.16 MiB
</code></pre> <hr/> <p>Note again that, as it happened with <code class="language-plaintext highlighter-rouge">dropwhile</code> when the condition takes longer to be satisfied, while using <code class="language-plaintext highlighter-rouge">islice</code> is slower than doing it with list comprehension, it takes much less memory.</p> <h3 id="what-if-we-just-want-to-count-the-number-of-elements-that-will-be-generated">What if we just want to count the number of elements that will be generated?</h3> <p>Suppose we want to know how many elements will be generated from a condition. Usually, we would do it like this:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
<span class="n">count</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">1.02 s ± 63.6 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
increment: 0.04 MiB
</code></pre> <p>But the problem is, we are storing a whole list in memory only to get its length.</p> <h3 id="can-we-do-better-3">Can we do better?</h3> <p>Yes, by creating a generator that generates <code class="language-plaintext highlighter-rouge">1</code> every time the condition is true, and summing it.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">count</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="mi">1</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">991 ms ± 18.9 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
increment: 0.00 MiB
</code></pre> <h2 id="other-useful-itertools-functions">Other useful <a href="https://docs.python.org/3/library/itertools.html?highlight=itertools#module-itertools">itertools</a> functions</h2> <p>We already introduced 3 of the most useful functions: <code class="language-plaintext highlighter-rouge">dropwhile</code>, <code class="language-plaintext highlighter-rouge">islice</code>, and <code class="language-plaintext highlighter-rouge">takewhile</code>. Let’s check other useful functions.</p> <h3 id="cycle"><a href="https://docs.python.org/3/library/itertools.html?highlight=itertools#itertools.cycle">cycle</a></h3> <p>Repeats indefinitely a given sequence.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">itertools</span> <span class="kn">import</span> <span class="n">cycle</span>

<span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">counter</span><span class="p">,</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="nf">cycle</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">4</span><span class="p">))):</span>
  <span class="k">if</span> <span class="n">counter</span> <span class="o">==</span> <span class="mi">10</span><span class="p">:</span>
    <span class="k">break</span>

  <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">[0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
</code></pre> <h3 id="repeat"><a href="https://docs.python.org/3/library/itertools.html?highlight=itertools#itertools.repeat">repeat</a></h3> <p>Repeats indefinitely a given value, unless the <code class="language-plaintext highlighter-rouge">times</code> argument is specified.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">itertools</span> <span class="kn">import</span> <span class="n">repeat</span>

<span class="n">tmp</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">repeat</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">[10, 10, 10, 10, 10]
</code></pre> <h3 id="product"><a href="https://docs.python.org/3/library/itertools.html?highlight=itertools#itertools.product">product</a></h3> <p>Equivalent to a nested for-loop.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
      <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
        <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">sum</span><span class="p">([</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">l</span><span class="p">]))</span>

<span class="nf">print</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4]
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">itertools</span> <span class="kn">import</span> <span class="n">product</span>

<span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="nf">sum</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">product</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">))]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4]
</code></pre> <p>Since in this case we are using the same sequence for all the loops, we can use <code class="language-plaintext highlighter-rouge">repeat</code> to simplify the code:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">itertools</span> <span class="kn">import</span> <span class="n">product</span>

<span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="nf">sum</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">product</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="n">repeat</span><span class="o">=</span><span class="mi">4</span><span class="p">)]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4]
</code></pre> <h3 id="itertools-has-all-the-combinatorics-functions-implemented"><a href="https://docs.python.org/3/library/itertools.html?highlight=itertools#module-itertools">itertools</a> has all the combinatorics functions implemented</h3> <table> <thead> <tr> <th style="text-align: center">product</th> <th style="text-align: center">permutation</th> <th style="text-align: center">combination w/ replacement</th> <th style="text-align: center">combination</th> </tr> </thead> <tbody> <tr> <td style="text-align: center">AA</td> <td style="text-align: center"> </td> <td style="text-align: center">AA</td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">AB</td> <td style="text-align: center">AB</td> <td style="text-align: center">AB</td> <td style="text-align: center">AB</td> </tr> <tr> <td style="text-align: center">AC</td> <td style="text-align: center">AC</td> <td style="text-align: center">AC</td> <td style="text-align: center">AC</td> </tr> <tr> <td style="text-align: center">AD</td> <td style="text-align: center">AD</td> <td style="text-align: center">AD</td> <td style="text-align: center">AD</td> </tr> <tr> <td style="text-align: center">BA</td> <td style="text-align: center">BA</td> <td style="text-align: center"> </td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">BB</td> <td style="text-align: center"> </td> <td style="text-align: center">BB</td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">BC</td> <td style="text-align: center">BC</td> <td style="text-align: center">BC</td> <td style="text-align: center">BC</td> </tr> <tr> <td style="text-align: center">BD</td> <td style="text-align: center">BD</td> <td style="text-align: center">BD</td> <td style="text-align: center">BD</td> </tr> <tr> <td style="text-align: center">CA</td> <td style="text-align: center">CA</td> <td style="text-align: center"> </td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">CB</td> <td style="text-align: center">CB</td> <td style="text-align: center"> </td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">CC</td> <td style="text-align: center"> </td> <td style="text-align: center">CC</td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">CD</td> <td style="text-align: center">CD</td> <td style="text-align: center">CD</td> <td style="text-align: center">CD</td> </tr> <tr> <td style="text-align: center">DA</td> <td style="text-align: center">DA</td> <td style="text-align: center"> </td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">DB</td> <td style="text-align: center">DB</td> <td style="text-align: center"> </td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">DC</td> <td style="text-align: center">DC</td> <td style="text-align: center"> </td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">DD</td> <td style="text-align: center"> </td> <td style="text-align: center">DD</td> <td style="text-align: center"> </td> </tr> </tbody> </table> <h2 id="improving-code-with-functools">Improving code with <a href="https://docs.python.org/3/library/functools.html?highlight=functools#module-functools">functools</a></h2> <h3 id="storing-function-calls-with-lru_cache">Storing function calls with <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache">lru_cache</a></h3> <p>Let’s take the fibonacci function, for example, that calls itself recursively.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">n</span>
    <span class="k">return</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div> <p>Let’s use it in a list comprehension to get the first 16 fibonacci numbers:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="nf">fib</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">16</span><span class="p">)]</span>
</code></pre></div></div> <pre><code class="language-txt">698 µs ± 152 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)
</code></pre> <p>It takes a pretty good amount of time to execute for a small number. But what if we could automatically save the results of the previous calls to the function? That is what <code class="language-plaintext highlighter-rouge">lru_cache</code> is all about. It stores previous calls, with its given parameters and calculated output, as a least recent used (LRU) cache. This way, whenever we call the function and this call was already made (and its results are still stored in the cache), we simply get the results from the cache.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">functools</span> <span class="kn">import</span> <span class="n">lru_cache</span>

<span class="nd">@lru_cache</span>
<span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">n</span>
    <span class="k">return</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div> <p>Let’s try that line again:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="nf">fib</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">16</span><span class="p">)]</span>
</code></pre></div></div> <pre><code class="language-txt">3.34 µs ± 719 ns per loop (mean ± std. dev. of 7 runs, 10 loops each)
</code></pre> <p>Now, let’s check the cache information:</p> <ul> <li>hits: number of times the function was called and the results were already there;</li> <li>misses: number of times the function was called and the results were not there;</li> <li>maxsize: current maximum allowed size of the cache;</li> <li>currsize: actual size of the cache (stored results).</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">fib</span><span class="p">.</span><span class="nf">cache_info</span><span class="p">())</span>
</code></pre></div></div> <pre><code class="language-txt">CacheInfo(hits=1132, misses=16, maxsize=128, currsize=16)
</code></pre> <h3 id="creating-functions-with-defaults-from-partial">Creating functions with defaults from <a href="https://docs.python.org/3/library/functools.html#functools.partial">partial</a></h3> <p>Suppose we have a function, called <code class="language-plaintext highlighter-rouge">divide_by</code>. It is a pretty generic function, but it is usually called with some specific values, like dividing by two, or by three.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">divide_by</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
  <span class="k">return</span> <span class="n">x</span> <span class="o">/</span> <span class="n">y</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">divide_by</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">divide_by</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</code></pre></div></div> <pre><code class="language-txt">6.0
4.0
</code></pre> <p>What if, instead of creating an entire new function, we could only create different signatures for the function, one for each common y value? That is what <code class="language-plaintext highlighter-rouge">partial</code> is for:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">functools</span> <span class="kn">import</span> <span class="n">partial</span>

<span class="n">divide_by_two</span> <span class="o">=</span> <span class="nf">partial</span><span class="p">(</span><span class="n">divide_by</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">divide_by_three</span> <span class="o">=</span> <span class="nf">partial</span><span class="p">(</span><span class="n">divide_by</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">divide_by_two</span><span class="p">(</span><span class="mi">12</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">divide_by_three</span><span class="p">(</span><span class="mi">12</span><span class="p">))</span>
</code></pre></div></div> <pre><code class="language-txt">6.0
4.0
</code></pre>]]></content><author><name></name></author><category term="python"/><category term="programming"/><category term="code"/><category term="improvement"/><category term="python"/><summary type="html"><![CDATA[How to use functions from the default library to improve your code.]]></summary></entry><entry><title type="html">The problem of research code reproducibility</title><link href="https://george-gca.github.io/blog/2022/research-code-reproducibility/" rel="alternate" type="text/html" title="The problem of research code reproducibility"/><published>2022-10-21T15:13:16+00:00</published><updated>2022-10-21T15:13:16+00:00</updated><id>https://george-gca.github.io/blog/2022/research-code-reproducibility</id><content type="html" xml:base="https://george-gca.github.io/blog/2022/research-code-reproducibility/"><![CDATA[<p>Everyone in the research community had that problem already:</p> <blockquote> <p>You found a paper that you want to reproduce. You found out that the original author (or possibly another researcher) published code to run those experiments. You download the code, try to run it, but it doesn’t work. There are missing code, missing datasets, or missing dependencies. Maybe the code is a little outdated, and you need to update it to run it on your machine. Or you need to find out which specific library versions the authors used. You spend hours trying to get the code to run, but to no avail. You try to contact the authors, but they do not respond. You try to fix the code yourself, but it is too complicated. You give up.</p> </blockquote> <p>Who never got so frustrated to the point that you just give up on that code, maybe even on that paper? Hell, I know people that gave up on a whole field of research because they could not reproduce the results of a paper. Multiple times I got caught in this kind of situation, and got me questioning the whole code publishing part. After a lot of afterthought, I came to a partial solution to this problem.</p> <h2 id="the-main-culprit">The main culprit</h2> <p>Most of the time that I am unable to run someone else’s code, it is because of one thing: <strong>dependencies versions are not specified</strong>.</p> <p>Sure, a lot of people create something like <code class="language-plaintext highlighter-rouge">requirements.txt</code>, but they usually lack the version number. Even if they do specify the version number, it is usually not the exact version number. For example, instead of <code class="language-plaintext highlighter-rouge">numpy==1.19.5</code>, they would write <code class="language-plaintext highlighter-rouge">numpy&gt;=1.19.5</code>. This is not good enough. If you want to reproduce someone else’s results, you need to know <strong>exactly</strong> which version of each dependency you need to install. Otherwise, you will get different results. Even if you specify the exact version number, you might still get different results if the authors used a different version of the language, say, Python, or some other low-level dependencies, like cuda or cuDNN.</p> <h2 id="docker-for-the-help">Docker for the help</h2> <p>That is where <a href="https://www.docker.com/">Docker</a> comes in. Docker is a <a href="https://www.docker.com/resources/what-container/">containerization technology</a> that allows you to create an <a href="https://docs.docker.com/glossary/#image">image</a> that packs all the dependencies that you need to run your code. You can then run your code inside a <a href="https://docs.docker.com/glossary/#container">container</a>, and you will <strong>possibly</strong> get the same results as the authors. Making an allusion to object oriented programming, <strong>image</strong> is the class and <strong>container</strong> is an object or an instance from that class. You can even share that image with other people, so they can run your code too. Docker also supports <a href="https://github.com/NVIDIA/nvidia-docker">running code on GPUs</a>.</p> <p>As an example, here is the <a href="https://github.com/george-gca/sr-pytorch-lightning">base code</a> that I used during my master degree. I tried as much as possible to make it reproducible and extensible. That means to not only run the AI model, but also be able to create your own model and run it with the same data and training parameters, to allow comparisons.</p> <p>I decided to split the logic of dealing with Docker (contained in <a href="https://github.com/george-gca/sr-pytorch-lightning/blob/main/Makefile">Makefile</a>) from running the Python code itself (contained in <a href="https://github.com/george-gca/sr-pytorch-lightning/blob/main/start_here.sh">start_here.sh</a>). The recipe for creating the Docker image is inside the <a href="https://github.com/george-gca/sr-pytorch-lightning/blob/main/Dockerfile">Dockerfile</a>, and I also made available a <a href="https://github.com/george-gca/sr-pytorch-lightning/blob/main/Dockerfile_fixed_versions">Dockerfile</a> with all the versions of the dependencies fixed, like you can see in the code snippet below. Everything you might need to run the code is explained in the <a href="https://github.com/george-gca/sr-pytorch-lightning/blob/main/README.md">README</a> file.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nv">DEBIAN_FRONTEND</span><span class="o">=</span>noninteractive <span class="nv">$APT_INSTALL</span> <span class="se">\</span>
        <span class="nv">bc</span><span class="o">=</span>1.07.1-2 <span class="se">\</span>
        <span class="nv">curl</span><span class="o">=</span>7.58.0-2ubuntu3.18 <span class="se">\</span>
        <span class="nv">git</span><span class="o">=</span>1:2.17.1-1ubuntu0.11 <span class="se">\</span>
        libffi-dev<span class="o">=</span>3.2.1-8 <span class="se">\</span>
        <span class="nv">rsync</span><span class="o">=</span>3.1.2-2.1ubuntu1.4 <span class="se">\</span>
        <span class="nv">wget</span><span class="o">=</span>1.19.4-1ubuntu2.2 <span class="o">&amp;&amp;</span> <span class="se">\</span>

<span class="c"># ==================================================================</span>
<span class="c"># install python libraries via pip</span>
<span class="c"># ------------------------------------------------------------------</span>

    <span class="nv">$PIP_INSTALL</span> <span class="se">\</span>
        <span class="nv">pip</span><span class="o">==</span>22.0.4 <span class="se">\</span>
        <span class="nv">setuptools</span><span class="o">==</span>62.2.0 <span class="se">\</span>
        <span class="nv">wheel</span><span class="o">==</span>0.37.1 <span class="o">&amp;&amp;</span> <span class="se">\</span>
</code></pre></div></div> <p>To ensure reproducibility despite the random number generators, I used the <a href="https://pytorch-lightning.readthedocs.io/en/stable/api/pytorch_lightning.utilities.seed.html#pytorch_lightning.utilities.seed.seed_everything">seed_everything</a> function from PyTorch Lightning. This function sets seed for pseudo-random number generators in: <code class="language-plaintext highlighter-rouge">pytorch</code>, <code class="language-plaintext highlighter-rouge">numpy</code>, <code class="language-plaintext highlighter-rouge">python.random</code>. It also sets the following environment variables: <code class="language-plaintext highlighter-rouge">PL_GLOBAL_SEED</code> and <code class="language-plaintext highlighter-rouge">PL_SEED_WORKERS</code>.</p> <h2 id="docker-doesnt-solve-everything">Docker doesn’t solve everything</h2> <p>As you can probably be thinking, this is not a perfect solution. There are still problems that might surge, and that you need to be aware of, since some of these are from out of our control.</p> <h3 id="repositories-changes">Repositories changes</h3> <p>Look, for example, this part of the <a href="https://github.com/george-gca/sr-pytorch-lightning/blob/main/Dockerfile_fixed_versions">Dockerfile</a>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># temporary solution for bug</span>
<span class="c"># see https://forums.developer.nvidia.com/t/gpg-error-http-developer-download-nvidia-com-compute-cuda-repos-ubuntu1804-x86-64/212904/3</span>
apt-key adv <span class="nt">--fetch-keys</span> https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/3bf863cc.pub <span class="o">&amp;&amp;</span> <span class="se">\</span>
apt-key adv <span class="nt">--fetch-keys</span> https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub <span class="o">&amp;&amp;</span> <span class="se">\</span>
</code></pre></div></div> <p>This is a solution for a bug that I found with the NVIDIA repository. Basically, they are (were?) in the process of rotating their repository GPG public keys, which is used to sign the packages. This was causing an error in the <code class="language-plaintext highlighter-rouge">apt-get update</code> command when creating the Docker image, and this was not happening during the entirety of my experiments, but happened by the time I decided to publish this code.</p> <h3 id="dependencies-dependencies">Dependencies’ dependencies</h3> <p>Sometimes some of your dependencies specific version requires specific versions of its own dependencies. This happened to me when specifying <code class="language-plaintext highlighter-rouge">tensorboard==2.9.0</code>, which caused an error when building the Docker image. To fix this, I needed to define the proper <code class="language-plaintext highlighter-rouge">protobuf</code> version to install, even though my code does not use <code class="language-plaintext highlighter-rouge">protobuf</code> directly.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">prettytable</span><span class="o">==</span>3.3.0 <span class="se">\</span>
<span class="c"># specify protobuf to avoid bug with tensorboard</span>
<span class="c"># https://developers.google.com/protocol-buffers/docs/news/2022-05-06#python-updates</span>
<span class="nv">protobuf</span><span class="o">==</span>3.20 <span class="se">\</span>
pytorch-lightning<span class="o">==</span>1.6.3 <span class="se">\</span>
<span class="nv">tensorboard</span><span class="o">==</span>2.9.0 <span class="se">\</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="research-code"/><category term="research"/><category term="programming"/><category term="reproducibility"/><category term="code"/><summary type="html"><![CDATA[A brief overview of the problem of research code reproducibility.]]></summary></entry><entry><title type="html">Creating localized blog posts</title><link href="https://george-gca.github.io/blog/2022/localized-blog/" rel="alternate" type="text/html" title="Creating localized blog posts"/><published>2022-09-30T17:40:13+00:00</published><updated>2022-09-30T17:40:13+00:00</updated><id>https://george-gca.github.io/blog/2022/localized-blog</id><content type="html" xml:base="https://george-gca.github.io/blog/2022/localized-blog/"><![CDATA[<p>This post is part of a series of posts that explain how to set up your own site based on the al-folio theme and add support for a second language:</p> <ul> <li><a href="/blog/2022/running-local-al-folio/">Running locally your own al-folio website</a></li> <li><a href="/blog/2022/dual-language-al-folio/">Turning your al-folio into a dual-language website</a></li> <li><a href="/blog/2022/localized-cv/">Creating localized CV pages</a></li> <li><a href="/blog/2022/localized-projects/">Creating localized Projects pages</a></li> <li>Creating localized blog posts</li> </ul> <hr/> <p>We <a href="/blog/2022/running-local-al-folio/">created a local al-folio website</a>, <a href="/blog/2022/dual-language-al-folio/">added support for another language in it</a>, <a href="/blog/2022/localized-cv/">created localized CV pages</a>, and <a href="/blog/2022/localized-projects/">project pages</a>. Now, let’s localize the blog part.</p> <h2 id="creating-the-structure">Creating the structure</h2> <p>If you go to the blog section of your al-folio site, you’ll realize that it is quite empty, although there are posts in the template. Actually, the <a href="https://github.com/kurtsson/jekyll-multiple-languages-plugin">Jekyll Multiple Languages Plugin</a> already support <a href="https://github.com/kurtsson/jekyll-multiple-languages-plugin#57-creating-posts">localized blog posts</a>. It is not displaying them because it is not finding them. So, let’s create the correct structure for them. Create a <code class="language-plaintext highlighter-rouge">_posts/</code> directory inside each language under the <code class="language-plaintext highlighter-rouge">_i18n/</code> directory, and copy the content of the <code class="language-plaintext highlighter-rouge">_posts/</code> directory from the root of the website to the language directories. So, for example, if you have a <code class="language-plaintext highlighter-rouge">_posts/</code> directory with the following content:</p> <ul> <li>_posts/2015-03-15-formatting-and-links.md</li> <li>_posts/2015-05-15-images.md</li> <li>_posts/2015-07-15-code.md</li> <li>_posts/2015-10-20-comments.md</li> <li>_posts/2015-10-20-math.md</li> <li>_posts/2018-12-22-distill.md</li> <li>_posts/2020-09-28-github-metadata.md</li> <li>_posts/2020-09-28-twitter.md</li> <li>_posts/2021-07-04-diagrams.md</li> <li>_posts/2022-02-01-redirect.md</li> </ul> <p>You should create the following structure for all your languages, in this example, the English language:</p> <ul> <li>_i18n/en/_posts/2015-03-15-formatting-and-links.md</li> <li>_i18n/en/_posts/2015-05-15-images.md</li> <li>_i18n/en/_posts/2015-07-15-code.md</li> <li>_i18n/en/_posts/2015-10-20-comments.md</li> <li>_i18n/en/_posts/2015-10-20-math.md</li> <li>_i18n/en/_posts/2018-12-22-distill.md</li> <li>_i18n/en/_posts/2020-09-28-github-metadata.md</li> <li>_i18n/en/_posts/2020-09-28-twitter.md</li> <li>_i18n/en/_posts/2021-07-04-diagrams.md</li> <li>_i18n/en/_posts/2022-02-01-redirect.md</li> </ul> <p>Create that, translate the pages contents, and it will now show the missing blog posts. Easy, right? Errr, you are missing a few small details: the date format, the reading time, and the link when clicking on a tag in the header of the blog section. The bad news is that Jekyll doesn’t natively support localized date formats. The good news is that it is not that hard to create it though. Let’s start with the date format.</p> <h2 id="localizing-the-date-format">Localizing the date format</h2> <p>There are two main formats of date used in the template: in the posts list and inside the posts, with the format <code class="language-plaintext highlighter-rouge">September 28, 2020</code>, and when filtering the posts (e.g.: by tag), with the format <code class="language-plaintext highlighter-rouge">Sep 28, 2020</code>. The easiest way I found of localizing them is by first manually translating the months names. For this, add the following section to your language files (<code class="language-plaintext highlighter-rouge">_i18n/en.yml</code> and <code class="language-plaintext highlighter-rouge">_i18n/pt-br.yml</code>), translating the months names to your language:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">months</span><span class="pi">:</span>
  <span class="na">long</span><span class="pi">:</span>
    <span class="na">january</span><span class="pi">:</span> <span class="s">January</span>
    <span class="na">february</span><span class="pi">:</span> <span class="s">February</span>
    <span class="na">march</span><span class="pi">:</span> <span class="s">March</span>
    <span class="na">april</span><span class="pi">:</span> <span class="s">April</span>
    <span class="na">may</span><span class="pi">:</span> <span class="s">May</span>
    <span class="na">june</span><span class="pi">:</span> <span class="s">June</span>
    <span class="na">july</span><span class="pi">:</span> <span class="s">July</span>
    <span class="na">august</span><span class="pi">:</span> <span class="s">August</span>
    <span class="na">september</span><span class="pi">:</span> <span class="s">September</span>
    <span class="na">october</span><span class="pi">:</span> <span class="s">October</span>
    <span class="na">november</span><span class="pi">:</span> <span class="s">November</span>
    <span class="na">december</span><span class="pi">:</span> <span class="s">December</span>
  <span class="na">short</span><span class="pi">:</span>
    <span class="na">january</span><span class="pi">:</span> <span class="s">Jan</span>
    <span class="na">february</span><span class="pi">:</span> <span class="s">Feb</span>
    <span class="na">march</span><span class="pi">:</span> <span class="s">Mar</span>
    <span class="na">april</span><span class="pi">:</span> <span class="s">Apr</span>
    <span class="na">may</span><span class="pi">:</span> <span class="s">May</span>
    <span class="na">june</span><span class="pi">:</span> <span class="s">Jun</span>
    <span class="na">july</span><span class="pi">:</span> <span class="s">Jul</span>
    <span class="na">august</span><span class="pi">:</span> <span class="s">Aug</span>
    <span class="na">september</span><span class="pi">:</span> <span class="s">Sep</span>
    <span class="na">october</span><span class="pi">:</span> <span class="s">Oct</span>
    <span class="na">november</span><span class="pi">:</span> <span class="s">Nov</span>
    <span class="na">december</span><span class="pi">:</span> <span class="s">Dec</span>
</code></pre></div></div> <p>Since the dates are used in a variety of locations, let’s create a function to reuse the code. Create the file <code class="language-plaintext highlighter-rouge">_includes/date_format.html</code> with the following code:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">months</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'january|february|march|april|may|june|july|august|september|october|november|december'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="w"> </span><span class="s1">'|'</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">m</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">include</span><span class="p">.</span><span class="nv">date_from</span><span class="p">.</span><span class="nv">date</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">date</span><span class="p">:</span><span class="w"> </span><span class="s1">'%-m'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">minus</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">day</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">include</span><span class="p">.</span><span class="nv">date_from</span><span class="p">.</span><span class="nv">date</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">date</span><span class="p">:</span><span class="w"> </span><span class="s1">'%d'</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">month</span><span class="w"> </span><span class="cp">%}</span>months.<span class="cp">{{</span><span class="w"> </span><span class="nv">include</span><span class="p">.</span><span class="nv">format</span><span class="w"> </span><span class="cp">}}</span>.<span class="cp">{{</span><span class="w"> </span><span class="nv">months</span><span class="p">[</span><span class="nv">m</span><span class="p">]</span><span class="w"> </span><span class="cp">}}{%</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">year</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">include</span><span class="p">.</span><span class="nv">date_from</span><span class="p">.</span><span class="nv">date</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">date</span><span class="p">:</span><span class="w"> </span><span class="s1">'%Y'</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">if</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">lang</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">'en'</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{%-</span><span class="w"> </span><span class="nt">t</span><span class="w"> </span><span class="nv">month</span><span class="w"> </span><span class="cp">%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">day</span><span class="w"> </span><span class="cp">}}</span>, <span class="cp">{{</span><span class="w"> </span><span class="nv">year</span><span class="w"> </span><span class="cp">-}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">else</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{{-</span><span class="w"> </span><span class="nv">day</span><span class="w"> </span><span class="cp">}}</span> de <span class="cp">{%</span><span class="w"> </span><span class="nt">t</span><span class="w"> </span><span class="nv">month</span><span class="w"> </span><span class="cp">%}</span>, <span class="cp">{{</span><span class="w"> </span><span class="nv">year</span><span class="w"> </span><span class="cp">-}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">endif</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>This code defines a function that extracts the month, day, and year from the <code class="language-plaintext highlighter-rouge">date_from</code> variable, formats according to <code class="language-plaintext highlighter-rouge">format</code>, and returns the formatted localized string. Notice that, to access the given variables, we must refer to them preceded with <code class="language-plaintext highlighter-rouge">include.</code>. The <code class="language-plaintext highlighter-rouge">format</code> variable can be either <code class="language-plaintext highlighter-rouge">long</code> or <code class="language-plaintext highlighter-rouge">short</code>, as we defined above, and the <code class="language-plaintext highlighter-rouge">date_from</code> variable must have a date object inside it. The function also considers the current language. Now, let’s call the function with the proper parameters. Inside the file <code class="language-plaintext highlighter-rouge">blog/index.html</code>, do the following changes:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- {{ post.date | date: '%B %-d, %Y' }} --&gt;</span>
{% include date_format.html format="long" date_from=post %}
</code></pre></div></div> <p>The posts list will now display the date format correctly. Just do the same changes for every other place where the date format appears, like the filters pages, changing the month format to <code class="language-plaintext highlighter-rouge">"short"</code> when needed, and also giving the correct <code class="language-plaintext highlighter-rouge">date_from</code> parameter. For example, for the file <code class="language-plaintext highlighter-rouge">_layouts/archive-category.html</code> the change will be:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- &lt;th scope="row"&gt;{{ post.date | date: "%b %-d, %Y" }}&lt;/th&gt; --&gt;</span>
<span class="nt">&lt;th</span> <span class="na">scope=</span><span class="s">"row"</span><span class="nt">&gt;</span>{% include date_format.html format="short" date_from=post %}<span class="nt">&lt;/th&gt;</span>
</code></pre></div></div> <h2 id="localizing-the-reading-time">Localizing the reading time</h2> <p>Now, let’s localize the reading time. Do the following changes to the file <code class="language-plaintext highlighter-rouge">blog/index.html</code>:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- {{ read_time }} min read &amp;nbsp; &amp;middot; &amp;nbsp; --&gt;</span>
{% if site.lang == 'en' %}{{ read_time }} min read{% else %}Leitura de {{ read_time }} min{% endif %} <span class="ni">&amp;nbsp;</span> <span class="ni">&amp;middot;</span> <span class="ni">&amp;nbsp;</span>
</code></pre></div></div> <h2 id="fixing-blog-archive-navigation">Fixing blog archive navigation</h2> <p>When you click to filter blog posts by tag, year, or category, the page will show the posts, but the navigation will be broken. This is because these navigations are not localized. To fix this, modify the following lines in files <code class="language-plaintext highlighter-rouge">_layouts/archive-category.html</code>, <code class="language-plaintext highlighter-rouge">_layouts/archive-tag.html</code>, and <code class="language-plaintext highlighter-rouge">_layouts/archive-year.html</code>:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- &lt;a class="post-link" href="{{ post.url | relative_url }}"&gt;{{ post.title }}&lt;/a&gt; --&gt;</span>
<span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"post-link"</span> <span class="na">href=</span><span class="s">"{{ post.url | prepend: site.baseurl }}"</span><span class="nt">&gt;</span>{{ post.title }}<span class="nt">&lt;/a&gt;</span>
</code></pre></div></div> <p>Also, change the following line in the file <code class="language-plaintext highlighter-rouge">blog/index.html</code>:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- &lt;i class="fas fa-hashtag fa-sm"&gt;&lt;/i&gt; &lt;a href="{{ tag | prepend: '/blog/tag/' | relative_url }}"&gt;{{ tag }}&lt;/a&gt; --&gt;</span>
<span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">"fas fa-hashtag fa-sm"</span><span class="nt">&gt;&lt;/i&gt;</span> <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{{ tag | prepend: '/blog/tag/' | prepend: site.baseurl }}"</span><span class="nt">&gt;</span>{{ tag }}<span class="nt">&lt;/a&gt;</span>
</code></pre></div></div> <h2 id="fixing-pagination">Fixing pagination</h2> <p>If your blog has enough posts to enable more pages with results (pagination), you’ll realize that it is not yet translated. To fix this, first we need to create localized words for <code class="language-plaintext highlighter-rouge">Older</code> and <code class="language-plaintext highlighter-rouge">Newer</code> in the language files <code class="language-plaintext highlighter-rouge">_i18n/en.yml</code> and <code class="language-plaintext highlighter-rouge">_i18n/pt-br.yml</code>, respectivelly:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">pagination</span><span class="pi">:</span>
  <span class="na">newer</span><span class="pi">:</span> <span class="s">Newer</span>
  <span class="na">older</span><span class="pi">:</span> <span class="s">Older</span>
</code></pre></div></div> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">pagination</span><span class="pi">:</span>
  <span class="na">newer</span><span class="pi">:</span> <span class="s">Recentes</span>
  <span class="na">older</span><span class="pi">:</span> <span class="s">Antigas</span>
</code></pre></div></div> <p>Next, we change all uses of <code class="language-plaintext highlighter-rouge">relative_url</code> for <code class="language-plaintext highlighter-rouge">prepend: site.baseurl</code> in the file <code class="language-plaintext highlighter-rouge">_includes/pagination.html</code>, so it correctly handles the language urls. Also, change the words “Newer” and “Older” for its correspondent translation from the correct language file:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{%- if paginator.total_pages &gt; 1 -%}
<span class="nt">&lt;nav</span> <span class="na">aria-label=</span><span class="s">"Blog page naviation"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"pagination pagination-lg justify-content-center"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"page-item {% unless paginator.previous_page %}disabled{% endunless %}"</span><span class="nt">&gt;</span>
      <span class="c">&lt;!-- &lt;a class="page-link" href="{{ paginator.previous_page_path | relative_url }}" tabindex="-1" aria-disabled="{{ paginator.previous_page }}"&gt;Newer&lt;/a&gt; --&gt;</span>
      <span class="nt">&lt;a</span>
        <span class="na">class=</span><span class="s">"page-link"</span>
        <span class="na">href=</span><span class="s">"{{ paginator.previous_page_path |  prepend: site.baseurl }}"</span>
        <span class="na">tabindex=</span><span class="s">"-1"</span>
        <span class="na">aria-disabled=</span><span class="s">"{{ paginator.previous_page }}"</span>
        <span class="nt">&gt;</span>{% t pagination.newer %}<span class="nt">&lt;/a</span>
      <span class="nt">&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
    {%- if paginator.page_trail -%} {% for trail in paginator.page_trail -%}
    <span class="c">&lt;!-- &lt;li class="page-item {% if page.url == trail.path %}active{% endif %}"&gt;&lt;a class="page-link" href="{{ trail.path | relative_url }}" title="{{trail.title}}"&gt;{{ trail.num }}&lt;/a&gt;&lt;/li&gt; --&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"page-item {% if page.url == trail.path %}active{% endif %}"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"page-link"</span> <span class="na">href=</span><span class="s">"{{ trail.path | prepend: site.baseurl }}"</span> <span class="na">title=</span><span class="s">"{{trail.title}}"</span><span class="nt">&gt;</span>{{ trail.num }}<span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
    {% endfor -%} {%- endif -%}
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"page-item {% unless paginator.next_page %}disabled{% endunless %}"</span><span class="nt">&gt;</span>
      <span class="c">&lt;!-- &lt;a class="page-link" href="{{ paginator.next_page_path | relative_url }}"&gt;Older&lt;/a&gt; --&gt;</span>
      <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"page-link"</span> <span class="na">href=</span><span class="s">"{{ paginator.next_page_path | prepend: site.baseurl }}"</span><span class="nt">&gt;</span>{% t pagination.older %}<span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/nav&gt;</span>
{%- endif -%}
</code></pre></div></div> <h2 id="fixing-page-title-in-the-browser">Fixing page title in the browser</h2> <p>If you filter your blog posts by year, you’ll notice that the year is not displayed in the browser title. To fix this, modify the following lines in the file <code class="language-plaintext highlighter-rouge">_includes/metadata.html</code>:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">if</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">'/blog/index.html'</span><span class="w"> </span><span class="cp">%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">blog_nav_title</span><span class="w"> </span><span class="cp">}}</span> | <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">elsif</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="ow">contains</span><span class="w"> </span><span class="s1">'/blog/'</span><span class="w"> </span><span class="cp">%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span> | <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">elsif</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="ow">contains</span><span class="w"> </span><span class="s1">'Announcement'</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">elsif</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s1">'blank'</span><span class="w"> </span><span class="ow">and</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s1">'/'</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{%</span><span class="w"> </span><span class="nt">t</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="cp">%}</span> | <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">else</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">endif</span><span class="w"> </span><span class="cp">-%}</span>
</code></pre></div></div> <p>for these:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">if</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">'/blog/index.html'</span><span class="w"> </span><span class="cp">%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">blog_nav_title</span><span class="w"> </span><span class="cp">}}</span> | <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">elsif</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="ow">contains</span><span class="w"> </span><span class="s1">'/blog/'</span><span class="w"> </span><span class="cp">%}</span>
  <span class="cp">{%-</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">blog_year</span><span class="w"> </span><span class="cp">-%}{{</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">slice</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">11</span><span class="w"> </span><span class="cp">}}{%-</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{%-</span><span class="w"> </span><span class="nt">if</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="nv">blog_year</span><span class="w"> </span><span class="cp">-%}</span>
    <span class="cp">{{</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">date</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">date</span><span class="p">:</span><span class="w"> </span><span class="s1">'%Y'</span><span class="w"> </span><span class="cp">}}</span> | <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
  <span class="cp">{%-</span><span class="w"> </span><span class="nt">else</span><span class="w"> </span><span class="cp">-%}</span>
    <span class="cp">{{</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span> | <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
  <span class="cp">{%-</span><span class="w"> </span><span class="nt">endif</span><span class="w"> </span><span class="cp">-%}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">elsif</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s1">'blank'</span><span class="w"> </span><span class="ow">and</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s1">'/'</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{%-</span><span class="w"> </span><span class="nt">if</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="ow">contains</span><span class="w"> </span><span class="s1">'Announcement'</span><span class="w"> </span><span class="cp">-%}</span>
    <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
  <span class="cp">{%-</span><span class="w"> </span><span class="nt">else</span><span class="w"> </span><span class="cp">-%}</span>
    <span class="cp">{%</span><span class="w"> </span><span class="nt">t</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="cp">%}</span> | <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
  <span class="cp">{%-</span><span class="w"> </span><span class="nt">endif</span><span class="w"> </span><span class="cp">-%}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">else</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">endif</span><span class="w"> </span><span class="cp">-%}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="website"/><category term="development"/><category term="al-folio"/><category term="website"/><category term="jekyll"/><category term="localization"/><category term="languages"/><summary type="html"><![CDATA[How to create localized blog on your al-folio website.]]></summary></entry><entry><title type="html">Creating localized Projects pages</title><link href="https://george-gca.github.io/blog/2022/localized-projects/" rel="alternate" type="text/html" title="Creating localized Projects pages"/><published>2022-09-30T11:57:13+00:00</published><updated>2022-09-30T11:57:13+00:00</updated><id>https://george-gca.github.io/blog/2022/localized-projects</id><content type="html" xml:base="https://george-gca.github.io/blog/2022/localized-projects/"><![CDATA[<p>This post is part of a series of posts that explain how to set up your own site based on the al-folio theme and add support for a second language:</p> <ul> <li><a href="/blog/2022/running-local-al-folio/">Running locally your own al-folio website</a></li> <li><a href="/blog/2022/dual-language-al-folio/">Turning your al-folio into a dual-language website</a></li> <li><a href="/blog/2022/localized-cv/">Creating localized CV pages</a></li> <li>Creating localized Projects pages</li> <li><a href="/blog/2022/localized-blog/">Creating localized blog posts</a></li> </ul> <hr/> <p>We <a href="/blog/2022/running-local-al-folio/">created a local al-folio website</a>, <a href="/blog/2022/dual-language-al-folio/">added support for another language in it</a>, and <a href="/blog/2022/localized-cv/">created localized CV pages</a>. Now, let’s localize the Projects page.</p> <h2 id="localizing-pages-descriptions">Localizing pages descriptions</h2> <p>Let’s first localize all the pages descriptions. This will start with us creating the keys in the <code class="language-plaintext highlighter-rouge">_i18n/en.yml</code> and <code class="language-plaintext highlighter-rouge">_i18n/pt-br.yml</code> files, and moving there the referred content from the pages. So, let’s start by creating the descriptions both in the file root and inside the <code class="language-plaintext highlighter-rouge">projects</code> key. The new <code class="language-plaintext highlighter-rouge">_i18n/en.yml</code> content will be:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">titles</span><span class="pi">:</span>
  <span class="na">about</span><span class="pi">:</span> <span class="s">about</span>
  <span class="na">blog</span><span class="pi">:</span> <span class="s">blog</span>
  <span class="na">cv</span><span class="pi">:</span> <span class="s">cv</span>
  <span class="na">news</span><span class="pi">:</span> <span class="s">news</span>
  <span class="na">projects</span><span class="pi">:</span> <span class="s">projects</span>
  <span class="na">publications</span><span class="pi">:</span> <span class="s">publications</span>
  <span class="na">repositories</span><span class="pi">:</span> <span class="s">repositories</span>
  <span class="na">teaching</span><span class="pi">:</span> <span class="s">teaching</span>
  <span class="na">submenus</span><span class="pi">:</span> <span class="s">submenus</span>
  <span class="na">unk</span><span class="pi">:</span> <span class="s">page not found</span>
<span class="na">descriptions</span><span class="pi">:</span>
  <span class="na">about</span><span class="pi">:</span> <span class="s">about me</span>
  <span class="na">blog</span><span class="pi">:</span> <span class="s">blogging</span>
  <span class="na">publications</span><span class="pi">:</span> <span class="s">publications by categories in reversed chronological order. generated by jekyll-scholar.</span>
  <span class="na">projects</span><span class="pi">:</span> <span class="s">A growing collection of your cool projects.</span>
  <span class="na">repositories</span><span class="pi">:</span> <span class="s">Edit the `_data/repositories.yml` and change the `github_users` and `github_repos` lists to include your own GitHub profile and repositories.</span>
  <span class="na">teaching</span><span class="pi">:</span> <span class="s">Materials for courses you taught. Replace this text with your description.</span>
  <span class="na">unk</span><span class="pi">:</span> <span class="s">Looks like there has been a mistake. Nothing exists here.</span>
<span class="na">projects</span><span class="pi">:</span>
  <span class="na">titles</span><span class="pi">:</span>
    <span class="na">project1</span><span class="pi">:</span> <span class="s">Project </span><span class="m">1</span>
    <span class="na">project2</span><span class="pi">:</span> <span class="s">Project </span><span class="m">2</span>
    <span class="na">project3</span><span class="pi">:</span> <span class="s">Project </span><span class="m">3</span>
    <span class="na">project4</span><span class="pi">:</span> <span class="s">Project </span><span class="m">4</span>
    <span class="na">project5</span><span class="pi">:</span> <span class="s">Project </span><span class="m">5</span>
    <span class="na">project6</span><span class="pi">:</span> <span class="s">Project </span><span class="m">6</span>
  <span class="na">descriptions</span><span class="pi">:</span>
    <span class="na">project1</span><span class="pi">:</span> <span class="s">a project with a background image</span>
    <span class="na">project2</span><span class="pi">:</span> <span class="s">a project with a background image</span>
    <span class="na">project3</span><span class="pi">:</span> <span class="s">a project that redirects to another website</span>
    <span class="na">project4</span><span class="pi">:</span> <span class="s">another without an image</span>
    <span class="na">project5</span><span class="pi">:</span> <span class="s">a project with a background image</span>
    <span class="na">project6</span><span class="pi">:</span> <span class="s">a project with no image</span>
</code></pre></div></div> <p>And now for the <code class="language-plaintext highlighter-rouge">_i18n/pt-br.yml</code>:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">titles</span><span class="pi">:</span>
  <span class="na">about</span><span class="pi">:</span> <span class="s">sobre</span>
  <span class="na">blog</span><span class="pi">:</span> <span class="s">blog</span>
  <span class="na">cv</span><span class="pi">:</span> <span class="s">cv</span>
  <span class="na">news</span><span class="pi">:</span> <span class="s">novidades</span>
  <span class="na">projects</span><span class="pi">:</span> <span class="s">projetos</span>
  <span class="na">publications</span><span class="pi">:</span> <span class="s">publicações</span>
  <span class="na">repositories</span><span class="pi">:</span> <span class="s">repositórios</span>
  <span class="na">teaching</span><span class="pi">:</span> <span class="s">ensino</span>
  <span class="na">submenus</span><span class="pi">:</span> <span class="s">submenus</span>
  <span class="na">unk</span><span class="pi">:</span> <span class="s">página não encontrada</span>
<span class="na">descriptions</span><span class="pi">:</span>
  <span class="na">about</span><span class="pi">:</span> <span class="s">sobre</span>
  <span class="na">blog</span><span class="pi">:</span> <span class="s">blogging</span>
  <span class="na">publications</span><span class="pi">:</span> <span class="s">publicações por categoria em ordem cronológica reversa. gerado pelo jekyll-scholar.</span>
  <span class="na">projects</span><span class="pi">:</span> <span class="s">Uma crescente coleção de seus projetos interessantes.</span>
  <span class="na">repositories</span><span class="pi">:</span> <span class="s">Edite o `_data/repositories.yml` e mude as listas `github_users` e `github_repos` para incluir seu próprio perfil do GitHub e repositórios.</span>
  <span class="na">teaching</span><span class="pi">:</span> <span class="s">Materiais de cursos que você ministrou. Substitua esse texto com sua descrição.</span>
  <span class="na">unk</span><span class="pi">:</span> <span class="s">Parece que ocorreu um erro. Não existe nada aqui.</span>
<span class="na">projects</span><span class="pi">:</span>
  <span class="na">titles</span><span class="pi">:</span>
    <span class="na">project1</span><span class="pi">:</span> <span class="s">Projeto </span><span class="m">1</span>
    <span class="na">project2</span><span class="pi">:</span> <span class="s">Projeto </span><span class="m">2</span>
    <span class="na">project3</span><span class="pi">:</span> <span class="s">Projeto </span><span class="m">3</span>
    <span class="na">project4</span><span class="pi">:</span> <span class="s">Projeto </span><span class="m">4</span>
    <span class="na">project5</span><span class="pi">:</span> <span class="s">Projeto </span><span class="m">5</span>
    <span class="na">project6</span><span class="pi">:</span> <span class="s">Projeto </span><span class="m">6</span>
  <span class="na">descriptions</span><span class="pi">:</span>
    <span class="na">project1</span><span class="pi">:</span> <span class="s">um projeto com imagem de fundo</span>
    <span class="na">project2</span><span class="pi">:</span> <span class="s">um projeto com imagem de fundo</span>
    <span class="na">project3</span><span class="pi">:</span> <span class="s">um projeto que redireciona pra outro website</span>
    <span class="na">project4</span><span class="pi">:</span> <span class="s">outro sem imagem</span>
    <span class="na">project5</span><span class="pi">:</span> <span class="s">um projeto com imagem de fundo</span>
    <span class="na">project6</span><span class="pi">:</span> <span class="s">um projeto sem imagem</span>
</code></pre></div></div> <p>Next, update all the pages to use the new keys. Those will be: <code class="language-plaintext highlighter-rouge">404.html</code>, <code class="language-plaintext highlighter-rouge">_pages/projects.md</code>, <code class="language-plaintext highlighter-rouge">_pages/publications.md</code>, <code class="language-plaintext highlighter-rouge">_pages/repositories.md</code>, <code class="language-plaintext highlighter-rouge">_pages/teaching.md</code>, and all projects inside <code class="language-plaintext highlighter-rouge">_projects/</code> directory. For example, the new description in <code class="language-plaintext highlighter-rouge">404.html</code> will be:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>description: descriptions.unk
</code></pre></div></div> <p>and in <code class="language-plaintext highlighter-rouge">_projects/1_project.md</code>:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>description: projects.descriptions.project1
</code></pre></div></div> <p>Also, update <code class="language-plaintext highlighter-rouge">_layouts/cv.html</code> and <code class="language-plaintext highlighter-rouge">_layouts/page.html</code> to only display the translation description if a description is defined in the markdown file. The new <code class="language-plaintext highlighter-rouge">_layouts/page.html</code> will have:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- &lt;p class="post-description"&gt;{{ page.description }}&lt;/p&gt; --&gt;</span>
<span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"post-description"</span><span class="nt">&gt;</span>{% if page.description %}{% t page.description %}{% endif %}<span class="nt">&lt;/p&gt;</span>
</code></pre></div></div> <p>Now the descriptions should also be localized. The titles and the descriptions of the projects when a project is opened should also be localized, but not in the projects overview page. So, let’s fix this.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2022-09-30-localized-projects/not_localized_projects_overview-480.webp 480w,/assets/img/blog/2022-09-30-localized-projects/not_localized_projects_overview-800.webp 800w,/assets/img/blog/2022-09-30-localized-projects/not_localized_projects_overview-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog/2022-09-30-localized-projects/not_localized_projects_overview.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Projects overview still not working. </div> <h2 id="localizing-projects-overview">Localizing projects overview</h2> <p>When you look inside <code class="language-plaintext highlighter-rouge">_pages/projects.md</code>, you will see more code than in your regular markdown file. The authors decided to call here the html code for building the main layout of the overview page. The interesting parts are these ones:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% if page.horizontal -%}
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row row-cols-2"</span><span class="nt">&gt;</span>{%- for project in sorted_projects -%} {% include projects_horizontal.html %} {%- endfor %}<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
{%- else -%}
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"grid"</span><span class="nt">&gt;</span>{%- for project in sorted_projects -%} {% include projects.html %} {%- endfor %}<span class="nt">&lt;/div&gt;</span>
{%- endif -%}
</code></pre></div></div> <p>These parts mean that there is a horizontal and a vertical layout for the projects overview page. The horizontal layout is used when the <code class="language-plaintext highlighter-rouge">horizontal</code> key is set to <code class="language-plaintext highlighter-rouge">true</code> in the header of this page, and the vertical otherwise. These layouts can both be found in <code class="language-plaintext highlighter-rouge">_includes/projects_horizontal.html</code> and <code class="language-plaintext highlighter-rouge">_includes/projects.html</code>, respectively. These are the files that we need to update to localize the projects overview page. The changes will basically be the same on both files: we need to add the <code class="language-plaintext highlighter-rouge">t</code> tag to the titles and descriptions of the projects, and also correctly update the links to them. The changes to the <code class="language-plaintext highlighter-rouge">_includes/projects_horizontal.html</code> will be:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- &lt;a href="{{ project.url | relative_url }}"&gt; --&gt;</span>
<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{{ project.url | prepend: site.baseurl }}"</span><span class="nt">&gt;</span>
  <span class="c">&lt;!-- &lt;h3 class="card-title text-lowercase"&gt;{{ project.title }}&lt;/h3&gt;
&lt;p class="card-text"&gt;{{ project.description }}&lt;/p&gt; --&gt;</span>

  <span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">"card-title text-lowercase"</span><span class="nt">&gt;</span>{% t project.title %}<span class="nt">&lt;/h3&gt;</span>
  <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"card-text"</span><span class="nt">&gt;</span>{% t project.description %}<span class="nt">&lt;/p&gt;&lt;/a</span>
<span class="nt">&gt;</span>
</code></pre></div></div> <p>Now, the projects overview is displayed correctly. But, if you look closely, you’ll notice that the projects categories have not been translated. Let’s fix this.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2022-09-30-localized-projects/localized_projects_overview-480.webp 480w,/assets/img/blog/2022-09-30-localized-projects/localized_projects_overview-800.webp 800w,/assets/img/blog/2022-09-30-localized-projects/localized_projects_overview-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog/2022-09-30-localized-projects/localized_projects_overview.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Projects overview now working. </div> <h2 id="localizing-projects-categories">Localizing projects categories</h2> <p>The categories will only be translated when displaying, not inside the projects’ headers. This means that, when creating a project, you will still use the categories in English, like in <code class="language-plaintext highlighter-rouge">_projects/1_project.md</code>:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">category</span><span class="pi">:</span> <span class="s">work</span>
</code></pre></div></div> <p>For this, create the localized version of the categories for both languages. Let’s keep this inside the <code class="language-plaintext highlighter-rouge">projects</code> key, so that it will now look like this in <code class="language-plaintext highlighter-rouge">_i18n/en.yml</code>:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">projects</span><span class="pi">:</span>
  <span class="na">titles</span><span class="pi">:</span>
    <span class="na">project1</span><span class="pi">:</span> <span class="s">Project </span><span class="m">1</span>
    <span class="na">project2</span><span class="pi">:</span> <span class="s">Project </span><span class="m">2</span>
    <span class="na">project3</span><span class="pi">:</span> <span class="s">Project </span><span class="m">3</span>
    <span class="na">project4</span><span class="pi">:</span> <span class="s">Project </span><span class="m">4</span>
    <span class="na">project5</span><span class="pi">:</span> <span class="s">Project </span><span class="m">5</span>
    <span class="na">project6</span><span class="pi">:</span> <span class="s">Project </span><span class="m">6</span>
  <span class="na">descriptions</span><span class="pi">:</span>
    <span class="na">project1</span><span class="pi">:</span> <span class="s">a project with a background image</span>
    <span class="na">project2</span><span class="pi">:</span> <span class="s">a project with a background image</span>
    <span class="na">project3</span><span class="pi">:</span> <span class="s">a project that redirects to another website</span>
    <span class="na">project4</span><span class="pi">:</span> <span class="s">another without an image</span>
    <span class="na">project5</span><span class="pi">:</span> <span class="s">a project with a background image</span>
    <span class="na">project6</span><span class="pi">:</span> <span class="s">a project with no image</span>
  <span class="na">categories</span><span class="pi">:</span>
    <span class="na">fun</span><span class="pi">:</span> <span class="s">fun</span>
    <span class="na">work</span><span class="pi">:</span> <span class="s">work</span>
</code></pre></div></div> <p>Now, in <code class="language-plaintext highlighter-rouge">_pages/projects.md</code>, we need to get the correct category inside the loop, then its translation. For this, we’ll use the <code class="language-plaintext highlighter-rouge">capture</code> tag. The new code will be:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- &lt;h2 class="category"&gt;{{ category }}&lt;/h2&gt; --&gt;</span>
{% capture localized_category %}projects.categories.{{category}}{% endcapture %}
<span class="nt">&lt;h2</span> <span class="na">class=</span><span class="s">"category"</span><span class="nt">&gt;</span>{% t localized_category %}<span class="nt">&lt;/h2&gt;</span>
</code></pre></div></div> <p>Now, everything is localized. The projects overview page, the projects categories, and the projects pages.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2022-09-30-localized-projects/correct_localized_projects_overview-480.webp 480w,/assets/img/blog/2022-09-30-localized-projects/correct_localized_projects_overview-800.webp 800w,/assets/img/blog/2022-09-30-localized-projects/correct_localized_projects_overview-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog/2022-09-30-localized-projects/correct_localized_projects_overview.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Projects overview with localized categories. </div>]]></content><author><name></name></author><category term="website"/><category term="development"/><category term="al-folio"/><category term="website"/><category term="jekyll"/><category term="localization"/><category term="languages"/><summary type="html"><![CDATA[How to create localized Projects pages on your al-folio website.]]></summary></entry><entry><title type="html">Creating localized CV pages</title><link href="https://george-gca.github.io/blog/2022/localized-cv/" rel="alternate" type="text/html" title="Creating localized CV pages"/><published>2022-09-29T21:40:13+00:00</published><updated>2022-09-29T21:40:13+00:00</updated><id>https://george-gca.github.io/blog/2022/localized-cv</id><content type="html" xml:base="https://george-gca.github.io/blog/2022/localized-cv/"><![CDATA[<p>This post is part of a series of posts that explain how to set up your own site based on the al-folio theme and add support for a second language:</p> <ul> <li><a href="/blog/2022/running-local-al-folio/">Running locally your own al-folio website</a></li> <li><a href="/blog/2022/dual-language-al-folio/">Turning your al-folio into a dual-language website</a></li> <li>Creating localized CV pages</li> <li><a href="/blog/2022/localized-projects/">Creating localized Projects pages</a></li> <li><a href="/blog/2022/localized-blog/">Creating localized blog posts</a></li> </ul> <hr/> <p>We already <a href="/blog/2022/running-local-al-folio/">created a local al-folio website</a> and <a href="/blog/2022/dual-language-al-folio/">added support for another language in it</a>. If you look at the <code class="language-plaintext highlighter-rouge">cv</code> tab, it looks really nice, and can also give you the option to download a pdf file. Let’s see how we can create a localized (with a per language translation) version of it.</p> <h2 id="creating-the-structure">Creating the structure</h2> <p>The current structure of the cv page is composed of 3 main files: <code class="language-plaintext highlighter-rouge">_pages/cv.md</code>, <code class="language-plaintext highlighter-rouge">_layouts/cv.html</code>, and <code class="language-plaintext highlighter-rouge">_data/cv.yml</code>. The first one is the definition of the page, the second one is the layout of the page, and the third one is the data that is used to populate it. We will create a new folder for each language inside the <code class="language-plaintext highlighter-rouge">_data/</code> directory, and copy the file <code class="language-plaintext highlighter-rouge">_data/cv.yml</code> to both of them. The new <code class="language-plaintext highlighter-rouge">_data/</code> directory will look like this:</p> <ul> <li>_data/en/cv.yml</li> <li>_data/pt-br/cv.yml</li> <li>_data/coauthors.yml</li> <li>_data/repositories.yml</li> <li>_data/venues.yml</li> </ul> <p>Now, lets replace the content of the <code class="language-plaintext highlighter-rouge">_data/pt-br/cv.yml</code> file with the following:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Informações Gerais</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">map</span>
  <span class="na">contents</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Nome Completo</span>
      <span class="na">value</span><span class="pi">:</span> <span class="s">Albert Einstein</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Data de Nascimento</span>
      <span class="na">value</span><span class="pi">:</span> <span class="s">14 de março de </span><span class="m">1879</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Idiomas</span>
      <span class="na">value</span><span class="pi">:</span> <span class="s">Inglês, Alemão</span>

<span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Educação</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">time_table</span>
  <span class="na">contents</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">PhD</span>
      <span class="na">institution</span><span class="pi">:</span> <span class="s">University of Zurich, Zurique, Suíça</span>
      <span class="na">year</span><span class="pi">:</span> <span class="m">1905</span>
      <span class="na">description</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">Descrição 1.</span>
        <span class="pi">-</span> <span class="s">Descrição 2.</span>
        <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Descrição 3.</span>
          <span class="na">contents</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s">Sub-descrição 1.</span>
            <span class="pi">-</span> <span class="s">Sub-descrição 2.</span>
    <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Diploma de ensino federal</span>
      <span class="na">institution</span><span class="pi">:</span> <span class="s">Eidgenössische Technische Hochschule, Zurique, Suíça</span>
      <span class="na">year</span><span class="pi">:</span> <span class="m">1900</span>
      <span class="na">description</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">Descrição 1.</span>
        <span class="pi">-</span> <span class="s">Descrição 2.</span>

<span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Experiência</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">time_table</span>
  <span class="na">contents</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Professor de Física Teórica</span>
      <span class="na">institution</span><span class="pi">:</span> <span class="s">Institute for Advanced Study, Princeton University</span>
      <span class="na">year</span><span class="pi">:</span> <span class="s">1933 - </span><span class="m">1955</span>
      <span class="na">description</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">Descrição 1.</span>
        <span class="pi">-</span> <span class="s">Descrição 2.</span>
        <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Descrição 3.</span>
          <span class="na">contents</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s">Sub-descrição 1.</span>
            <span class="pi">-</span> <span class="s">Sub-descrição 2.</span>
    <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Visiting Professor</span>
      <span class="na">institution</span><span class="pi">:</span> <span class="s">California Institute of Technology, Pasadena, Califórnia, EUA</span>
      <span class="na">year</span><span class="pi">:</span> <span class="m">1933</span>
      <span class="na">description</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">Descrição 1.</span>
        <span class="pi">-</span> <span class="s">Descrição 2.</span>

    <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Diretor</span>
      <span class="na">institution</span><span class="pi">:</span> <span class="s">Kaiser Wilhelm Institute for Physics, Berlim, Alemanha.</span>
      <span class="na">year</span><span class="pi">:</span> <span class="s">1917-1933</span>

    <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Professor de Física Teórica</span>
      <span class="na">institution</span><span class="pi">:</span> <span class="s">Karl-Ferdinand University, Praga, Tchecoslováquia</span>
      <span class="na">year</span><span class="pi">:</span> <span class="s">1911 - </span><span class="m">1917</span>
      <span class="na">description</span><span class="pi">:</span>

    <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Professor Associado de Física Teórica</span>
      <span class="na">institution</span><span class="pi">:</span> <span class="s">University of Zurich, Zurique, Suíça</span>
      <span class="na">year</span><span class="pi">:</span> <span class="s">1909 - </span><span class="m">1911</span>

<span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Projetos de Código Aberto</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">time_table</span>
  <span class="na">contents</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">&lt;a href="https://github.com/alshedivat/al-folio"&gt;al-folio&lt;/a&gt;</span>
      <span class="na">year</span><span class="pi">:</span> <span class="s">2015-atual</span>
      <span class="na">description</span><span class="pi">:</span> <span class="s">Um tema Jekyll bonito, simples, limpo e responsivo para acadêmicos.</span>

<span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Honras e Prêmios</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">time_table</span>
  <span class="na">contents</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">year</span><span class="pi">:</span> <span class="m">1921</span>
      <span class="na">items</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">Prêmio Nobel de Física</span>
        <span class="pi">-</span> <span class="s">Medalha Matteucci</span>
    <span class="pi">-</span> <span class="na">year</span><span class="pi">:</span> <span class="m">2029</span>
      <span class="na">items</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">Medalha Max Planck</span>

<span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Interesses Acadêmicos</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">nested_list</span>
  <span class="na">contents</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Tópico 1.</span>
      <span class="na">items</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">Descrição 1.</span>
        <span class="pi">-</span> <span class="s">Descrição 2.</span>
    <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Tópico 2.</span>
      <span class="na">items</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">Descrição 1.</span>
        <span class="pi">-</span> <span class="s">Descrição 2.</span>

<span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Outros Interesses</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">list</span>
  <span class="na">contents</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">&lt;u&gt;Hobbies:&lt;/u&gt; Hobby 1, Hobby 2, etc.</span>
</code></pre></div></div> <p>Now, open the <code class="language-plaintext highlighter-rouge">_layouts/cv.html</code> file and replace the following line:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- {% for entry in site.data.cv %} --&gt;</span>
{% for entry in site.data[site.lang].cv %}
</code></pre></div></div> <p>This will be sufficient to make the page work for the new language. Now, lets add the option to download the localized pdf file. For this, create a new folder for each language inside the <code class="language-plaintext highlighter-rouge">assets/pdf/</code> directory, and copy the file <code class="language-plaintext highlighter-rouge">assets/pdf/example_pdf.pdf</code> to both of them. The new <code class="language-plaintext highlighter-rouge">assets/pdf/</code> directory will look like this:</p> <ul> <li>assets/pdf/en/example_pdf.pdf</li> <li>assets/pdf/pt-br/example_pdf.pdf</li> <li>assets/pdf/example_pdf.pdf</li> </ul> <p>Now, lets update the link to the localized pdf file. We will use the same name for both files, which is already defined in the <code class="language-plaintext highlighter-rouge">cv_pdf: example_pdf.pdf</code> attribute inside <code class="language-plaintext highlighter-rouge">_pages/cv.md</code>. If you wish to use a different name for the pdfs, rename both and also update this information in the related attribute. Next, modify the following line in the <code class="language-plaintext highlighter-rouge">_layouts/cv.html</code> file:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- &lt;h1 class="post-title"&gt;{% t page.title %} {% if page.cv_pdf %}&lt;a href="{{ page.cv_pdf | prepend: 'assets/pdf/' | relative_url}}" target="_blank" rel="noopener noreferrer" class="float-right"&gt;&lt;i class="fas fa-file-pdf"&gt;&lt;/i&gt;&lt;/a&gt;{% endif %}&lt;/h1&gt; --&gt;</span>
<span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"post-title"</span><span class="nt">&gt;</span>
  {% t page.title %} {% if page.cv_pdf %}<span class="nt">&lt;a</span>
    <span class="na">href=</span><span class="s">"{{ page.cv_pdf | prepend: '/' | prepend: site.lang | prepend: 'assets/pdf/' | relative_url}}"</span>
    <span class="na">target=</span><span class="s">"_blank"</span>
    <span class="na">rel=</span><span class="s">"noopener noreferrer"</span>
    <span class="na">class=</span><span class="s">"float-right"</span>
    <span class="nt">&gt;&lt;i</span> <span class="na">class=</span><span class="s">"fas fa-file-pdf"</span><span class="nt">&gt;&lt;/i&gt;&lt;/a</span>
  <span class="nt">&gt;</span>{% endif %}
<span class="nt">&lt;/h1&gt;</span>
</code></pre></div></div> <p>And that will do.</p>]]></content><author><name></name></author><category term="website"/><category term="development"/><category term="al-folio"/><category term="website"/><category term="jekyll"/><category term="localization"/><category term="languages"/><summary type="html"><![CDATA[How to create localized CV pages on your al-folio website.]]></summary></entry><entry><title type="html">Turning your al-folio into a dual-language website</title><link href="https://george-gca.github.io/blog/2022/dual-language-al-folio/" rel="alternate" type="text/html" title="Turning your al-folio into a dual-language website"/><published>2022-09-28T11:29:13+00:00</published><updated>2022-09-28T11:29:13+00:00</updated><id>https://george-gca.github.io/blog/2022/dual-language-al-folio</id><content type="html" xml:base="https://george-gca.github.io/blog/2022/dual-language-al-folio/"><![CDATA[<p>This post is part of a series of posts that explain how to set up your own site based on the al-folio theme and add support for a second language:</p> <ul> <li><a href="/blog/2022/running-local-al-folio/">Running locally your own al-folio website</a></li> <li>Turning your al-folio into a dual-language website</li> <li><a href="/blog/2022/localized-cv/">Creating localized CV pages</a></li> <li><a href="/blog/2022/localized-projects/">Creating localized Projects pages</a></li> <li><a href="/blog/2022/localized-blog/">Creating localized blog posts</a></li> </ul> <hr/> <p><a href="https://github.com/alshedivat/al-folio">al-folio</a> is a great theme for Jekyll websites. It is very customizable and easy to use, with support for blogging, repository information, projects, and more (see <a href="https://alshedivat.github.io/al-folio/">demo</a>). However, it does not support multiple languages out of the box. This post will show you how to add support for another language in your al-folio. I’ll add support for <code class="language-plaintext highlighter-rouge">pt-BR</code>, since it is my mother language. I’ll assume you have already <a href="/blog/2022/running-local-al-folio/">cloned your copy of the al-folio repository and have it running locally</a>.</p> <h2 id="installing-dependencies">Installing dependencies</h2> <p>We will do this with the help of the <a href="https://github.com/kurtsson/jekyll-multiple-languages-plugin">Jekyll Multiple Languages Plugin</a>. It adds i18n support for Jekyll. To install it, add the following line to your <code class="language-plaintext highlighter-rouge">Gemfile</code> under the <code class="language-plaintext highlighter-rouge">group :jekyll_plugins do</code>:</p> <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="s1">'jekyll-multiple-languages-plugin'</span>
</code></pre></div></div> <p>Also, add the following line to your <code class="language-plaintext highlighter-rouge">_config.yml</code> under <code class="language-plaintext highlighter-rouge">plugins:</code>:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="s">jekyll-multiple-languages-plugin</span>
</code></pre></div></div> <p>and the following lines after it (outside <code class="language-plaintext highlighter-rouge">plugins</code>), for example, before the <code class="language-plaintext highlighter-rouge">Jekyll Minifier</code> section:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># multi language settings</span>
<span class="na">languages</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">en"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">pt-br"</span><span class="pi">]</span>
<span class="na">default_locale_in_subfolder</span><span class="pi">:</span> <span class="kc">false</span>
</code></pre></div></div> <p>Setting <code class="language-plaintext highlighter-rouge">default_locale_in_subfolder</code> to <code class="language-plaintext highlighter-rouge">false</code> will make your main language be the root of your website, instead of being in a subfolder. For example, instead of <code class="language-plaintext highlighter-rouge">https://george-gca.github.io/en/</code>, it will be <code class="language-plaintext highlighter-rouge">https://george-gca.github.io/</code>. This is the default behavior of al-folio, so we will keep it. The first language in the list will be the default language, English in this case. Then, run <code class="language-plaintext highlighter-rouge">bundle install</code> to install the plugin.</p> <h2 id="creating-translation-files">Creating translation files</h2> <p>Create a folder called <code class="language-plaintext highlighter-rouge">_i18n</code> and add sub-folders for each language, using the same names used on the <code class="language-plaintext highlighter-rouge">languages</code> setting on the <code class="language-plaintext highlighter-rouge">_config.yml</code> we just added. Also, create a <code class="language-plaintext highlighter-rouge">yml</code> file for each language. For example, for <code class="language-plaintext highlighter-rouge">pt-br</code>, create a folder called <code class="language-plaintext highlighter-rouge">_i18n/pt-br</code>. Then, create a file called <code class="language-plaintext highlighter-rouge">_i18n/pt-br.yml</code>. Our directory structure should look like this:</p> <ul> <li>_i18n/en.yml</li> <li>_i18n/pt-br.yml</li> <li>_i18n/en/</li> <li>_i18n/pt-br/</li> </ul> <h2 id="adding-language-toggle">Adding language toggle</h2> <p>Now, we need to add a language toggle to our website. We will add it to the navigation bar. Open the file <code class="language-plaintext highlighter-rouge">_includes/header.html</code> and add the following code before the <code class="language-plaintext highlighter-rouge">Toogle theme mode</code> area:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- Toogle language --&gt;</span>
<span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"nav-item active"</span><span class="nt">&gt;</span>
  {% if site.lang == "en" %}
  <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"nav-link"</span> <span class="na">href=</span><span class="s">"{{site.baseurl_root}}/pt-br{{page.url}}"</span><span class="nt">&gt;</span> PT-BR <span class="nt">&lt;/a&gt;</span>
  {% elsif site.lang == "pt-br" %}
  <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"nav-link"</span> <span class="na">href=</span><span class="s">"{{site.baseurl_root}}{{page.url}}"</span><span class="nt">&gt;</span> EN <span class="nt">&lt;/a&gt;</span>
  {% endif %}
<span class="nt">&lt;/li&gt;</span>
</code></pre></div></div> <p>This will add a link to the other language. The <code class="language-plaintext highlighter-rouge">page.url</code> will keep the current page, so the user will not be redirected to the home page. Note that <code class="language-plaintext highlighter-rouge">site.baseurl_root</code> is a variable introduced by the Jekyll Multiple Languages Plugin, and it points to the root of the page without the language path. More information about the newly added variables can be found <a href="https://github.com/kurtsson/jekyll-multiple-languages-plugin#55-link-between-languages">here</a>.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2022-09-28-dual-language-al-folio/header_en-480.webp 480w,/assets/img/blog/2022-09-28-dual-language-al-folio/header_en-800.webp 800w,/assets/img/blog/2022-09-28-dual-language-al-folio/header_en-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog/2022-09-28-dual-language-al-folio/header_en.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Header with language toggle. </div> <h2 id="adding-translated-titles">Adding translated titles</h2> <p>Until now, we added everything we needed to support the translation, but haven’t done the translation per se. We will start that now. Open the file <code class="language-plaintext highlighter-rouge">_i18n/en.yml</code> and add the following lines:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">titles</span><span class="pi">:</span>
  <span class="na">about</span><span class="pi">:</span> <span class="s">about</span>
  <span class="na">blog</span><span class="pi">:</span> <span class="s">blog</span>
  <span class="na">cv</span><span class="pi">:</span> <span class="s">cv</span>
  <span class="na">news</span><span class="pi">:</span> <span class="s">news</span>
  <span class="na">projects</span><span class="pi">:</span> <span class="s">projects</span>
  <span class="na">publications</span><span class="pi">:</span> <span class="s">publications</span>
  <span class="na">repositories</span><span class="pi">:</span> <span class="s">repositories</span>
  <span class="na">teaching</span><span class="pi">:</span> <span class="s">teaching</span>
  <span class="na">submenus</span><span class="pi">:</span> <span class="s">submenus</span>
  <span class="na">unk</span><span class="pi">:</span> <span class="s">page not found</span>
</code></pre></div></div> <p>This will add the titles for the pages. Now, open the file <code class="language-plaintext highlighter-rouge">_i18n/pt-br.yml</code> and add the following lines:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">titles</span><span class="pi">:</span>
  <span class="na">about</span><span class="pi">:</span> <span class="s">sobre</span>
  <span class="na">blog</span><span class="pi">:</span> <span class="s">blog</span>
  <span class="na">cv</span><span class="pi">:</span> <span class="s">cv</span>
  <span class="na">news</span><span class="pi">:</span> <span class="s">novidades</span>
  <span class="na">projects</span><span class="pi">:</span> <span class="s">projetos</span>
  <span class="na">publications</span><span class="pi">:</span> <span class="s">publicações</span>
  <span class="na">repositories</span><span class="pi">:</span> <span class="s">repositórios</span>
  <span class="na">teaching</span><span class="pi">:</span> <span class="s">ensino</span>
  <span class="na">submenus</span><span class="pi">:</span> <span class="s">submenus</span>
  <span class="na">unk</span><span class="pi">:</span> <span class="s">página não encontrada</span>
</code></pre></div></div> <p>This will add the titles for the pages in Portuguese. Now that we have the translated titles, we have to tell the pages to use these instead of the hardcoded ones. To do so, open all the pages under the <code class="language-plaintext highlighter-rouge">_pages</code> folder and change their title to use the correct <code class="language-plaintext highlighter-rouge">titles</code> variable. For example, the new title for the <code class="language-plaintext highlighter-rouge">about.md</code> page should look like this:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">title</span><span class="pi">:</span> <span class="s">titles.about</span>
</code></pre></div></div> <p>If you run your website now, you’ll see that the titles are shown as <code class="language-plaintext highlighter-rouge">titles.about</code> instead of just <code class="language-plaintext highlighter-rouge">about</code> as it was supposed to, since its default is in English. We still need to tell the html templates to select the correct translated version of these variables. To do so, open the file <code class="language-plaintext highlighter-rouge">_includes/header.html</code> and change all the <code class="language-plaintext highlighter-rouge">title</code> variables to use the <a href="https://github.com/kurtsson/jekyll-multiple-languages-plugin#51-translating-strings">t function</a>. The <code class="language-plaintext highlighter-rouge">t</code> function, or its longer version <code class="language-plaintext highlighter-rouge">translate</code>, will ensure that it will select the correct version from the current language yml file. More specifically, do the following changes:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- &lt;a class="nav-link" href="{{ '/' | relative_url }}"&gt;{{ about_title }} --&gt;</span>
<span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"nav-link"</span> <span class="na">href=</span><span class="s">"{{ '/' | relative_url }}"</span>
  <span class="nt">&gt;</span>{% t about_title %}

  <span class="c">&lt;!-- &lt;a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"&gt;{{ p.title }} --&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"nav-link dropdown-toggle"</span> <span class="na">href=</span><span class="s">"#"</span> <span class="na">id=</span><span class="s">"navbarDropdown"</span> <span class="na">role=</span><span class="s">"button"</span> <span class="na">data-toggle=</span><span class="s">"dropdown"</span> <span class="na">aria-haspopup=</span><span class="s">"true"</span> <span class="na">aria-expanded=</span><span class="s">"false"</span>
    <span class="nt">&gt;</span>{% t p.title %}

    <span class="c">&lt;!-- &lt;a class="dropdown-item" href="{{ child.permalink | relative_url }}"&gt;{{ child.title }}&lt;/a&gt; --&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"dropdown-item"</span> <span class="na">href=</span><span class="s">"{{ child.permalink | relative_url }}"</span><span class="nt">&gt;</span>{% t child.title %}<span class="nt">&lt;/a&gt;</span>

    <span class="c">&lt;!-- &lt;a class="nav-link" href="{{ p.url | relative_url }}"&gt;{{ p.title }} --&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"nav-link"</span> <span class="na">href=</span><span class="s">"{{ p.url | relative_url }}"</span><span class="nt">&gt;</span>{% t p.title %}<span class="nt">&lt;/a&gt;&lt;/a</span>
  <span class="nt">&gt;&lt;/a</span>
<span class="nt">&gt;</span>
</code></pre></div></div> <p>Now run your website again and you’ll see that the titles have the correct values. You can even change the language on the toggle and see that the titles change accordingly.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2022-09-28-dual-language-al-folio/header_pt-br-480.webp 480w,/assets/img/blog/2022-09-28-dual-language-al-folio/header_pt-br-800.webp 800w,/assets/img/blog/2022-09-28-dual-language-al-folio/header_pt-br-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog/2022-09-28-dual-language-al-folio/header_pt-br.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Header in Portuguese. </div> <h2 id="fixing-translated-navigation">Fixing translated navigation</h2> <p>Everything seems to work fine, except not. If you click in the <code class="language-plaintext highlighter-rouge">PT-BR</code> toggle in the header, then click in another page (e.g. repositories), it will change again the titles to English. To handle this kind of situation, we have to make sure that when the user clicks the header links, it will keep the language. Lets do this first for the <code class="language-plaintext highlighter-rouge">about</code> page. To do so, open the file <code class="language-plaintext highlighter-rouge">_includes/header.html</code> and change the link to the <code class="language-plaintext highlighter-rouge">about</code> page to use the <code class="language-plaintext highlighter-rouge">site.baseurl</code> variable instead of the <code class="language-plaintext highlighter-rouge">relative_url</code>. More specifically, do the following changes:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- &lt;a class="nav-link" href="{{ '/' | relative_url }}"&gt;{% t about_title %} --&gt;</span>
<span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"nav-link"</span> <span class="na">href=</span><span class="s">"{{ '/' | prepend: site.baseurl}}"</span><span class="nt">&gt;</span>{% t about_title %}<span class="nt">&lt;/a&gt;</span>
</code></pre></div></div> <p>Now, if you are in another page, for example, the <code class="language-plaintext highlighter-rouge">repositories</code> page, and click in the <code class="language-plaintext highlighter-rouge">PT-BR</code> toggle, then click in the <code class="language-plaintext highlighter-rouge">about</code> page, it will keep the language in the titles. Now, let’s enable this for all the other pages. To do so, open the file <code class="language-plaintext highlighter-rouge">_includes/header.html</code> again and do the following changes:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- &lt;a class="nav-link" href="{{ '/blog/' | relative_url }}"&gt;{{ site.blog_nav_title }} --&gt;</span>
<span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"nav-link"</span> <span class="na">href=</span><span class="s">"{{ '/blog/' | prepend: site.baseurl }}"</span>
  <span class="nt">&gt;</span>{{ site.blog_nav_title }}

  <span class="c">&lt;!-- &lt;a class="dropdown-item" href="{{ child.permalink | relative_url }}"&gt;{% t child.title %}&lt;/a&gt; --&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"dropdown-item"</span> <span class="na">href=</span><span class="s">"{{ child.permalink | prepend: site.baseurl }}"</span><span class="nt">&gt;</span>{% t child.title %}<span class="nt">&lt;/a&gt;</span>

  <span class="c">&lt;!-- &lt;a class="nav-link" href="{{ p.url | relative_url }}"&gt;{% t p.title %} --&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"nav-link"</span> <span class="na">href=</span><span class="s">"{{ p.url | prepend: site.baseurl }}"</span><span class="nt">&gt;</span>{% t p.title %}<span class="nt">&lt;/a&gt;&lt;/a</span>
<span class="nt">&gt;</span>
</code></pre></div></div> <h2 id="adding-translated-titles-inside-the-pages">Adding translated titles inside the pages</h2> <p>Now everything is working fine! The sun is rising, and the world is colorful again :rainbow:. But wait, there is still stuff missing. If you click in the <code class="language-plaintext highlighter-rouge">PT-BR</code> toggle, then click in the <code class="language-plaintext highlighter-rouge">publicações</code> page, you’ll see that the title of the page is still <code class="language-plaintext highlighter-rouge">titles.publications</code>.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2022-09-28-dual-language-al-folio/publications_title_wrong-480.webp 480w,/assets/img/blog/2022-09-28-dual-language-al-folio/publications_title_wrong-800.webp 800w,/assets/img/blog/2022-09-28-dual-language-al-folio/publications_title_wrong-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog/2022-09-28-dual-language-al-folio/publications_title_wrong.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> What should be a translated title. </div> <p>Oh crap, will this ever end someday? :scream: Well, yes, it will. We just need to tell the pages to use the correct translated title. To do so, let’s see which templates do the pages use. The page <code class="language-plaintext highlighter-rouge">publications</code> for example, which is located in file <code class="language-plaintext highlighter-rouge">_pages/publications.md</code>, uses the template <code class="language-plaintext highlighter-rouge">page</code>, as can be seen by the following line in the beginning of the file:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">layout</span><span class="pi">:</span> <span class="s">page</span>
</code></pre></div></div> <p>So, lets open the file <code class="language-plaintext highlighter-rouge">_layouts/page.html</code> and change the title to use the <code class="language-plaintext highlighter-rouge">t</code> function. More specifically, do the following changes:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- &lt;h1 class="post-title"&gt;{{ page.title }}&lt;/h1&gt; --&gt;</span>
<span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"post-title"</span><span class="nt">&gt;</span>{% t page.title %}<span class="nt">&lt;/h1&gt;</span>
</code></pre></div></div> <p>Now, if you run your website, it will not work. This happens because the <code class="language-plaintext highlighter-rouge">t</code> function is now trying to translate a variable that is not defined. But where? If you do a little search, you’ll notice that the <code class="language-plaintext highlighter-rouge">publications</code> page is not the only one that uses the <code class="language-plaintext highlighter-rouge">layout: page</code>. All pages that use it are:</p> <ul> <li>404.html</li> <li>news.html</li> <li>_pages/dropdown.md</li> <li>_pages/projects.md</li> <li>_pages/publications.md</li> <li>_pages/repositories.md</li> <li>_pages/teaching.md</li> <li>_projects/1_project.md</li> <li>_projects/2_project.md</li> <li>_projects/3_project.md</li> <li>_projects/4_project.md</li> <li>_projects/5_project.md</li> <li>_projects/6_project.md</li> </ul> <p>You need to change the <code class="language-plaintext highlighter-rouge">title</code> for <strong>ALL</strong> these pages. We already did it for the pages inside <code class="language-plaintext highlighter-rouge">_pages/</code>, so let’s do it for the rest. Open the file <code class="language-plaintext highlighter-rouge">404.html</code> and change its <code class="language-plaintext highlighter-rouge">title: "Page not found"</code> to <code class="language-plaintext highlighter-rouge">title: titles.unk</code>, since we already defined <code class="language-plaintext highlighter-rouge">titles.unk</code> in both <code class="language-plaintext highlighter-rouge">_i18n/en.yml</code> and <code class="language-plaintext highlighter-rouge">_i18n/pt-br.yml</code>. To keep the projects section more organized, let’s create new attributes for it inside each of the translation files. So, the new <code class="language-plaintext highlighter-rouge">_i18n/en.yml</code> and <code class="language-plaintext highlighter-rouge">_i18n/pt-br.yml</code> will look like this, respectively:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">titles</span><span class="pi">:</span>
  <span class="na">about</span><span class="pi">:</span> <span class="s">about</span>
  <span class="na">blog</span><span class="pi">:</span> <span class="s">blog</span>
  <span class="na">cv</span><span class="pi">:</span> <span class="s">cv</span>
  <span class="na">news</span><span class="pi">:</span> <span class="s">news</span>
  <span class="na">projects</span><span class="pi">:</span> <span class="s">projects</span>
  <span class="na">publications</span><span class="pi">:</span> <span class="s">publications</span>
  <span class="na">repositories</span><span class="pi">:</span> <span class="s">repositories</span>
  <span class="na">teaching</span><span class="pi">:</span> <span class="s">teaching</span>
  <span class="na">submenus</span><span class="pi">:</span> <span class="s">submenus</span>
  <span class="na">unk</span><span class="pi">:</span> <span class="s">page not found</span>
<span class="na">projects</span><span class="pi">:</span>
  <span class="na">titles</span><span class="pi">:</span>
    <span class="na">project1</span><span class="pi">:</span> <span class="s">Project </span><span class="m">1</span>
    <span class="na">project2</span><span class="pi">:</span> <span class="s">Project </span><span class="m">2</span>
    <span class="na">project3</span><span class="pi">:</span> <span class="s">Project </span><span class="m">3</span>
    <span class="na">project4</span><span class="pi">:</span> <span class="s">Project </span><span class="m">4</span>
    <span class="na">project5</span><span class="pi">:</span> <span class="s">Project </span><span class="m">5</span>
    <span class="na">project6</span><span class="pi">:</span> <span class="s">Project </span><span class="m">6</span>
</code></pre></div></div> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">titles</span><span class="pi">:</span>
  <span class="na">about</span><span class="pi">:</span> <span class="s">sobre</span>
  <span class="na">blog</span><span class="pi">:</span> <span class="s">blog</span>
  <span class="na">cv</span><span class="pi">:</span> <span class="s">cv</span>
  <span class="na">news</span><span class="pi">:</span> <span class="s">novidades</span>
  <span class="na">projects</span><span class="pi">:</span> <span class="s">projetos</span>
  <span class="na">publications</span><span class="pi">:</span> <span class="s">publicações</span>
  <span class="na">repositories</span><span class="pi">:</span> <span class="s">repositórios</span>
  <span class="na">teaching</span><span class="pi">:</span> <span class="s">ensino</span>
  <span class="na">submenus</span><span class="pi">:</span> <span class="s">submenus</span>
  <span class="na">unk</span><span class="pi">:</span> <span class="s">página não encontrada</span>
<span class="na">projects</span><span class="pi">:</span>
  <span class="na">titles</span><span class="pi">:</span>
    <span class="na">project1</span><span class="pi">:</span> <span class="s">Projeto </span><span class="m">1</span>
    <span class="na">project2</span><span class="pi">:</span> <span class="s">Projeto </span><span class="m">2</span>
    <span class="na">project3</span><span class="pi">:</span> <span class="s">Projeto </span><span class="m">3</span>
    <span class="na">project4</span><span class="pi">:</span> <span class="s">Projeto </span><span class="m">4</span>
    <span class="na">project5</span><span class="pi">:</span> <span class="s">Projeto </span><span class="m">5</span>
    <span class="na">project6</span><span class="pi">:</span> <span class="s">Projeto </span><span class="m">6</span>
</code></pre></div></div> <p>Now, all we have to do is open all the files inside <code class="language-plaintext highlighter-rouge">_projects/</code> and change its titles. For the file <code class="language-plaintext highlighter-rouge">_projects/1_project.md</code>, for example, will look like this:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">title</span><span class="pi">:</span> <span class="s">projects.titles.project1</span>
</code></pre></div></div> <p>Finally, we can run our website again and it will work as expected. :tada:.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2022-09-28-dual-language-al-folio/publications_title_fixed-480.webp 480w,/assets/img/blog/2022-09-28-dual-language-al-folio/publications_title_fixed-800.webp 800w,/assets/img/blog/2022-09-28-dual-language-al-folio/publications_title_fixed-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog/2022-09-28-dual-language-al-folio/publications_title_fixed.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Now THIS is a translated title. </div> <p>Don’t forget to do the same for the other pages that use different layouts, like <code class="language-plaintext highlighter-rouge">cv</code>. Open the file <code class="language-plaintext highlighter-rouge">_layouts/cv.html</code> and modify:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- &lt;h1 class="post-title"&gt;{{ page.title }} {% if page.cv_pdf %}&lt;a href="{{ page.cv_pdf | prepend: 'assets/pdf/' | relative_url}}" target="_blank" rel="noopener noreferrer" class="float-right"&gt;&lt;i class="fas fa-file-pdf"&gt;&lt;/i&gt;&lt;/a&gt;{% endif %}&lt;/h1&gt; --&gt;</span>
<span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"post-title"</span><span class="nt">&gt;</span>
  {% t page.title %} {% if page.cv_pdf %}<span class="nt">&lt;a</span>
    <span class="na">href=</span><span class="s">"{{ page.cv_pdf | prepend: 'assets/pdf/' | relative_url}}"</span>
    <span class="na">target=</span><span class="s">"_blank"</span>
    <span class="na">rel=</span><span class="s">"noopener noreferrer"</span>
    <span class="na">class=</span><span class="s">"float-right"</span>
    <span class="nt">&gt;&lt;i</span> <span class="na">class=</span><span class="s">"fas fa-file-pdf"</span><span class="nt">&gt;&lt;/i&gt;&lt;/a</span>
  <span class="nt">&gt;</span>{% endif %}
<span class="nt">&lt;/h1&gt;</span>
</code></pre></div></div> <h2 id="adding-translated-content">Adding translated content</h2> <p>Now, let’s see how to add translated content. For example, let’s say that we want to translate the biography in the <code class="language-plaintext highlighter-rouge">about</code> page. The best way to achieve this is to create translated parts of the pages for each language, and then import the correct version. For this, cut the whole biography part of the <code class="language-plaintext highlighter-rouge">about</code> page (<code class="language-plaintext highlighter-rouge">_pages/about.md</code>), leaving only the header. Then, create a new file <code class="language-plaintext highlighter-rouge">_i18n/en/pages/about.md</code> and paste the content there. Do the same for the file <code class="language-plaintext highlighter-rouge">_i18n/pt-br/pages/about.md</code>, but adding the translated version. Now, in the file <code class="language-plaintext highlighter-rouge">_pages/about.md</code>, add the <a href="https://github.com/kurtsson/jekyll-multiple-languages-plugin#52-including-translated-files">translate_file</a> function, pointing to the new about files. The final <code class="language-plaintext highlighter-rouge">_pages/about.md</code> will look like this:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: about
title: titles.about
subtitle: <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">'#'</span><span class="nt">&gt;</span>Affiliations<span class="nt">&lt;/a&gt;</span>. Address. Contacts. Moto. Etc.
permalink: /

profile:
  align: right
  image: prof_pic.jpg
  image_circular: false # crops the image to make it circular
  address: &gt;
    <span class="nt">&lt;p&gt;</span>555 your office number<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;p&gt;</span>123 your address street<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;p&gt;</span>Your City, State 12345<span class="nt">&lt;/p&gt;</span>

news: true # includes a list of news items
selected_papers: true # includes a list of papers marked as "selected={true}"
social: true # includes social icons at the bottom of the page
---

{% translate_file pages/about.md %}
</code></pre></div></div> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2022-09-28-dual-language-al-folio/about_pt-br-480.webp 480w,/assets/img/blog/2022-09-28-dual-language-al-folio/about_pt-br-800.webp 800w,/assets/img/blog/2022-09-28-dual-language-al-folio/about_pt-br-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog/2022-09-28-dual-language-al-folio/about_pt-br.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Biography in Portuguese. </div> <h2 id="fixing-page-title-in-the-browser">Fixing page title in the browser</h2> <p>Currently, when you open a section of your site, in the browser tab the section name is not translated. To solve this, open the file <code class="language-plaintext highlighter-rouge">_includes/metadata.html</code> and change the following code:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">if</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">'/blog/index.html'</span><span class="w"> </span><span class="cp">%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">blog_nav_title</span><span class="w"> </span><span class="cp">}}</span> | <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">elsif</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s1">'blank'</span><span class="w"> </span><span class="ow">and</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s1">'/'</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span> | <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">else</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">endif</span><span class="w"> </span><span class="cp">-%}</span>
</code></pre></div></div> <p>for this code:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">if</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">'/blog/index.html'</span><span class="w"> </span><span class="cp">%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">blog_nav_title</span><span class="w"> </span><span class="cp">}}</span> | <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">elsif</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="ow">contains</span><span class="w"> </span><span class="s1">'/blog/'</span><span class="w"> </span><span class="cp">%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span> | <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">elsif</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="ow">contains</span><span class="w"> </span><span class="s1">'Announcement'</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">elsif</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s1">'blank'</span><span class="w"> </span><span class="ow">and</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s1">'/'</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{%</span><span class="w"> </span><span class="nt">t</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="cp">%}</span> | <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">else</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">endif</span><span class="w"> </span><span class="cp">-%}</span>
</code></pre></div></div> <p>This will trigger another problem, caused by the title of the second news in the about page. We need to add a translated title for this new. Now, do the following changes:</p> <p>File <code class="language-plaintext highlighter-rouge">_news/announcement_2.md</code>:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># title: A long announcement with details</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">news.titles.news2</span>
</code></pre></div></div> <p>File <code class="language-plaintext highlighter-rouge">_i18n/en.yml</code>:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">news</span><span class="pi">:</span>
  <span class="na">titles</span><span class="pi">:</span>
    <span class="na">news2</span><span class="pi">:</span> <span class="s">A long announcement with details</span>
</code></pre></div></div> <p>File <code class="language-plaintext highlighter-rouge">_i18n/pt-br.yml</code>:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">news</span><span class="pi">:</span>
  <span class="na">titles</span><span class="pi">:</span>
    <span class="na">news2</span><span class="pi">:</span> <span class="s">Um anúncio longo com detalhes</span>
</code></pre></div></div> <h2 id="summing-up">Summing up</h2> <p>Adding a translated version of your site is not hard, but it is kind of annoying. Even with the help of this <a href="https://github.com/kurtsson/jekyll-multiple-languages-plugin">great plugin</a>, there are some little details that, if missed, will take a lot of time and patience to master (at least took me). There are a few things that can be done also, like translating the description of the pages and more of their content, but since these can be done based on the same concepts that I showed here, I’ll leave it as a homework :laughing:. I will detail how to create translated versions of your cv and blog in other posts, since this one is already really long. I hope this post was useful to you. If you have any questions, feel free to ask in the comments.</p>]]></content><author><name></name></author><category term="website"/><category term="development"/><category term="al-folio"/><category term="website"/><category term="jekyll"/><category term="localization"/><category term="languages"/><summary type="html"><![CDATA[Adding support for another language in your al-folio.]]></summary></entry><entry><title type="html">Running locally your own al-folio website</title><link href="https://george-gca.github.io/blog/2022/running-local-al-folio/" rel="alternate" type="text/html" title="Running locally your own al-folio website"/><published>2022-09-27T22:13:16+00:00</published><updated>2022-09-27T22:13:16+00:00</updated><id>https://george-gca.github.io/blog/2022/running-local-al-folio</id><content type="html" xml:base="https://george-gca.github.io/blog/2022/running-local-al-folio/"><![CDATA[<p>This post is part of a series of posts that explain how to set up your own site based on the al-folio theme and add support for a second language:</p> <ul> <li>Running locally your own al-folio website</li> <li><a href="/blog/2022/dual-language-al-folio/">Turning your al-folio into a dual-language website</a></li> <li><a href="/blog/2022/localized-cv/">Creating localized CV pages</a></li> <li><a href="/blog/2022/localized-projects/">Creating localized Projects pages</a></li> <li><a href="/blog/2022/localized-blog/">Creating localized blog posts</a></li> </ul> <hr/> <p>I decided to write this post because I had a hard time figuring out how to run my own Jekyll page locally, especially since I don’t regularly use Jekyll. I hope this post will help you to run your own <a href="https://alshedivat.github.io/al-folio/">al-folio</a> website locally, or whatever other Jekyll-based theme you have.</p> <h2 id="installing-ruby-and-rbenv">Installing Ruby and rbenv</h2> <p>I ran my code in a native Linux environment (Ubuntu 22.04.1 LTS), but I tested it in a <a href="https://learn.microsoft.com/en-us/windows/wsl/install">WSL environment</a> as well. First things first: you need to install Ruby language support. The <a href="https://github.com/alshedivat/al-folio#local-setup-standard">recommended way</a> by the al-folio creators is using <a href="https://github.com/rbenv/rbenv">rbenv</a>. For those familiar with Python, <code class="language-plaintext highlighter-rouge">rbenv</code> is similar to <code class="language-plaintext highlighter-rouge">pyenv</code>. To install <code class="language-plaintext highlighter-rouge">rbenv</code>, run the following commands:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/rbenv/rbenv.git ~/.rbenv
<span class="nb">cd</span> ~/.rbenv <span class="o">&amp;&amp;</span> src/configure <span class="o">&amp;&amp;</span> make <span class="nt">-C</span> src
</code></pre></div></div> <p>This will download the <code class="language-plaintext highlighter-rouge">rbenv</code> repository to your home directory, and then compile it. <strong>DON’T</strong> install it via <code class="language-plaintext highlighter-rouge">apt</code>, since it will download an older version of the package, and will not allow you to install the latest Ruby versions. Next, add the following lines to your <code class="language-plaintext highlighter-rouge">~/.bashrc</code> file:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># enable rbenv</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-d</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.rbenv/"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.rbenv/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
    <span class="nb">eval</span> <span class="s2">"</span><span class="si">$(</span>rbenv init - bash<span class="si">)</span><span class="s2">"</span>
<span class="k">fi</span>
</code></pre></div></div> <p>Then, restart your terminal or run <code class="language-plaintext highlighter-rouge">. ~/.bashrc</code> to reload your bash settings. This will make the <code class="language-plaintext highlighter-rouge">rbenv</code> command available in your terminal. To test if this is working properly, run <code class="language-plaintext highlighter-rouge">curl -fsSL https://github.com/rbenv/rbenv-installer/raw/main/bin/rbenv-doctor | bash</code>. It should output something similar to this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Checking for `rbenv' in PATH: /home/gca/.rbenv/bin/rbenv
Checking for rbenv shims in PATH: Not found
Checking `rbenv install' support: /home/gca/.rbenv/plugins/ruby-build/bin/rbenv-install (ruby-build 20220910.1-10-gecb9d22)
Counting installed Ruby versions: 1 versions
Auditing installed plugins: OK
</code></pre></div></div> <p>It will display an error in line <code class="language-plaintext highlighter-rouge">Checking for rbenv shims in PATH</code>. Don’t worry, this will be fixed. Next, you need to install <a href="https://github.com/rbenv/ruby-build">ruby-build</a> as a <code class="language-plaintext highlighter-rouge">rbenv</code> plugin, so you can easily download and install different versions of Ruby. To do so, run the following commands:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="si">$(</span>rbenv root<span class="si">)</span><span class="s2">"</span>/plugins
git clone https://github.com/rbenv/ruby-build.git <span class="s2">"</span><span class="si">$(</span>rbenv root<span class="si">)</span><span class="s2">"</span>/plugins/ruby-build
</code></pre></div></div> <p>To check which versions of Ruby are available to install, simply run <code class="language-plaintext highlighter-rouge">rbenv install --list</code>. You can install any version you want, but I recommend installing the latest stable version. At the time of writing, it is version 3.1.2. To install it, you need first to install the ssl dependency and then the Ruby version.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> libssl-dev
rbenv <span class="nb">install </span>3.1.2
</code></pre></div></div> <h2 id="installing-al-folio-dependencies">Installing al-folio dependencies</h2> <p>Now that you have Ruby installed, you can install al-folio dependencies. First, clone the al-folio repository to your local machine. Then, enter the repository directory and create a local Ruby environment with the installed Ruby version. Next, install the <code class="language-plaintext highlighter-rouge">bundle</code> package, so it will take care of installing the rest of the dependencies. To do all of this, run the following commands:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone ~/git@github.com:alshedivat/al-folio.git
<span class="nb">cd</span> ~/al-folio
rbenv <span class="nb">local </span>3.1.2
gem <span class="nb">install </span>bundle
bundle <span class="nb">install</span>
</code></pre></div></div> <p>Since al-folio supports <code class="language-plaintext highlighter-rouge">jupyter</code> notebooks, we also need to install it. If you are not planning to use notebooks that much, you can install it via <a href="https://github.com/pypa/pipx">pipx</a>. To install both <code class="language-plaintext highlighter-rouge">pipx</code> and <code class="language-plaintext highlighter-rouge">jupyter</code>, run the following commands:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># this can also be done via apt with `sudo apt install -y pipx`</span>
python3 <span class="nt">-m</span> pip <span class="nb">install</span> <span class="nt">--user</span> pipx
pipx <span class="nb">install </span>jupyter
</code></pre></div></div> <h2 id="running-al-folio-locally">Running al-folio locally</h2> <p>From now on, you can run the site locally. All you need to do is to open the al-folio directory and call Jekyll:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">exec </span>jekyll serve <span class="nt">--lsi</span>
</code></pre></div></div> <p>Happy coding!</p>]]></content><author><name></name></author><category term="website"/><category term="development"/><category term="al-folio"/><category term="website"/><category term="jekyll"/><category term="local"/><summary type="html"><![CDATA[Step by step on how to run your own al-folio locally.]]></summary></entry></feed>