<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://george-gca.github.io/pt-br/feed.xml" rel="self" type="application/atom+xml"/><link href="https://george-gca.github.io/pt-br/" rel="alternate" type="text/html"/><updated>2025-04-26T18:06:57+00:00</updated><id>https://george-gca.github.io/feed.xml</id><title type="html">blank</title><entry><title type="html">Analizando o histórico do CVPR</title><link href="https://george-gca.github.io/pt-br/blog/2025/cvpr-history-analysis/" rel="alternate" type="text/html" title="Analizando o histórico do CVPR"/><published>2025-04-25T16:43:13+00:00</published><updated>2025-04-25T16:43:13+00:00</updated><id>https://george-gca.github.io/blog/2025/cvpr-history-analysis</id><content type="html" xml:base="https://george-gca.github.io/blog/2025/cvpr-history-analysis/"><![CDATA[<p>Enquanto a <a href="https://cvpr.thecvf.com/">IEEE/CVF Conference on Computer Vision and Pattern Recognition</a> (CVPR) 2025 se aproxima, vamos dar uma olhada no histórico da conferência e de seus workshops de 2017 a 2024. O objetivo desta análise é proporcionar uma compreensão sobre a evolução dos tópicos e tendências na pesquisa de inteligência artificial ao longo dos anos. Tenha em mente que essas informações devem ser analisadas com cautela, pois alguns dados que poderiam ser relevantes para as análises são descartados durante o processo de limpeza. Parte da análise baseia-se em palavras-chave, e fazemos algumas suposições sobre como os autores as utilizam (por exemplo, é bastante improvável que um artigo sobre dados de imagem tenha a palavra-chave <code class="language-plaintext highlighter-rouge">audio</code> em seu título ou resumo), mas essa não é uma solução perfeita. O objetivo desta postagem é fornecer uma visão sobre a história da conferência, e não uma análise definitiva.</p> <p>Observe que alguns dos gráficos utilizam percentis do número total de artigos publicados a cada ano. Como há quantidades diferentes de artigos publicados a cada ano, os números não podem ser comparados diretamente de um ano para o outro. O objetivo desses gráficos é mostrar a distribuição dos artigos publicados durante o período e quaisquer mudanças no foco da comunidade acadêmica. Você também pode interagir com as visualizações. É possível dar zoom em partes específicas, habilitar ou desabilitar linhas clicando em seus nomes na legenda, e passar o mouse sobre os pontos para ver mais informações.</p> <h2 id="estatísticas-gerais">Estatísticas Gerais</h2> <p>Aqui você pode ver o número de artigos publicados. A cada ano, há mais e mais artigos publicados em comparação com o ano anterior, exceto em 2023. Foram publicados mais de três vezes mais artigos em 2024 do que em 2017.</p> <pre><code class="language-plotly">{"data": [{"hovertemplate": "ano=%{x}&lt;br&gt;artigos=%{y}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "", "orientation": "v", "showlegend": false, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "i2", "bdata": "KAQuBVQHwQd+CEgKNgmgDQ=="}, "yaxis": "y", "type": "scatter"}], "layout": {"xaxis": {"anchor": "y", "domain": [0.0, 1.0], "title": {"text": "ano"}}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "title": {"text": "artigos"}}, "legend": {"tracegroupgap": 0}}}
</code></pre> <p>Em relação às modalidades utilizadas nos artigos, podemos ver que a modalidade de imagem continua sendo a mais comum, mas o uso de texto e de múltiplas modalidades aumentou significativamente. A aplicação de fluxo óptico, grafos e informações de profundidade diminuiu nos últimos anos, enquanto o uso de partículas permaneceu relativamente estável.</p> <pre><code class="language-plotly">{"data": [{"customdata": [["audio"], ["audio"], ["audio"], ["audio"], ["audio"], ["audio"], ["audio"], ["audio"]], "hovertemplate": "modalidade=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "audio", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "audio", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "2FBeQ3kN5T8dk/Uck/XsP30vhdy8DuE/g0lGn20u6D/N5tSIhffrP/WdjfrORvU/WASE4EIk+z+P78JB9PgAQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["depth"], ["depth"], ["depth"], ["depth"], ["depth"], ["depth"], ["depth"], ["depth"]], "hovertemplate": "modalidade=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "depth", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "depth", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "zB4we8DsE0Ak1egj1egTQER0/3wvhRhAQj1lr7AmFEDHDwNNB98TQMTkCmJyBRFAzGK7c/F4EUDBpv1kCWwPQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["graph"], ["graph"], ["graph"], ["graph"], ["graph"], ["graph"], ["graph"], ["graph"]], "hovertemplate": "modalidade=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "graph", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "graph", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "HX1z9M3RC0A+eSo+eSoOQHumE2xSRRFAg0lGn20uGEDucuibFmAQQL+zUd/ZqAtALkSykbMfCkCWwKb9ZAkDQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["image"], ["image"], ["image"], ["image"], ["image"], ["image"], ["image"], ["image"]], "hovertemplate": "modalidade=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "image", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "image", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "eQ3lNZQXQkBUyixUyixCQAEGofVGhkBAMA4SdHz7PkB3eggk2Ro8QPeySqCiNz1AeiSI92T9O0B8Fw6ixydAQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["mesh"], ["mesh"], ["mesh"], ["mesh"], ["mesh"], ["mesh"], ["mesh"], ["mesh"]], "hovertemplate": "modalidade=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "mesh", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "mesh", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YP6D/bxovaxovqP0kPVM5u4fc/kOUMnMb8+D9dS0BRmUsBQCZXEJMriPk/XoOZB+cIBUCUJbBpP1kCQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["multi modal"], ["multi modal"], ["multi modal"], ["multi modal"], ["multi modal"], ["multi modal"], ["multi modal"], ["multi modal"]], "hovertemplate": "modalidade=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "multi modal", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "multi modal", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "FbFUxFIRC0A1SIM0SIMEQFJF/XDtmQZAw1Unjyo2DEDlDfuqVnANQCdeT8ocAxhA1CNBvCfrF0DtJ0tg034jQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["optical flow"], ["optical flow"], ["optical flow"], ["optical flow"], ["optical flow"], ["optical flow"], ["optical flow"], ["optical flow"]], "hovertemplate": "modalidade=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "optical flow", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "optical flow", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "yLgg44KMA0A+eSo+eSr+Pw7LXP52jv8/98VBgo5v/z+EcWIiEo33P1osjwhNtfc/JoMsSX2t8z8Vc6szUjHvPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["particle"], ["particle"], ["particle"], ["particle"], ["particle"], ["particle"], ["particle"], ["particle"]], "hovertemplate": "modalidade=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "particle", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "particle", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YPyD8TYk4TYk6zPy5/O8fHSrs/AjGEv/Me0D8j1cmZzanRPylzDHDwc9M/mwIc7fRIwD84iB7fhYPQPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["path"], ["path"], ["path"], ["path"], ["path"], ["path"], ["path"], ["path"]], "hovertemplate": "modalidade=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "path", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "path", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "NOHPhD8T7j+Y+iGY+iH4P4RTS55mNABAg0lGn20u+D+cmIhE4wX5P1osjwhNtfc/QgNjKDJb9D9GKuZWZ6T0Pw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["point cloud"], ["point cloud"], ["point cloud"], ["point cloud"], ["point cloud"], ["point cloud"], ["point cloud"], ["point cloud"]], "hovertemplate": "modalidade=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "point cloud", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "point cloud", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "FbFUxFIR6z8D77MC77MCQFlpwzKXvwVAw1Unjyo2DED9NCHNJ+kOQCVQ0Vs6DQtAA2MoMlvUEkCpmFudkYoIQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["text"], ["text"], ["text"], ["text"], ["text"], ["text"], ["text"], ["text"]], "hovertemplate": "modalidade=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "text", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "text", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YPGEB3FO12FO0WQD/ZqivwKBlAU4Bd658oFUBUIxbeb5sUQChljgEOfhZAQgNjKDJbFEAJbNpPlsAbQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["video"], ["video"], ["video"], ["video"], ["video"], ["video"], ["video"], ["video"]], "hovertemplate": "modalidade=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "video", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "video", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "NpTXUF5DLkCE5g2E5g0sQMnTjAYkxidAjT7bXDDJKEDsq1rBdfQqQL+zUd/ZqCtANeR/ySBLKkDYtJ8sgc0pQA=="}, "yaxis": "y", "type": "scatter"}], "layout": {"legend": {"title": {"text": "modalidade"}, "tracegroupgap": 0}, "xaxis": {"anchor": "y", "domain": [0.0, 1.0], "title": {"text": "ano"}}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "title": {"text": "ocorrências (%)"}}}}
</code></pre> <p>É bastante comum que os artigos introduzam novos conceitos, seja um novo método, um novo conjunto de dados ou uma nova arquitetura. O gráfico a seguir mostra os conceitos mais comuns apresentados nos artigos. Não é surpreendente que algoritmos sejam o conceito mais frequente. Algoritmos também envolvem novos métodos ou abordagens. Novas tarefas foram introduzidas ao longo dos anos, o que está altamente correlacionado com a criação de novos conjuntos de dados. A introdução de novas arquiteturas também aumentou no último ano, incluindo novos modelos, módulos e redes. A criação de diferentes funções de perda e métricas tem se mantido bastante estável ao longo dos anos, com pouquíssimos artigos introduzindo novidades.</p> <pre><code class="language-plotly">{"data": [{"customdata": [["algorithms"], ["algorithms"], ["algorithms"], ["algorithms"], ["algorithms"], ["algorithms"], ["algorithms"], ["algorithms"]], "hovertemplate": "conceito=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "algorithms", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "algorithms", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "qYilIpaKAEA+eSo+eSr+P1x7phNsUgVA3Y20iNzS/T9UIxbeb5v0P1osjwhNtfc/GoUB+zTk/z+P78JB9PgQQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["architectures"], ["architectures"], ["architectures"], ["architectures"], ["architectures"], ["architectures"], ["architectures"], ["architectures"]], "hovertemplate": "conceito=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "architectures", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "architectures", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "2FBeQ3kN5T9fX19fX1/vP4RTS55mNPA/0PHti4ME7T+XwbYIZe3wPylzDHDwc/M//gTLG4A27z8H0eO7cBD7Pw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["datasets"], ["datasets"], ["datasets"], ["datasets"], ["datasets"], ["datasets"], ["datasets"], ["datasets"]], "hovertemplate": "conceito=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "datasets", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "datasets", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "5+ibo2+O9j/8rMD7rMD7PyE3r0N0//w/g0lGn20u+D87/O+7niLzP4rXkzLHAP8/44SUPMuI/j9s2k+WwKb/Pw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["losses"], ["losses"], ["losses"], ["losses"], ["losses"], ["losses"], ["losses"], ["losses"]], "hovertemplate": "conceito=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "losses", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "losses", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YPuD8dk/Uck/XcP30vhdy8DtE/aRG5pbuR1j+1v65mtH7aP76sEqjoLc0/WASE4EIkyz9LYNN+sgTGPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["metrics"], ["metrics"], ["metrics"], ["metrics"], ["metrics"], ["metrics"], ["metrics"], ["metrics"]], "hovertemplate": "conceito=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "metrics", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "metrics", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "AAAAAAAAAAATYk4TYk6zPy5/O8fHSqs/nYHTmB/LuT/lDfuqVnDNPwAAAAAAAAAAeQPQ5pu2pT+61RmpmFu9Pw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["tasks"], ["tasks"], ["tasks"], ["tasks"], ["tasks"], ["tasks"], ["tasks"], ["tasks"]], "hovertemplate": "conceito=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "tasks", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "tasks", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YP2D8TYk4TYk7TPxTvIsAgtO4/0PHti4ME7T9sSjwAQRTmP1w6DXcvq/Q/XoOZB+cI9T9GKuZWZ6T0Pw=="}, "yaxis": "y", "type": "scatter"}], "layout": {"xaxis": {"anchor": "y", "domain": [0.0, 1.0], "title": {"text": "ano"}}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "title": {"text": "ocorrências (%)"}}, "legend": {"title": {"text": "conceito"}, "tracegroupgap": 0}}}
</code></pre> <p>Em relação às tarefas comuns nos artigos, podemos observar um grande aumento nas tarefas de geração, especialmente após 2022. Isso pode estar relacionado aos avanços em grandes modelos de linguagem, como <a href="https://openreview.net/forum?id=TG8KACxEON">InstructGPT</a> e <a href="https://openai.com/index/chatgpt/">ChatGPT</a> no final de 2022, e ao lançamento das primeiras coleções de modelos fundamentais de linguagem, como o <a href="https://arxiv.org/abs/2302.13971">LLaMA</a> no início de 2023. Classificação, detecção, estimação e reconhecimento têm apresentado uma queda de interesse ao longo dos anos, enquanto previsão só apresentou diminuição recentemente. Tarefas como segmentação permaneceram relativamente estáveis. O uso de tarefas de raciocínio também aumentou significativamente no último ano, mas ainda corresponde a uma pequena porcentagem do total de artigos publicados (cerca de 3%).</p> <pre><code class="language-plotly">{"data": [{"customdata": [["captioning"], ["captioning"], ["captioning"], ["captioning"], ["captioning"], ["captioning"], ["captioning"], ["captioning"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "captioning", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "captioning", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "JUmSJEmS/D/yexnyexnyP3YLvxoT6fE/T9krrAn15D9UIxbeb5vkP76sEqjoLe0/mwIc7fRI8D/5LhxEj+/2Pw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["classification"], ["classification"], ["classification"], ["classification"], ["classification"], ["classification"], ["classification"], ["classification"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "classification", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "classification", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "zB4we8DsI0CmpaWlpaUhQPI0owGJcSJAlEcVG646IUCng+85dnYfQL+zUd/ZqBtAzYNzhLq/F0DMrc5IxVwWQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["clustering"], ["clustering"], ["clustering"], ["clustering"], ["clustering"], ["clustering"], ["clustering"], ["clustering"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "clustering", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "clustering", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "qYilIpaKAED8rMD7rMD7P4RTS55mNABAIrd0N9IiAkDRNy3AMI8AQF1Ii+URoQFA/gTLG4A2/z9VzK3OSMX4Pw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["counting"], ["counting"], ["counting"], ["counting"], ["counting"], ["counting"], ["counting"], ["counting"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "counting", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "counting", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "2FBeQ3kN5T9WLrhVLrjlP1x7phNsUvU/0PHti4ME7T9sSjwAQRTmP44BDn5u4uU/6QOqY29t2D8Vc6szUjHfPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["detection"], ["detection"], ["detection"], ["detection"], ["detection"], ["detection"], ["detection"], ["detection"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "detection", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "detection", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "DDIuyLggKkCIh4eHh4cnQMOvxkR6oChAFWDX+idKKUCJhffbJuUlQNuvLqTF8iZAA2MoMlvUIkB/sgQ27WciQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["estimation"], ["estimation"], ["estimation"], ["estimation"], ["estimation"], ["estimation"], ["estimation"], ["estimation"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "estimation", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "estimation", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "vzn65uibIkA/Uo0+Uo0iQBycWvI0ox1AEnR8++IgIUAfhHFiIhIdQCZXEJMriBlAPIRNAY52GkD7yRLYtJ8XQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["forecasting"], ["forecasting"], ["forecasting"], ["forecasting"], ["forecasting"], ["forecasting"], ["forecasting"], ["forecasting"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "forecasting", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "forecasting", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YP2D8TYk4TYk7TP0kPVM5u4dc/g0lGn20u6D87/O+7niLjP/BzE68nZe4/0wKJq16k4T8Cm/aTJbDpPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["generation"], ["generation"], ["generation"], ["generation"], ["generation"], ["generation"], ["generation"], ["generation"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "generation", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "generation", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "+ubom6NvGECEv3CEv3AgQHumE2xSRSFAzgWTjD7bJEBNhbbHUBcnQPSPD4zsUChAtRpffs7rMECuzkjF3Mo2QA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["identification"], ["identification"], ["identification"], ["identification"], ["identification"], ["identification"], ["identification"], ["identification"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "identification", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "identification", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "wOwBswfMAkAMIFsMIFsMQDWjAYlxcApAQj1lr7AmBEA7/O+7niIDQPKBkR0KW/s/WASE4EIk6z9LYNN+sgT2Pw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["navigation"], ["navigation"], ["navigation"], ["navigation"], ["navigation"], ["navigation"], ["navigation"], ["navigation"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "navigation", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "navigation", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YP6D93FO12FO32P0kPVM5u4fc/trlgktFn6z/HDwNNB9/zPylzDHDwc/M/7oK/ihNS8j+ix3fhIHr2Pw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["prediction"], ["prediction"], ["prediction"], ["prediction"], ["prediction"], ["prediction"], ["prediction"], ["prediction"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "prediction", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "prediction", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "tbrT6k6rIUAdbFgdbFghQOBRwiz2ySRA6+RRxYarJkA7/O+7niIjQEFMriAmVyZA76N3m9yYKEDDQfT4LpwjQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["reasoning"], ["reasoning"], ["reasoning"], ["reasoning"], ["reasoning"], ["reasoning"], ["reasoning"], ["reasoning"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "reasoning", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "reasoning", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "2FBeQ3kNBUAk1egj1egDQFJF/XDtmQZAfPviIEHHB0DWDv/7rqcIQMPWjPOPDwRAJoMsSX2tA0AJbNpPlsALQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["recognition"], ["recognition"], ["recognition"], ["recognition"], ["recognition"], ["recognition"], ["recognition"], ["recognition"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "recognition", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "recognition", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "2FBeQ3kNJUCmpaWlpaUhQCbSA5WzWxxAumCS0WebG0D4XU+RqdAWQPSPD4zsUBhAQgNjKDJbFEBlCWzaTxYRQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["regression"], ["regression"], ["regression"], ["regression"], ["regression"], ["regression"], ["regression"], ["regression"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "regression", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "regression", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "LBWxVMRSDUAk1egj1egDQHDn+FhpwwJAKQXYtf6JAkAj1cmZzakBQPakzDHAwQNAQgNjKDJb9D+n/WQJbNr3Pw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["retrieval"], ["retrieval"], ["retrieval"], ["retrieval"], ["retrieval"], ["retrieval"], ["retrieval"], ["retrieval"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "retrieval", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "retrieval", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "DeU1lNdQCkBWLrhVLrgFQFJF/XDtmQZAL1M7NCvxAkAQhXWzekkIQFszzj8+MAZASsTocGjNCkDyXTiIHt8EQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["segmentation"], ["segmentation"], ["segmentation"], ["segmentation"], ["segmentation"], ["segmentation"], ["segmentation"], ["segmentation"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "segmentation", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "segmentation", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "MHvA7AGzHUDRleTQleQgQAOPEmaxTyBAgF3rnygFIECrl4Tzis4dQF5PyhwDHCBAmwIc7fRIIEDPSMXc6swgQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["tracking"], ["tracking"], ["tracking"], ["tracking"], ["tracking"], ["tracking"], ["tracking"], ["tracking"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "tracking", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "tracking", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "0IQ/E/5MFEBJXJdIXJcQQChbdQUeJQxAtrlgktFnC0DucuibFmAQQCVQ0Vs6DQtAQgNjKDJbBEAFNu0nS2AKQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["translation"], ["translation"], ["translation"], ["translation"], ["translation"], ["translation"], ["translation"], ["translation"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "translation", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "translation", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "FbFUxFIR6z8TYk4TYk4DQFJF/XDtmQZAPO8BMYS/A0BUIxbeb5sEQJEWyyNCUwFAlYMGxlBk9j+ZW52RirnzPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["verification"], ["verification"], ["verification"], ["verification"], ["verification"], ["verification"], ["verification"], ["verification"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "verification", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "verification", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "FbFUxFIR6z8dk/Uck/XsPxTvIsAgtO4/g0lGn20u6D+EcWIiEo3XP/SPD4zsUNg/eQPQ5pu21T84iB7fhYPQPw=="}, "yaxis": "y", "type": "scatter"}], "layout": {"xaxis": {"anchor": "y", "domain": [0.0, 1.0], "title": {"text": "ano"}}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "title": {"text": "ocorrências (%)"}}, "legend": {"title": {"text": "tarefa"}, "tracegroupgap": 0}}}
</code></pre> <p>Vamos nos aprofundar um pouco mais nas tarefas.</p> <p>Algoritmos focados em <strong>segurança e privacidade</strong> existem há algum tempo, mas o número de artigos publicados sobre eles aumentou significativamente no último ano. A detecção de spoofing é crucial para aplicações como o reconhecimento de identidade, onde atacantes podem tentar utilizar fotos ou vídeos para se fazer passar por outra pessoa, e parece ter ganhado urgência desde que as tecnologias deepfake se tornaram mais prevalentes.</p> <pre><code class="language-plotly">{"data": [{"customdata": [["adversarial attack"], ["adversarial attack"], ["adversarial attack"], ["adversarial attack"], ["adversarial attack"], ["adversarial attack"], ["adversarial attack"], ["adversarial attack"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "adversarial attack", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "adversarial attack", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YPuD8dk/Uck/XcP1ZX4FHCLPY/D81KvEztAEBUIxbeb5v0P8HIDoWtGfc/BITgQiQb+T/5LhxEj+/2Pw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["anomaly detection"], ["anomaly detection"], ["anomaly detection"], ["anomaly detection"], ["anomaly detection"], ["anomaly detection"], ["anomaly detection"], ["anomaly detection"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "anomaly detection", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "anomaly detection", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YPyD8TYk4TYk7jP3Dn+Fhpw+I/aRG5pbuR5j8j1cmZzanhPylzDHDwc+M/mwIc7fRI4D8Vc6szUjHvPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["disambiguation"], ["disambiguation"], ["disambiguation"], ["disambiguation"], ["disambiguation"], ["disambiguation"], ["disambiguation"], ["disambiguation"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "disambiguation", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "disambiguation", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YPuD8AAAAAAAAAAC5/O8fHSrs/AAAAAAAAAACEcWIiEo2nPylzDHDwc6M/mwIc7fRIwD+UJbBpP1nCPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["face verification"], ["face verification"], ["face verification"], ["face verification"], ["face verification"], ["face verification"], ["face verification"], ["face verification"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "face verification", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "face verification", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YP2D9WLrhVLrjlPy5/O8fHSts/NqGesldYwz+EcWIiEo23P76sEqjoLb0/eQPQ5pu2pT+61RmpmFudPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["fact checking"], ["fact checking"], ["fact checking"], ["fact checking"], ["fact checking"], ["fact checking"], ["fact checking"], ["fact checking"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "fact checking", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "fact checking", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAClzDHDwc6M/AAAAAAAAAAAAAAAAAAAAAA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["forensics"], ["forensics"], ["forensics"], ["forensics"], ["forensics"], ["forensics"], ["forensics"], ["forensics"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "forensics", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "forensics", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "FbFUxFIR6z+Y+iGY+iHYP2OfbNUVeOQ/T9krrAn15D87/O+7niLjP/SPD4zsUNg/WASE4EIkyz8Cm/aTJbDZPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["fraud detection"], ["fraud detection"], ["fraud detection"], ["fraud detection"], ["fraud detection"], ["fraud detection"], ["fraud detection"], ["fraud detection"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "fraud detection", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "fraud detection", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnYHTmB/LqT8AAAAAAAAAAClzDHDwc7M/eQPQ5pu2pT+61RmpmFu9Pw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["privacy"], ["privacy"], ["privacy"], ["privacy"], ["privacy"], ["privacy"], ["privacy"], ["privacy"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "privacy", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "privacy", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YP6D8dk/Uck/XcPxTvIsAgtO4/0PHti4ME7T+XwbYIZe3wP8HIDoWtGfc/IAQXItnI+T+waT9ZApv6Pw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["safety"], ["safety"], ["safety"], ["safety"], ["safety"], ["safety"], ["safety"], ["safety"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "safety", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "safety", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "2FBeQ3kN9T8TYk4TYk7zP3Dn+FhpwwJAaRG5pbuR9j+cmIhE4wX5P11Ii+URoQFAjwTxnqx//D/yXTiIHt8EQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["spamming"], ["spamming"], ["spamming"], ["spamming"], ["spamming"], ["spamming"], ["spamming"], ["spamming"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "spamming", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "spamming", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAClzDHDwc6M/AAAAAAAAAAC61RmpmFudPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["spoofing"], ["spoofing"], ["spoofing"], ["spoofing"], ["spoofing"], ["spoofing"], ["spoofing"], ["spoofing"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "spoofing", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "spoofing", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YPuD8TYk4TYk7TP30vhdy8DuE/nYHTmB/L2T8j1cmZzanBP/SPD4zsUMg/eQPQ5pu2xT84iB7fhYPgPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["spotting"], ["spotting"], ["spotting"], ["spotting"], ["spotting"], ["spotting"], ["spotting"], ["spotting"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "spotting", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "spotting", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YP2D8dk/Uck/XcP2OfbNUVeMQ/0PHti4ME3T8j1cmZzanRP/SPD4zsUMg/eQPQ5pu2xT+UJbBpP1nCPw=="}, "yaxis": "y", "type": "scatter"}], "layout": {"xaxis": {"anchor": "y", "domain": [0.0, 1.0], "title": {"text": "ano"}}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "title": {"text": "ocorrências (%)"}}, "legend": {"title": {"text": "tarefa"}, "tracegroupgap": 0}}}
</code></pre> <p><strong>Interpretabilidade e explicabilidade</strong> ganharam destaque nos últimos anos, com um aumento significativo no número de artigos publicados sobre o tema por volta de 2019, após a criação de algumas conferências e workshops específicos sobre transparência de modelos, interpretabilidade e equidade, como o <a href="https://facctconference.org/">ACM FaccT</a> e o <a href="https://visxai.io/">VISxAI</a>. A explicabilidade é crucial para construir confiança em sistemas de IA e garantir que suas decisões sejam baseadas em raciocínio válido. Uma das áreas que mais recebeu investimentos nos últimos anos é a fundamentação do modelo, ou seja, o processo de relacionar as previsões do modelo a características específicas dos dados de entrada. Isso é particularmente importante em aplicações como classificação de imagens e resposta a perguntas, onde é essencial compreender quais partes de uma entrada (texto, imagem) estão impulsionando as previsões do modelo.</p> <pre><code class="language-plotly">{"data": [{"customdata": [["explainability"], ["explainability"], ["explainability"], ["explainability"], ["explainability"], ["explainability"], ["explainability"], ["explainability"]], "hovertemplate": "termo=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "explainability", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "explainability", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YPuD8TYk4TYk6zPy5/O8fHSts/AjGEv/Me0D8LrqN3/DDgP76sEqjoLd0/CgP2acj/0j+61RmpmFvdPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["grounding"], ["grounding"], ["grounding"], ["grounding"], ["grounding"], ["grounding"], ["grounding"], ["grounding"]], "hovertemplate": "termo=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "grounding", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "grounding", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "uSDjgowL0j9WLrhVLrjlP0kPVM5u4ec/NqGesldY4z+1v65mtH7qP11Ii+URofE/lYMGxlBk9j9ZApv2kyX6Pw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["interpretability"], ["interpretability"], ["interpretability"], ["interpretability"], ["interpretability"], ["interpretability"], ["interpretability"], ["interpretability"]], "hovertemplate": "termo=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "interpretability", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "interpretability", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "uSDjgowL4j+Y+iGY+iHYP3Dn+Fhpw/I/KQXYtf6J8j+XwbYIZe3wPyM7FLZmnO8/t4JSzKn28D9C9PguHETzPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["traceability"], ["traceability"], ["traceability"], ["traceability"], ["traceability"], ["traceability"], ["traceability"], ["traceability"]], "hovertemplate": "termo=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "traceability", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "traceability", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC61RmpmFudPw=="}, "yaxis": "y", "type": "scatter"}], "layout": {"legend": {"title": {"text": "termo"}, "tracegroupgap": 0}, "xaxis": {"anchor": "y", "domain": [0.0, 1.0], "title": {"text": "ano"}}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "title": {"text": "ocorrências (%)"}}}}
</code></pre> <p><strong>Tarefas visuais</strong> como a remoção de ruído em imagens têm recebido muita atenção nos últimos anos, com muitos artigos publicados sobre o tema. Isso pode ser devido à crescente importância da qualidade das imagens em aplicações de visão computacional, ao desenvolvimento de novas técnicas para aprimorar essa qualidade e à maior capacidade dos modelos visuais de lidar com entradas mais robustas. Essa categoria de tarefas também inclui desembaçamento, remoção de névoa, remoção de moiré, remoção de chuva, entre outras. As tarefas de processamento de imagens e de geração de imagens também aumentaram significativamente.</p> <pre><code class="language-plotly">{"data": [{"customdata": [["colorization"], ["colorization"], ["colorization"], ["colorization"], ["colorization"], ["colorization"], ["colorization"], ["colorization"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "colorization", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "colorization", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "NOHPhD8T3j8dk/Uck/XMPy5/O8fHSts/AjGEv/Me0D+EcWIiEo23P/SPD4zsUMg/eQPQ5pu2tT+UJbBpP1nCPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["denoising"], ["denoising"], ["denoising"], ["denoising"], ["denoising"], ["denoising"], ["denoising"], ["denoising"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "denoising", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "denoising", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "5+ibo2+OBkAdk/Uck/UMQB4lzGKfbA1A6il7hTWhDkAHXUtAUZkLQPSPD4zsUAhAPIRNAY52CkB1RirmVucVQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["editing"], ["editing"], ["editing"], ["editing"], ["editing"], ["editing"], ["editing"], ["editing"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "editing", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "editing", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YP6D/bxovaxovqP3Dn+Fhpw+I/Qj1lr7Am9D/HDwNNB9/zP4vlEaGp9vs/zYNzhLq/B0CNVMytzkgQQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["image enhancement"], ["image enhancement"], ["image enhancement"], ["image enhancement"], ["image enhancement"], ["image enhancement"], ["image enhancement"], ["image enhancement"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "image enhancement", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "image enhancement", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "AAAAAAAAAACY+iGY+iHYPy5/O8fHSss/nYHTmB/L2T+1v65mtH7aP/SPD4zsUNg/CgP2acj/0j8Vc6szUjHfPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["image filling"], ["image filling"], ["image filling"], ["image filling"], ["image filling"], ["image filling"], ["image filling"], ["image filling"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "image filling", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "image filling", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "JUmSJEmS/D/8rMD7rMD7P4BBaL2RoQBAnYHTmB/LCUD4XU+RqdAGQMDBz028nghAQgNjKDJbBEC1nyyBTfsLQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["image generation"], ["image generation"], ["image generation"], ["image generation"], ["image generation"], ["image generation"], ["image generation"], ["image generation"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "image generation", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "image generation", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "2FBeQ3kN5T8dk/Uck/X8Py5/O8fHSvs/HGkRuaW7AUALrqN3/DAAQIrXkzLHAP8/lYMGxlBkBkC+CwfR47sOQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["image retrieval"], ["image retrieval"], ["image retrieval"], ["image retrieval"], ["image retrieval"], ["image retrieval"], ["image retrieval"], ["image retrieval"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "image retrieval", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "image retrieval", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "uSDjgowL8j9fX19fX1/vP2OfbNUVePQ/XHXyqGLD9T+XwbYIZe3wP8TkCmJyBeE/IAQXItnI6T+UJbBpP1niPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["image segmentation"], ["image segmentation"], ["image segmentation"], ["image segmentation"], ["image segmentation"], ["image segmentation"], ["image segmentation"], ["image segmentation"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "image segmentation", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "image segmentation", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "NOHPhD8T7j81SIM0SIP0P1x7phNsUvU/trlgktFn6z+cmIhE4wXpP/erC2mxPPI/CgP2acj/8j9VzK3OSMX4Pw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["image to image"], ["image to image"], ["image to image"], ["image to image"], ["image to image"], ["image to image"], ["image to image"], ["image to image"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "image to image", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "image to image", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YP2D93FO12FO32P4RTS55mNABAT9krrAn19D8QhXWzekn4P4vlEaGp9us/CgP2acj/4j+n/WQJbNrnPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["localization"], ["localization"], ["localization"], ["localization"], ["localization"], ["localization"], ["localization"], ["localization"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "localization", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "localization", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "2FBeQ3kNFUAD77MC77MSQChbdQUeJQxAaRG5pbuRBkBxIQ48vywOQL2l03D3sg5ASsTocGjNCkC3OiMVc6sMQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["matching"], ["matching"], ["matching"], ["matching"], ["matching"], ["matching"], ["matching"], ["matching"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "matching", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "matching", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "Cn8m/JnwGUCcm5ubm5sTQHJwasnTjBJASYvILd2NFEDbIpS1w/8WQBCM7FDYmhNAV+PLz3ndFEA/WQKb9pMSQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["odometry"], ["odometry"], ["odometry"], ["odometry"], ["odometry"], ["odometry"], ["odometry"], ["odometry"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "odometry", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "odometry", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YPyD+Y+iGY+iHYP2OfbNUVeNQ/0PHti4ME3T9UIxbeb5vUP/SPD4zsUMg/WASE4EIkyz+UJbBpP1nCPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["quality assessment"], ["quality assessment"], ["quality assessment"], ["quality assessment"], ["quality assessment"], ["quality assessment"], ["quality assessment"], ["quality assessment"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "quality assessment", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "quality assessment", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YPyD8TYk4TYk7TPy5/O8fHSss/nYHTmB/LyT9UIxbeb5vUP44BDn5u4tU/mwIc7fRI0D84iB7fhYPgPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["reconstruction"], ["reconstruction"], ["reconstruction"], ["reconstruction"], ["reconstruction"], ["reconstruction"], ["reconstruction"], ["reconstruction"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "reconstruction", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "reconstruction", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "vYbyGsprEkDv2p/u2p8WQGOfbNUVeBRAgKIUYNf6F0DN5tSIhfcbQI3zjw+M7BhA3XI9f4LlIUCUJbBpP9keQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["removal"], ["removal"], ["removal"], ["removal"], ["removal"], ["removal"], ["removal"], ["removal"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "removal", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "removal", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "uSDjgowL8j9WLrhVLrj1P0kPVM5u4fc/T9krrAn19D/HDwNNB9/zPyM7FLZmnO8/xwReXRbb7T/mVmekYm7xPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["style transfer"], ["style transfer"], ["style transfer"], ["style transfer"], ["style transfer"], ["style transfer"], ["style transfer"], ["style transfer"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "style transfer", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "style transfer", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "uSDjgowL4j9fX19fX1/vPxTvIsAgtO4/HGkRuaW74T/HDwNNB9/zPylzDHDwc+M/xwReXRbb3T/mVmekYm7hPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["super resolution"], ["super resolution"], ["super resolution"], ["super resolution"], ["super resolution"], ["super resolution"], ["super resolution"], ["super resolution"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "super resolution", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "super resolution", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "2FBeQ3kNBUDrOSbrOSYLQEX9cO2ZTghAsGv9E6UAC0C0/HHkSr4QQFkeEZpqvwpAQgNjKDJbBECwaT9ZApsKQA=="}, "yaxis": "y", "type": "scatter"}], "layout": {"xaxis": {"anchor": "y", "domain": [0.0, 1.0], "title": {"text": "ano"}}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "title": {"text": "ocorrências (%)"}}, "legend": {"title": {"text": "tarefa"}, "tracegroupgap": 0}}}
</code></pre> <p><strong>Tarefas de linguagem</strong> também têm observado uma variação no número de artigos publicados ao longo dos últimos anos, especialmente aqueles que se concentram em diálogo e conversação. Ao utilizar uma interface conversacional, os usuários podem interagir com sistemas de IA de forma mais natural e intuitiva, proporcionando melhores experiências e uma comunicação mais eficaz. Isso levou a um aumento nas pesquisas sobre sistemas de diálogo, incluindo chatbots, assistentes virtuais e outros agentes conversacionais. O desenvolvimento de modelos de linguagem em larga escala também desempenhou um papel significativo nessa tendência, pois esses modelos demonstraram capacidades impressionantes de gerar textos semelhantes aos humanos e de compreender o contexto.</p> <pre><code class="language-plotly">{"data": [{"customdata": [["dialog"], ["dialog"], ["dialog"], ["dialog"], ["dialog"], ["dialog"], ["dialog"], ["dialog"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "dialog", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "dialog", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YP2D/RleTQleTgPxTvIsAgtN4/nYHTmB/L2T/lDfuqVnDNPylzDHDwc8M/mwIc7fRIwD+dkYq51RnlPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["language translation"], ["language translation"], ["language translation"], ["language translation"], ["language translation"], ["language translation"], ["language translation"], ["language translation"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "language translation", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "language translation", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "AAAAAAAAAAATYk4TYk6zPwAAAAAAAAAAnYHTmB/LqT+EcWIiEo2nPylzDHDwc7M/eQPQ5pu2pT+61RmpmFudPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["question answering"], ["question answering"], ["question answering"], ["question answering"], ["question answering"], ["question answering"], ["question answering"], ["question answering"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "question answering", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "question answering", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "FbFUxFIR6z8TYk4TYk7zP3Dn+Fhpw+I/nYHTmB/L2T+EcWIiEo3XP/SPD4zsUNg/CgP2acj/4j9C9PguHETjPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["summarization"], ["summarization"], ["summarization"], ["summarization"], ["summarization"], ["summarization"], ["summarization"], ["summarization"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "summarization", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "summarization", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YP6D+Y+iGY+iHYP2OfbNUVeMQ/nYHTmB/LuT+EcWIiEo23PylzDHDwc8M/eQPQ5pu2tT+UJbBpP1nCPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["text generation"], ["text generation"], ["text generation"], ["text generation"], ["text generation"], ["text generation"], ["text generation"], ["text generation"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "text generation", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "text generation", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACEcWIiEo2nPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="}, "yaxis": "y", "type": "scatter"}], "layout": {"legend": {"title": {"text": "tarefa"}, "tracegroupgap": 0}, "xaxis": {"anchor": "y", "domain": [0.0, 1.0], "title": {"text": "ano"}}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "title": {"text": "ocorrências (%)"}}}}
</code></pre> <p><strong>Tarefas multimodais</strong> são uma das tendências atuais na inteligência artificial. Essas tarefas envolvem a combinação de diferentes modalidades, como áudio, texto e imagens, para melhorar o desempenho dos modelos e resolver problemas que exigem uma compreensão mais profunda da intermodalidade do mundo. O número de artigos publicados sobre essas tarefas aumentou significativamente nos últimos anos, com um foco especial em tarefas como alinhamento de imagem-texto, síntese de imagens, síntese de vídeos e resposta a perguntas visuais. Essa tendência provavelmente continuará à medida que os pesquisadores exploram novas maneiras de combinar as diferentes modalidades de forma inovadora e aprimoram o desempenho dos modelos.</p> <pre><code class="language-plotly">{"data": [{"customdata": [["alignment"], ["alignment"], ["alignment"], ["alignment"], ["alignment"], ["alignment"], ["alignment"], ["alignment"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "alignment", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "alignment", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "5+ibo2+OBkAD77MC77MCQGCNifRA5QRAiZepHZqVCEAo6V5T4gEQQHYobM04/xJAV+PLz3ndFECuzkjF3OoZQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["audio synthesis"], ["audio synthesis"], ["audio synthesis"], ["audio synthesis"], ["audio synthesis"], ["audio synthesis"], ["audio synthesis"], ["audio synthesis"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "audio synthesis", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "audio synthesis", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAClzDHDwc7M/eQPQ5pu2tT+61RmpmFudPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["captioning"], ["captioning"], ["captioning"], ["captioning"], ["captioning"], ["captioning"], ["captioning"], ["captioning"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "captioning", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "captioning", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "JUmSJEmS/D/yexnyexnyP3YLvxoT6fE/T9krrAn15D9UIxbeb5vkP76sEqjoLe0/mwIc7fRI8D/5LhxEj+/2Pw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["image synthesis"], ["image synthesis"], ["image synthesis"], ["image synthesis"], ["image synthesis"], ["image synthesis"], ["image synthesis"], ["image synthesis"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "image synthesis", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "image synthesis", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "2FBeQ3kN5T8dk/Uck/X8Py5/O8fHSvs/HGkRuaW7AUALrqN3/DAAQIrXkzLHAP8/lYMGxlBkBkC+CwfR47sOQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["referring expression comprehension"], ["referring expression comprehension"], ["referring expression comprehension"], ["referring expression comprehension"], ["referring expression comprehension"], ["referring expression comprehension"], ["referring expression comprehension"], ["referring expression comprehension"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "referring expression comprehension", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "referring expression comprehension", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YPuD8TYk4TYk7DPy5/O8fHSrs/NqGesldYwz+EcWIiEo23PylzDHDwc6M/CgP2acj/0j+61RmpmFu9Pw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["video question answering"], ["video question answering"], ["video question answering"], ["video question answering"], ["video question answering"], ["video question answering"], ["video question answering"], ["video question answering"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "video question answering", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "video question answering", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "AAAAAAAAAAATYk4TYk6zPy5/O8fHSqs/NqGesldYwz+EcWIiEo3HP/SPD4zsUMg/mwIc7fRI4D9LYNN+sgTWPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["video synthesis"], ["video synthesis"], ["video synthesis"], ["video synthesis"], ["video synthesis"], ["video synthesis"], ["video synthesis"], ["video synthesis"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "video synthesis", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "video synthesis", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "AAAAAAAAAAATYk4TYk7TP0kPVM5u4dc/NqGesldY0z8j1cmZzanRP/SPD4zsUNg/xwReXRbb3T+P78JB9PjwPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["visual grounding"], ["visual grounding"], ["visual grounding"], ["visual grounding"], ["visual grounding"], ["visual grounding"], ["visual grounding"], ["visual grounding"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "visual grounding", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "visual grounding", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YPuD8dk/Uck/XMPy5/O8fHSrs/nYHTmB/LuT8j1cmZzanRPylzDHDwc9M/CgP2acj/0j9eOIge34XbPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["visual question answering"], ["visual question answering"], ["visual question answering"], ["visual question answering"], ["visual question answering"], ["visual question answering"], ["visual question answering"], ["visual question answering"]], "hovertemplate": "tarefa=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "visual question answering", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "visual question answering", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "yLgg44KM8z8+eSo+eSr+P1x7phNsUvU/D81KvEzt8D8LrqN3/DDwP76sEqjoLe0/CgP2acj/8j9QlsCm/WT3Pw=="}, "yaxis": "y", "type": "scatter"}], "layout": {"xaxis": {"anchor": "y", "domain": [0.0, 1.0], "title": {"text": "ano"}}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "title": {"text": "ocorrências (%)"}}, "legend": {"title": {"text": "tarefa"}, "tracegroupgap": 0}}}
</code></pre> <p>Aqui nos concentramos em analisar o uso de algumas palavras-chave nos artigos sobre LLM. Mais especificamente:</p> <ul> <li><strong>Chain-of-Thought</strong>, <strong>Tree-of-Thought</strong> e quaisquer variações de <strong>of-Thought</strong> - técnicas de prompting que auxiliam o modelo a decompor tarefas complexas em etapas menores e mais gerenciáveis, permitindo que o raciocínio seja realizado de forma mais eficaz;</li> <li><strong>Agent</strong> - refere-se ao uso de LLMs como agentes que podem executar tarefas de forma autônoma, frequentemente em conjunto com outras ferramentas ou sistemas;</li> <li><strong>Distillation</strong> - uma técnica utilizada para comprimir modelos grandes em modelos menores e mais eficientes, mantendo seu desempenho;</li> <li><strong>Few-shot prompting</strong> - uma técnica de prompting que fornece ao modelo alguns exemplos da tarefa em questão, permitindo que ele generalize e execute bem tarefas similares;</li> <li><strong>Fine-tuning</strong> - o processo de treinar um modelo pré-treinado em uma tarefa ou conjunto de dados específico para melhorar seu desempenho;</li> <li><strong>Reinforcement Learning (RL)</strong> - um tipo de aprendizagem de máquina onde um agente aprende a tomar decisões recebendo feedback do ambiente na forma de recompensas ou penalidades;</li> <li><strong>Retrieval Augmented Generation (RAG)</strong> - uma técnica que combina métodos baseados em recuperação com modelos generativos para melhorar o desempenho dos modelos de linguagem em tarefas específicas;</li> <li><strong>Self-Instruct</strong> - uma técnica que permite que os modelos aprendam com suas próprias saídas, melhorando seu desempenho ao longo do tempo;</li> <li><strong>Tokenizer</strong> - um componente dos modelos de linguagem que converte o texto em um formato que o modelo possa compreender, frequentemente dividindo-o em unidades menores chamadas tokens;</li> <li><strong>Tool</strong> - refere-se ao uso de ferramentas ou sistemas externos em conjunto com LLMs para executar tarefas de forma mais eficaz;</li> <li><strong>Zero-shot prompting</strong> - uma técnica de prompting que permite ao modelo executar tarefas sem exemplos prévios ou treinamento específico para aquela tarefa.</li> </ul> <p>As técnicas de few-shot e zero-shot prompting perderam o interesse da comunidade acadêmica em favor do RAG, dos processos de pensamento (thought) e de novas técnicas de fine-tuning. O interesse em criar agentes LLM capazes de realizar tarefas mais desafiadoras e utilizar ferramentas é um dos tópicos mais quentes na área.</p> <pre><code class="language-plotly">{"data": [{"customdata": [["* of thought"], ["* of thought"], ["* of thought"], ["* of thought"], ["* of thought"], ["* of thought"], ["* of thought"]], "hovertemplate": "termo=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "* of thought", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "* of thought", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+QH5QfmB+cH6Ac="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfDQhL2wVBEA="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["agent"], ["agent"], ["agent"], ["agent"], ["agent"], ["agent"], ["agent"]], "hovertemplate": "termo=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "agent", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "agent", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+QH5QfmB+cH6Ac="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABbUZmK5zHEA="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["distillation"], ["distillation"], ["distillation"], ["distillation"], ["distillation"], ["distillation"], ["distillation"]], "hovertemplate": "termo=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "distillation", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "distillation", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+QH5QfmB+cH6Ac="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABJQI7jOI7jOBZAus6xRiIgDkA="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["few shot"], ["few shot"], ["few shot"], ["few shot"], ["few shot"], ["few shot"], ["few shot"]], "hovertemplate": "termo=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "few shot", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "few shot", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+QH5QfmB+cH6Ac="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKuqqqqqqjBAMU653d/BJUA="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["finetuning"], ["finetuning"], ["finetuning"], ["finetuning"], ["finetuning"], ["finetuning"], ["finetuning"]], "hovertemplate": "termo=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "finetuning", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "finetuning", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+QH5QfmB+cH6Ac="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAI7jOI7jOCZAus6xRiIgLkA="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["reinforcement learning"], ["reinforcement learning"], ["reinforcement learning"], ["reinforcement learning"], ["reinforcement learning"], ["reinforcement learning"], ["reinforcement learning"]], "hovertemplate": "termo=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "reinforcement learning", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "reinforcement learning", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+QH5QfmB+cH6Ac="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "AAAAAAAASUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKuqqqqqqjBA3P0dXPaGQEA="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["retrieval augmented generation"], ["retrieval augmented generation"], ["retrieval augmented generation"], ["retrieval augmented generation"], ["retrieval augmented generation"], ["retrieval augmented generation"], ["retrieval augmented generation"]], "hovertemplate": "termo=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "retrieval augmented generation", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "retrieval augmented generation", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+QH5QfmB+cH6Ac="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "AAAAAAAAOUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABJQKuqqqqqqkBAayQC4qMJQ0A="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["tokenizer"], ["tokenizer"], ["tokenizer"], ["tokenizer"], ["tokenizer"], ["tokenizer"], ["tokenizer"]], "hovertemplate": "termo=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "tokenizer", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "tokenizer", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+QH5QfmB+cH6Ac="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfDQhL2wV9D8="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["tool"], ["tool"], ["tool"], ["tool"], ["tool"], ["tool"], ["tool"]], "hovertemplate": "termo=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "tool", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "tool", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+QH5QfmB+cH6Ac="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "AAAAAAAAOUAAAAAAAAAAAAAAAAAAAElAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMU653d/BFUA="}, "yaxis": "y", "type": "scatter"}, {"customdata": [["zero shot"], ["zero shot"], ["zero shot"], ["zero shot"], ["zero shot"], ["zero shot"], ["zero shot"]], "hovertemplate": "termo=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "zero shot", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "zero shot", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+QH5QfmB+cH6Ac="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABJQBzHcRzHcUNAoifVVzI/M0A="}, "yaxis": "y", "type": "scatter"}], "layout": {"legend": {"title": {"text": "termo"}, "tracegroupgap": 0}, "xaxis": {"anchor": "y", "domain": [0.0, 1.0], "title": {"text": "ano"}}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "title": {"text": "ocorrências (%)"}}}}
</code></pre> <h2 id="informações-sobre-os-autores">Informações sobre os Autores</h2> <p>Agora, vamos analisar os autores dos artigos. Este primeiro gráfico mostra o número de artigos publicados por cada autor. Como podemos ver, a maioria dos autores publicou apenas um artigo na conferência. De um total de 33.861 autores, somente 1.308 possuem 10 ou mais artigos aceitos.</p> <pre><code class="language-plotly">{"data": [{"hovertemplate": "Número de artigos=%{text}&lt;br&gt;Autores=%{y}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "", "marker": {"pattern": {"shape": ""}}, "name": "", "orientation": "v", "showlegend": false, "text": {"dtype": "f8", "bdata": "AAAAAADAYEAAAAAAAMBdQAAAAAAAAFlAAAAAAACAVUAAAAAAAMBUQAAAAAAAAFRAAAAAAADAU0AAAAAAAMBSQAAAAAAAwFFAAAAAAACAUUAAAAAAAEBRQAAAAAAAgFBAAAAAAABAUEAAAAAAAABQQAAAAAAAgE9AAAAAAAAAT0AAAAAAAIBOQAAAAAAAgE1AAAAAAAAATUAAAAAAAABMQAAAAAAAgEtAAAAAAAAAS0AAAAAAAIBKQAAAAAAAAEpAAAAAAACASUAAAAAAAABJQAAAAAAAgEhAAAAAAAAASEAAAAAAAIBHQAAAAAAAAEdAAAAAAAAARkAAAAAAAIBFQAAAAAAAAEVAAAAAAACAREAAAAAAAABEQAAAAAAAgENAAAAAAAAAQ0AAAAAAAIBCQAAAAAAAAEJAAAAAAACAQUAAAAAAAABBQAAAAAAAgEBAAAAAAAAAQEAAAAAAAAA/QAAAAAAAAD5AAAAAAAAAPUAAAAAAAAA8QAAAAAAAADtAAAAAAAAAOkAAAAAAAAA5QAAAAAAAADhAAAAAAAAAN0AAAAAAAAA2QAAAAAAAADVAAAAAAAAANEAAAAAAAAAzQAAAAAAAADJAAAAAAAAAMUAAAAAAAAAwQAAAAAAAAC5AAAAAAAAALEAAAAAAAAAqQAAAAAAAAChAAAAAAAAAJkAAAAAAAAAkQAAAAAAAACJAAAAAAAAAIEAAAAAAAAAcQAAAAAAAABhAAAAAAAAAFEAAAAAAAAAQQAAAAAAAAAhAAAAAAAAAAEAAAAAAAADwPw=="}, "textposition": "auto", "x": {"dtype": "i2", "bdata": "hgB3AGQAVgBTAFAATwBLAEcARgBFAEIAQQBAAD8APgA9ADsAOgA4ADcANgA1ADQAMwAyADEAMAAvAC4ALAArACoAKQAoACcAJgAlACQAIwAiACEAIAAfAB4AHQAcABsAGgAZABgAFwAWABUAFAATABIAEQAQAA8ADgANAAwACwAKAAkACAAHAAYABQAEAAMAAgABAA=="}, "xaxis": "x", "y": {"dtype": "i2", "bdata": "AQABAAEAAQABAAEAAQABAAEAAQABAAEAAQABAAIAAQABAAEABQAEAAIAAQABAAMAAQACAAIABAABAAIABAAEAAQAAgAHAAgACwAGAAsABAAFAAYAFAALABIACwASABEAEgAVAB4AGAAWACQAIgAyACMALABAAFEAWABrAHsAlgCzAAIBKgGeAUMCSQOXBW8J3RU8UQ=="}, "yaxis": "y", "type": "bar"}], "layout": {"xaxis": {"anchor": "y", "domain": [0.0, 1.0], "title": {"text": "Número de artigos"}}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "title": {"text": "Autores"}}, "legend": {"tracegroupgap": 0}, "barmode": "relative"}}
</code></pre> <p>Aqui estão os 10 autores com mais artigos:</p> <table> <thead> <tr> <th>Autor</th> <th>Artigos</th> </tr> </thead> <tbody> <tr> <td>Luc Van Gool</td> <td>134</td> </tr> <tr> <td>Radu Timofte</td> <td>119</td> </tr> <tr> <td>Lei Zhang</td> <td>100</td> </tr> <tr> <td>Yi Yang</td> <td>86</td> </tr> <tr> <td>Yu Qiao</td> <td>83</td> </tr> <tr> <td>Dacheng Tao</td> <td>80</td> </tr> <tr> <td>Ming-Hsuan Yang</td> <td>79</td> </tr> <tr> <td>Qi Tian</td> <td>75</td> </tr> <tr> <td>Marc Pollefeys</td> <td>71</td> </tr> <tr> <td>Xiaogang Wang</td> <td>70</td> </tr> </tbody> </table> <p>Agora vamos analisar o número de autores por artigo. A maioria dos artigos tem entre 2 e 7 autores, mas há alguns com um número elevado de autores, como <a href="https://openaccess.thecvf.com/content/CVPR2023/html/Eisenmann_Why_Is_the_Winner_the_Best_CVPR_2023_paper.html">Why Is the Winner the Best?</a>, que conta com 125 autores, e <a href="https://openaccess.thecvf.com/content/CVPR2024W/NTIRE/html/Ren_The_Ninth_NTIRE_2024_Efficient_Super-Resolution_Challenge_Report_CVPRW_2024_paper.html">The Ninth NTIRE 2024 Efficient Super-Resolution Challenge Report</a>, com impressionantes 134 autores. O primeiro é um estudo multicêntrico de todas as 80 competições realizadas no âmbito do IEEE ISBI 2021 e MICCAI 2021, enquanto o segundo é um relatório que resume os resultados do desafio NTIRE 2024, uma competição realizada na conferência CVPR.</p> <pre><code class="language-plotly">{"data": [{"hovertemplate": "Número de autores=%{x}&lt;br&gt;Número de artigos=%{text}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "", "marker": {"pattern": {"shape": ""}}, "name": "", "orientation": "v", "showlegend": false, "text": {"dtype": "f8", "bdata": "AAAAAAAgZ0AAAAAAAByWQAAAAAAAoqZAAAAAAAAArEAAAAAAAE6pQAAAAAAA2KJAAAAAAADklkAAAAAAALiIQAAAAAAA0HhAAAAAAADAaUAAAAAAAIBcQAAAAAAAAFBAAAAAAAAAOUAAAAAAAAA3QAAAAAAAACRAAAAAAAAAJkAAAAAAAAAQQAAAAAAAAABAAAAAAAAA8D8AAAAAAAAQQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAQQAAAAAAAAAhAAAAAAAAA8D8AAAAAAAAIQAAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAAAEAAAAAAAAAAQAAAAAAAAPA/AAAAAAAA8D8AAAAAAAAAQAAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAACEAAAAAAAADwPwAAAAAAAPA/AAAAAAAACEAAAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8="}, "textposition": "auto", "x": {"dtype": "i2", "bdata": "AQACAAMABAAFAAYABwAIAAkACgALAAwADQAOAA8AEAARABIAEwAUABUAFgAXABgAGwAcAB8AIQAiACMAJAAlACcAKQAqACsALQAwADEANQA3ADgAOgBCAEMARABOAE8AVQBYAF0AZABlAGwAcQBzAH0AhgA="}, "xaxis": "x", "y": {"dtype": "i2", "bdata": "uQCHBVELAA6nDGwJuQUXA40BzgByAEAAGQAXAAoACwAEAAIAAQAEAAIAAgAEAAMAAQADAAEAAQABAAEAAgACAAEAAQACAAEAAQABAAEAAQABAAEAAwABAAEAAwABAAEAAQABAAEAAQABAAEAAQABAAEAAQA="}, "yaxis": "y", "type": "bar"}], "layout": {"xaxis": {"anchor": "y", "domain": [0.0, 1.0], "title": {"text": "Número de autores"}}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "title": {"text": "Número de artigos"}}, "legend": {"tracegroupgap": 0}, "barmode": "relative"}}
</code></pre> <p>Como a maioria dos artigos tem múltiplos autores, é bastante comum ver alguns autores colaborando constantemente entre si. O par de autores mais comum é Jiwen Lu e Jie Zhou, que colaboraram em 57 artigos juntos. O segundo par mais comum é Luc Van Gool e Radu Timofte, com 43 artigos juntos, seguido por Tao Xiang e Yi-Zhe Song, com 38 artigos. Os 10 pares de autores mais frequentes são:</p> <table> <thead> <tr> <th>Autor 1</th> <th>Autor 2</th> <th>Artigos</th> </tr> </thead> <tbody> <tr> <td>Jiwen Lu</td> <td>Jie Zhou</td> <td>57</td> </tr> <tr> <td>Luc Van Gool</td> <td>Radu Timofte</td> <td>43</td> </tr> <tr> <td>Tao Xiang</td> <td>Yi-Zhe Song</td> <td>38</td> </tr> <tr> <td>Fahad Shahbaz Khan</td> <td>Salman Khan</td> <td>33</td> </tr> <tr> <td>Ting Yao</td> <td>Tao Mei</td> <td>32</td> </tr> <tr> <td>Xiaogang Wang</td> <td>Hongsheng Li</td> <td>28</td> </tr> <tr> <td>Shiguang Shan</td> <td>Xilin Chen</td> <td>27</td> </tr> <tr> <td>Richa Singh</td> <td>Mayank Vatsa</td> <td>26</td> </tr> <tr> <td>Dong Chen</td> <td>Fang Wen</td> <td>24</td> </tr> <tr> <td>Yi-Zhe Song</td> <td>Ayan Kumar Bhunia</td> <td>24</td> </tr> </tbody> </table> <p>Embora seja bastante raro que um artigo tenha um único autor, 185 trabalhos se enquadram nessa categoria. Algumas menções que merecem destaque incluem pesquisas que introduziram funções de perda inovadoras (<a href="https://openaccess.thecvf.com/content_CVPR_2019/html/Barron_A_General_and_Adaptive_Robust_Loss_Function_CVPR_2019_paper.html">Jonathan T. Barron</a>, <a href="https://openaccess.thecvf.com/content/CVPR2023/html/Kobayashi_Two-Way_Multi-Label_Loss_CVPR_2023_paper.html">Takumi Kobayashi</a>) e aprimoramentos em arquiteturas de transformers e técnicas de pós-treinamento (<a href="https://openaccess.thecvf.com/content/CVPR2024/html/Kobayashi_Mean-Shift_Feature_Transformer_CVPR_2024_paper.html">Takumi Kobayashi</a>, <a href="https://openaccess.thecvf.com/content/CVPR2024/html/Ma_Improved_Self-Training_for_Test-Time_Adaptation_CVPR_2024_paper.html">Jing Ma</a>). Nesta tabela, podemos ver os autores com o maior número de artigos nos quais são os únicos autores.</p> <table> <thead> <tr> <th>Autor</th> <th>Artigos</th> </tr> </thead> <tbody> <tr> <td>Takumi Kobayashi</td> <td>4</td> </tr> <tr> <td>Anant Khandelwal, Takuhiro Kaneko</td> <td>3</td> </tr> <tr> <td>Andrey V. Savchenko, Chong Yu, Dimitrios Kollias, Edgar A. Bernal, Jamie Hayes, Magnus Oskarsson, Ming Li, Oleksii Sidorov, Ren Yang, Rowel Atienza, Sanghwa Hong, Satoshi Ikehata, Shunta Maeda, Stamatios Lefkimmiatis, Ying Zhao</td> <td>2</td> </tr> </tbody> </table> <h2 id="identificando-tópicos">Identificando Tópicos</h2> <p>Para esta seção, utilizamos o <a href="https://arxiv.org/abs/2008.09470">Top2Vec</a>, um algoritmo de modelagem automática de tópicos, para identificar grupos de artigos que são semelhantes entre si com base em seus títulos e resumos. A solução identificou 172 tópicos, o que é um número um pouco alto para analisarmos individualmente. Em vez disso, focaremos nos tópicos mais quentes e mais frios, ou seja, aqueles com o maior e o menor número de artigos no último ano, respectivamente.</p> <p>Um problema com o algoritmo é que ele identifica tópicos com base nas palavras utilizadas nos artigos, mas não fornece uma explicação clara sobre o que esses tópicos abordam. Esse é um desafio comum em algoritmos de modelagem de tópicos, que frequentemente produzem resultados difíceis de interpretar. No entanto, podemos utilizar LLMs para nos ajudar a compreender o significado desses tópicos. Usaremos as palavras mais representativas de cada tópico (aquelas que aparecem com maior frequência nos artigos daquele tópico) para gerar um título e um parágrafo que o resuma.</p> <h3 id="-10-tópicos">🔥 10 tópicos</h3> <pre><code class="language-plotly">{"data": [{"customdata": {"dtype": "i1", "bdata": "AQEBAQEBAQE=", "shape": "8, 1"}, "hovertemplate": "tópico=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "1", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "1", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "AAAAAAAAAAATYk4TYk6zPy5/O8fHSrs/nYHTmB/LqT8AAAAAAAAAAClzDHDwc6M/WASE4EIk2z+NVMytzkgQQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": {"dtype": "i1", "bdata": "AgICAgICAgI=", "shape": "8, 1"}, "hovertemplate": "tópico=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "2", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "2", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YP2D9WLrhVLrjlPy5/O8fHSus/T9krrAn19D/gNilv2Ff1P1keEZpqv/o/IAQXItnICUBXZ6RibnUZQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": {"dtype": "i1", "bdata": "AwMDAwMDAwM=", "shape": "8, 1"}, "hovertemplate": "tópico=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "3", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "3", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "yLgg44KMA0DhCH/hCH8BQHodovvnewFAHGkRuaW7AUD4XU+RqdD2PyhljgEOfvY/XoOZB+cI9T/+ZAls2k8IQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": {"dtype": "i1", "bdata": "BAQEBAQEBAQ=", "shape": "8, 1"}, "hovertemplate": "tópico=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "4", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "4", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "AAAAAAAAAAATYk4TYk6zPy5/O8fHSrs/nYHTmB/LqT8AAAAAAAAAAClzDHDwc7M/CgP2acj/0j+rM1Ixtzr5Pw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": {"dtype": "i1", "bdata": "BQUFBQUFBQU=", "shape": "8, 1"}, "hovertemplate": "tópico=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "5", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "5", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "qYilIpaKAEBWLrhVLrgFQFZX4FHCLAZAL1M7NCvxAkCcmIhE4wX5P43zjw+M7Pg/mwIc7fRI4D8MB9Hju3D8Pw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": {"dtype": "i1", "bdata": "BgYGBgYGBgY=", "shape": "8, 1"}, "hovertemplate": "tópico=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "6", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "6", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "NOHPhD8T3j9WLrhVLrjlP0kPVM5u4ec/0PHti4ME3T87/O+7niLjP1keEZpqv9o/eQPQ5pu2tT9VzK3OSMXoPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": {"dtype": "i1", "bdata": "BwcHBwcHBwc=", "shape": "8, 1"}, "hovertemplate": "tópico=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "7", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "7", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YPuD8AAAAAAAAAAAAAAAAAAAAAnYHTmB/LuT+EcWIiEo2nPylzDHDwc8M/0wKJq16k4T+ZW52RirnzPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": {"dtype": "i1", "bdata": "CAgICAgICAg=", "shape": "8, 1"}, "hovertemplate": "tópico=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "8", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "8", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "uSDjgowL4j9WLrhVLrjlPy5/O8fHSqs/NqGesldYwz+EcWIiEo3HPyM7FLZmnN8/AAAAAAAAAADwwkH0+C7kPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": {"dtype": "i1", "bdata": "CQkJCQkJCQk=", "shape": "8, 1"}, "hovertemplate": "tópico=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "9", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "9", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "NOHPhD8T/j9fX19fX1/vP3Dn+Fhpw+I/nYHTmB/L6T8j1cmZzanhP1keEZpqv9o/AAAAAAAAAACUJbBpP1niPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": {"dtype": "i1", "bdata": "CgoKCgoKCgo=", "shape": "8, 1"}, "hovertemplate": "tópico=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "10", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "10", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "uSDjgowL4j/RleTQleTgP2nDMpe/nfM/0PHti4ME3T+1v65mtH7qP/erC2mxPOI/0wKJq16k4T/mVmekYm7xPw=="}, "yaxis": "y", "type": "scatter"}], "layout": {"legend": {"title": {"text": "tópico"}, "tracegroupgap": 0}, "xaxis": {"anchor": "y", "domain": [0.0, 1.0], "title": {"text": "ano"}}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "title": {"text": "ocorrências (%)"}}}}
</code></pre> <p>Os tópicos abaixo estão listados na ordem em que tiveram mais artigos publicados no ano passado.</p> <details> <summary><b>Tópico 1 - Instruction-Tuned Multimodal LLMs for Vision-Language Understanding (157 documents)</b></summary> <figure> <picture> <img src="/assets/img/blog/2025-03-26-cvpr-history-analysis/topic_23.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" alt="Nuvem de palavras para o tópico 1" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> Recent advancements in large language models (LLMs) and multimodal large language models (MLLMs) have led to remarkable capabilities in integrating visual and textual information for tasks like question answering, dialogue, and reasoning. By leveraging instruction tuning and visual prompt techniques, these models — such as vision-language models (VLMs) like CLIP — have significantly improved in-context comprehension and instruction following across modalities. Despite these achievements, challenges like hallucinations and limited applicability in complex, real-world settings still remain. Research continues to focus on enhancing multimodal instruction learning to facilitate deeper, more reliable understanding between vision and language inputs. <br/> <br/> Principais autores: <ol> <li>Yu Qiao (7 artigos)</li> <li>Ying Shan (5 artigos)</li> <li>Yixiao Ge (5 artigos)</li> </ol> Exemplos de artigos: <ul> <li><a href="https://openaccess.thecvf.com/content/CVPR2024W/MMFM/html/Wang_LLM-Seg_Bridging_Image_Segmentation_and_Large_Language_Model_Reasoning_CVPRW_2024_paper.html">LLM-Seg: Bridging Image Segmentation and Large Language Model Reasoning (2024)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2024/html/Guan_HallusionBench_An_Advanced_Diagnostic_Suite_for_Entangled_Language_Hallucination_and_CVPR_2024_paper.html">HallusionBench: An Advanced Diagnostic Suite for Entangled Language Hallucination and Visual Illusion in Large Vision-Language Models (2024)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2024W/CVsports/html/Nonaka_Rugby_Scene_Classification_Enhanced_by_Vision_Language_Model_CVPRW_2024_paper.html">Rugby Scene Classification Enhanced by Vision Language Model (2024)</a></li> </ul> <hr/> </details> <details> <summary><b>Tópico 2 - Controllable Text-Guided Image Editing with Diffusion and GAN Inversion (426 documents)</b></summary> <figure> <picture> <img src="/assets/img/blog/2025-03-26-cvpr-history-analysis/topic_3.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" alt="Nuvem de palavras para o tópico 2" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> Advances in text-to-image diffusion models and GAN-based techniques have unlocked powerful, controllable image editing capabilities driven by natural language prompts. Methods like StyleGAN inversion, DDIM inversion, and textual inversion allow users to manipulate generated images or real inputs with high fidelity while preserving key features like identity. Text-guided editing leverages the latent space of pretrained diffusion and GAN models, enabling creative, precise, and personalized edits through simple prompts. Despite remarkable progress, achieving fine-grained control over complex edits and extending these capabilities to video editing remain active research challenges. <br/> <br/> Principais autores: <ol> <li>Chen Change Loy (9 artigos)</li> <li>Xintao Wang (8 artigos)</li> <li>Ying Shan (8 artigos)</li> </ol> Exemplos de artigos: <ul> <li><a href="https://openaccess.thecvf.com/content/CVPR2024W/GCV/html/Bodur_iEdit_Localised_Text-guided_Image_Editing_with_Weak_Supervision_CVPRW_2024_paper.html">iEdit: Localised Text-guided Image Editing with Weak Supervision (2024)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2024/html/Guo_MoMask_Generative_Masked_Modeling_of_3D_Human_Motions_CVPR_2024_paper.html">MoMask: Generative Masked Modeling of 3D Human Motions (2024)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2024/html/Nam_Contrastive_Denoising_Score_for_Text-guided_Latent_Diffusion_Image_Editing_CVPR_2024_paper.html">Contrastive Denoising Score for Text-guided Latent Diffusion Image Editing (2024)</a></li> </ul> <hr/> </details> <details> <summary><b>Tópico 3 - AI-Driven Medical Imaging and Diagnosis in Clinical Practice (345 documents)</b></summary> <figure> <picture> <img src="/assets/img/blog/2025-03-26-cvpr-history-analysis/topic_5.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" alt="Nuvem de palavras para o tópico 3" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> The integration of computational methods into medical imaging and pathology has become increasingly important for improving diagnostic accuracy and early disease detection. Techniques like computer-aided diagnosis support clinicians in analyzing tissues, tumors, and organs across modalities such as histopathology, MRI, CT, and digital microscopy. Applications span cancer diagnosis (e.g., breast, brain, skin lesions), neurological diseases like Alzheimer's and Parkinson's, and blood analysis. By enhancing image analysis and tissue classification, these AI-driven tools aid in treatment planning and disease progression monitoring, making them vital in modern clinical practice and biomedical research. <br/> <br/> Principais autores: <ol> <li>Le Lu (9 artigos)</li> <li>Faisal Mahmood (5 artigos)</li> <li>Ke Yan (5 artigos)</li> </ol> Exemplos de artigos: <ul> <li><a href="https://openaccess.thecvf.com/content/CVPR2023/html/Xiang_SQUID_Deep_Feature_In-Painting_for_Unsupervised_Anomaly_Detection_CVPR_2023_paper.html">SQUID: Deep Feature In-Painting for Unsupervised Anomaly Detection (2023)</a></li> <li><a href="https://openaccess.thecvf.com/content_cvpr_2017_workshops/w3/html/Mery_A_Logarithmic_X-Ray_CVPR_2017_paper.html">A Logarithmic X-Ray Imaging Model for Baggage Inspection: Simulation and Object Detection (2017)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2022/html/Haghighi_DiRA_Discriminative_Restorative_and_Adversarial_Learning_for_Self-Supervised_Medical_Image_CVPR_2022_paper.html">DiRA: Discriminative, Restorative, and Adversarial Learning for Self-Supervised Medical Image Analysis (2022)</a></li> </ul> <hr/> </details> <details> <summary><b>Tópico 4 - Challenges and Advances in 3D-Aware Text-to-Image and Text-to-Video Generation (68 documents)</b></summary> <figure> <picture> <img src="/assets/img/blog/2025-03-26-cvpr-history-analysis/topic_95.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" alt="Nuvem de palavras para o tópico 4" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> Text-to-image and text-to-video generation using diffusion models has made remarkable progress, enabling the synthesis of high-fidelity, photorealistic assets from simple prompts. However, existing methods still struggle with accurately handling 3D geometry, novel views, and maintaining global and multi-view consistency. Techniques like diffusion priors, 3D Gaussians, and NeRF-based approaches aim to improve subject-driven generation and diverse, globally consistent outputs. Despite advances in pretrained diffusion models and anisotropic diffusion strategies, achieving high-fidelity, geometry-aware synthesis remains a central challenge in the evolution of text-to-3D and motion generation. <br/> <br/> Principais autores: <ol> <li>Hsin-Ying Lee (4 artigos)</li> <li>Sergey Tulyakov (4 artigos)</li> <li>Ying Shan (4 artigos)</li> </ol> Exemplos de artigos: <ul> <li><a href="https://openaccess.thecvf.com/content/CVPR2024/html/Kim_Enhancing_3D_Fidelity_of_Text-to-3D_using_Cross-View_Correspondences_CVPR_2024_paper.html">Enhancing 3D Fidelity of Text-to-3D using Cross-View Correspondences (2024)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2024/html/Liu_DIRECT-3D_Learning_Direct_Text-to-3D_Generation_on_Massive_Noisy_3D_Data_CVPR_2024_paper.html">DIRECT-3D: Learning Direct Text-to-3D Generation on Massive Noisy 3D Data (2024)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2024/html/Yi_Diffusion_Time-step_Curriculum_for_One_Image_to_3D_Generation_CVPR_2024_paper.html">Diffusion Time-step Curriculum for One Image to 3D Generation (2024)</a></li> </ul> <hr/> </details> <details> <summary><b>Tópico 5 - Remote Sensing and Aerial Imagery for Environmental and Agricultural Monitoring (306 documents)</b></summary> <figure> <picture> <img src="/assets/img/blog/2025-03-26-cvpr-history-analysis/topic_10.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" alt="Nuvem de palavras para o tópico 5" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> The rapid development of satellite and unmanned aerial vehicle (UAV) technologies has fueled increased interest in using high-resolution imagery for environmental, agricultural, and urban management. Remote sensing enables the monitoring of plant species, crop types, water resources, land cover changes, and urban infrastructure such as roads and buildings, particularly aiding developing countries. Applications range from crop management and plant phenotyping to traffic management and tracking environmental factors and changes. Publicly accessible satellite and aerial datasets are becoming vital tools for tackling global challenges in resource management, environmental protection, and urban planning. <br/> <br/> Principais autores: <ol> <li>Sara Beery (5 artigos)</li> <li>David Lobell (4 artigos)</li> <li>Edward J. Delp (4 artigos)</li> </ol> Exemplos de artigos: <ul> <li><a href="https://openaccess.thecvf.com/content_cvpr_2018/html/Mahjourian_Unsupervised_Learning_of_CVPR_2018_paper.html">Unsupervised Learning of Depth and Ego-Motion From Monocular Video Using 3D Geometric Constraints (2018)</a></li> <li><a href="https://openaccess.thecvf.com/content_cvpr_2018_workshops/w4/html/Hamaguchi_Building_Detection_From_CVPR_2018_paper.html">Building Detection From Satellite Imagery Using Ensemble of Size-Specific Detectors (2018)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2021W/AI4Space/html/Oestreich_On-Orbit_Inspection_of_an_Unknown_Tumbling_Target_Using_NASAs_Astrobee_CVPRW_2021_paper.html">On-Orbit Inspection of an Unknown, Tumbling Target Using NASA's Astrobee Robotic Free-Flyers (2021)</a></li> </ul> <hr/> </details> <details> <summary><b>Tópico 6 - Competitions and Challenges in Computer Vision: The Role of NTIRE and Beyond (90 documents)</b></summary> <figure> <picture> <img src="/assets/img/blog/2025-03-26-cvpr-history-analysis/topic_66.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" alt="Nuvem de palavras para o tópico 6" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> Large-scale competitions like the NTIRE Challenge, MegaFace Challenge, and ABAW Competition have become central to advancing computer vision research. Hosted at major conferences like CVPR, these challenges attract hundreds of registered participants and teams, competing across various tracks such as perceptual quality, AI-generated content, and traffic analysis. Through rigorous submissions and evaluations on standardized test sets, these challenges foster innovation, benchmark progress, and tackle formidable problems in the field. The NTIRE Workshop, in particular, has established itself as a premier platform for recognizing outstanding achievements and setting new frontiers in computer vision competitions. <br/> <br/> Principais autores: <ol> <li>Radu Timofte (44 artigos)</li> <li>Marcos V. Conde (8 artigos)</li> <li>Radu Timofte (7 artigos)</li> </ol> Exemplos de artigos: <ul> <li><a href="https://openaccess.thecvf.com/content/CVPR2022W/NTIRE/html/Perez-Pellitero_NTIRE_2022_Challenge_on_High_Dynamic_Range_Imaging_Methods_and_CVPRW_2022_paper.html">NTIRE 2022 Challenge on High Dynamic Range Imaging: Methods and Results (2022)</a></li> <li><a href="https://openaccess.thecvf.com/content_cvpr_2017_workshops/w12/html/Bae_Beyond_Deep_Residual_CVPR_2017_paper.html">Beyond Deep Residual Learning for Image Restoration: Persistent Homology-Guided Manifold Simplification (2017)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2024W/NTIRE/html/Vasluianu_NTIRE_2024_Image_Shadow_Removal_Challenge_Report_CVPRW_2024_paper.html">NTIRE 2024 Image Shadow Removal Challenge Report (2024)</a></li> </ul> <hr/> </details> <details> <summary><b>Tópico 7 - Enhancing Diffusion Models: Faster Inference and Higher Image Quality (64 documents)</b></summary> <figure> <picture> <img src="/assets/img/blog/2025-03-26-cvpr-history-analysis/topic_103.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" alt="Nuvem de palavras para o tópico 7" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> Diffusion models have emerged as powerful tools for generating high-quality images, particularly in text-to-image tasks, but they often suffer from slow inference speeds and inherent limitations tied to their timestep-based denoising process. Recent advances focus on accelerating inference and improving FID scores through innovations like post-training quality enhancement, tailored token mixing (e.g., super tokens, OCR tokens), and anisotropic diffusion strategies. These methods can be flexibly applied with negligible computational overhead, substantially improving image quality without retraining. By addressing inherent inefficiencies and showcasing superior performance, these techniques represent a major step forward in diffusion-based image generation. <br/> <br/> Principais autores: <ol> <li>Deli Zhao (3 artigos)</li> <li>Yujun Shen (3 artigos)</li> <li>Chengyue Gong (2 artigos)</li> </ol> Exemplos de artigos: <ul> <li><a href="https://openaccess.thecvf.com/content/CVPR2023/html/Liu_FlowGrad_Controlling_the_Output_of_Generative_ODEs_With_Gradients_CVPR_2023_paper.html">FlowGrad: Controlling the Output of Generative ODEs With Gradients (2023)</a></li> <li><a href="https://openaccess.thecvf.com/content_CVPRW_2020/html/w1/B.S._Plug-and-Pipeline_Efficient_Regularization_for_Single-Step_Adversarial_Training_CVPRW_2020_paper.html">Plug-and-Pipeline: Efficient Regularization for Single-Step Adversarial Training (2020)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2023/html/Karpikova_FIANCEE_Faster_Inference_of_Adversarial_Networks_via_Conditional_Early_Exits_CVPR_2023_paper.html">FIANCEE: Faster Inference of Adversarial Networks via Conditional Early Exits (2023)</a></li> </ul> <hr/> </details> <details> <summary><b>Tópico 8 - Intelligent Traffic Monitoring and Driver Behavior Analysis for Road Safety (58 documents)</b></summary> <figure> <picture> <img src="/assets/img/blog/2025-03-26-cvpr-history-analysis/topic_107.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" alt="Nuvem de palavras para o tópico 8" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> Advances in intelligent transportation systems are increasingly focused on improving road safety through the analysis of driver behavior, traffic scenarios, and vehicle-pedestrian interactions. By leveraging traffic monitoring, naturalistic driving datasets, and leaderboard-driven challenges, researchers aim to develop better driver assistance systems and accident prevention technologies. Areas like distracted driver detection, traffic surveillance, and automated driving benefit from smart monitoring systems that enhance safe driving practices and reduce traffic accidents. As public leaderboards rank the best published methods, innovations in vehicle tracking, intelligent traffic analysis, and safe transportation continue to accelerate progress toward safer roads. <br/> <br/> Principais autores: <ol> <li>Armstrong Aboah (3 artigos)</li> <li>Fei Su (3 artigos)</li> <li>Zhe Cui (3 artigos)</li> </ol> Exemplos de artigos: <ul> <li><a href="https://openaccess.thecvf.com/content/CVPR2024W/AICity/html/Chen_An_Effective_Method_for_Detecting_Violation_of_Helmet_Rule_for_CVPRW_2024_paper.html">An Effective Method for Detecting Violation of Helmet Rule for Motorcyclists (2024)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2022W/AICity/html/Liang_Stargazer_A_Transformer-Based_Driver_Action_Detection_System_for_Intelligent_Transportation_CVPRW_2022_paper.html">Stargazer: A Transformer-Based Driver Action Detection System for Intelligent Transportation (2022)</a></li> <li><a href="https://openaccess.thecvf.com/content_cvpr_2017_workshops/w4/html/Reddy_Real-Time_Driver_Drowsiness_CVPR_2017_paper.html">Real-Time Driver Drowsiness Detection for Embedded System Using Model Compression of Deep Neural Networks (2017)</a></li> </ul> <hr/> </details> <details> <summary><b>Tópico 9 - Soccer and Sports Video Analytics: Player Tracking and Game Understanding (103 documents)</b></summary> <figure> <picture> <img src="/assets/img/blog/2025-03-26-cvpr-history-analysis/topic_54.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" alt="Nuvem de palavras para o tópico 9" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> Advances in sports video analytics, particularly for soccer, focus on tracking players, analyzing game states, and generating highlights from broadcast footage and sport-specific datasets. Systems capable of detecting player positions, ball movements, and team dynamics have become fundamental tools for both game analysis and automated content production. Publicly released datasets like UCF and HMDB, along with open-source code, drive innovation in this field, enabling teams around the world to develop systems capable of capturing, processing, and understanding complex sport scenarios. These developments are reshaping sports analytics, enhancing performance evaluation, and enriching fan experiences. <br/> <br/> Principais autores: <ol> <li>Anthony Cioppa (11 artigos)</li> <li>Marc Van Droogenbroeck (10 artigos)</li> <li>Bernard Ghanem (8 artigos)</li> </ol> Exemplos de artigos: <ul> <li><a href="https://openaccess.thecvf.com/content_CVPRW_2020/html/w45/Ramaswamy_Spatio-Temporal_Action_Detection_and_Localization_Using_a_Hierarchical_LSTM_CVPRW_2020_paper.html">Spatio-Temporal Action Detection and Localization Using a Hierarchical LSTM (2020)</a></li> <li><a href="https://openaccess.thecvf.com/content_cvpr_2018_workshops/w34/html/Giancola_SoccerNet_A_Scalable_CVPR_2018_paper.html">SoccerNet: A Scalable Dataset for Action Spotting in Soccer Videos (2018)</a></li> <li><a href="https://openaccess.thecvf.com/content_cvpr_2017/html/Hu_Deep_360_Pilot_CVPR_2017_paper.html">Deep 360 Pilot: Learning a Deep Agent for Piloting Through 360deg Sports Videos (2017)</a></li> </ul> <hr/> </details> <details> <summary><b>Tópico 10 - Event-Based Vision: High-Speed, Low-Latency Sensing with Neuromorphic Cameras (129 documents)</b></summary> <figure> <picture> <img src="/assets/img/blog/2025-03-26-cvpr-history-analysis/topic_34.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" alt="Nuvem de palavras para o tópico 10" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> Event-based vision, powered by bio-inspired neuromorphic cameras, represents a major shift from traditional frame-based imaging. Unlike conventional sensors, event cameras capture asynchronous changes in brightness with low latency, low power consumption, and exceptional dynamic range, making them ideal for high-speed motion scenarios and environments prone to motion blur. This technology, including event-based vision for video frame interpolation (VFI) and eye tracking, has progressed rapidly, offering advantages in bandwidth efficiency and noise reduction. Applications span robotics, autonomous driving, and high-speed tracking, where conventional frame-based approaches often fall short. <br/> <br/> Principais autores: <ol> <li>Davide Scaramuzza (11 artigos)</li> <li>Mathias Gehrig (6 artigos)</li> <li>Boxin Shi (5 artigos)</li> </ol> Exemplos de artigos: <ul> <li><a href="https://openaccess.thecvf.com/content/CVPR2022/html/Deng_A_Voxel_Graph_CNN_for_Object_Classification_With_Event_Cameras_CVPR_2022_paper.html">A Voxel Graph CNN for Object Classification With Event Cameras (2022)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2024/html/Sundar_Generalized_Event_Cameras_CVPR_2024_paper.html">Generalized Event Cameras (2024)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2024/html/Yu_EventPS_Real-Time_Photometric_Stereo_Using_an_Event_Camera_CVPR_2024_paper.html">EventPS: Real-Time Photometric Stereo Using an Event Camera (2024)</a></li> </ul> <hr/> </details> <h3 id="-10-topics">🧊 10 topics</h3> <pre><code class="language-plotly">{"data": [{"customdata": {"dtype": "i1", "bdata": "AQEBAQEBAQE=", "shape": "8, 1"}, "hovertemplate": "tópico=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "1", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "1", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YPuD8TYk4TYk7DPy5/O8fHSss/aRG5pbuR1j/N5tSIhffrP1keEZpqv+o/jwTxnqx//D84iB7fhYPgPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": {"dtype": "i1", "bdata": "AgICAgICAgI=", "shape": "8, 1"}, "hovertemplate": "tópico=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "2", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "2", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "sVTEUhFLAUDyexnyexkCQC5/O8fHSvs/T9krrAn19D+1v65mtH76P8HIDoWtGQdAviIgBBciEUBVzK3OSMUIQA=="}, "yaxis": "y", "type": "scatter"}, {"customdata": {"dtype": "i1", "bdata": "AwMDAwMDAwM=", "shape": "8, 1"}, "hovertemplate": "tópico=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "3", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "3", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YPuD+Y+iGY+iHYPy5/O8fHSts/0PHti4ME7T+cmIhE4wX5P76sEqjoLf0/IAQXItnI+T9VzK3OSMXoPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": {"dtype": "i1", "bdata": "BAQEBAQEBAQ=", "shape": "8, 1"}, "hovertemplate": "tópico=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "4", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "4", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YP6D8+eSo+eSr+P23VFXiUMANAAjGEv/MeAEBiIhKNF2QJQCM7FLZmnP8/44SUPMuI/j89vgsH0ePxPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": {"dtype": "i1", "bdata": "BQUFBQUFBQU=", "shape": "8, 1"}, "hovertemplate": "tópico=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "5", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "5", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YPyD+Y+iGY+iHYP2OfbNUVeOQ/AjGEv/Me8D8LrqN3/DDwPyhljgEOfvY/JoMsSX2tA0C1nyyBTfv7Pw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": {"dtype": "i1", "bdata": "BgYGBgYGBgY=", "shape": "8, 1"}, "hovertemplate": "tópico=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "6", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "6", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "77S60+pOB0DhCH/hCH8BQELrjQzFu/g/HGkRuaW78T8j1cmZzanxP/SPD4zsUPg/BITgQiQb+T+61RmpmFvtPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": {"dtype": "i1", "bdata": "BwcHBwcHBwc=", "shape": "8, 1"}, "hovertemplate": "tópico=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "7", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "7", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "qYilIpaK8D8TYk4TYk7zP2OfbNUVeOQ/0PHti4ME7T/N5tSIhffrP1w6DXcvq+Q/PIRNAY52+j/hIHp8Fw7wPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": {"dtype": "i1", "bdata": "CAgICAgICAg=", "shape": "8, 1"}, "hovertemplate": "tópico=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "8", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "8", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "uSDjgowL4j/RleTQleTgP3Dn+Fhpw+I/aRG5pbuR5j+1v65mtH7qP/eySqCitwBAmwIc7fRIAED5LhxEj+/2Pw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": {"dtype": "i1", "bdata": "CQkJCQkJCQk=", "shape": "8, 1"}, "hovertemplate": "tópico=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "9", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "9", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "9oDZA2YPyD8TYk4TYk6zPy5/O8fHSrs/NqGesldY0z+1v65mtH7aP76sEqjoLd0/mwIc7fRI8D9eOIge34XbPw=="}, "yaxis": "y", "type": "scatter"}, {"customdata": {"dtype": "i1", "bdata": "CgoKCgoKCgo=", "shape": "8, 1"}, "hovertemplate": "tópico=%{customdata[0]}&lt;br&gt;ano=%{x}&lt;br&gt;ocorrências (%)=%{y:.3f}&lt;extra&gt;&lt;/extra&gt;", "legendgroup": "10", "line": {"dash": "solid"}, "marker": {"symbol": "circle"}, "mode": "lines+markers", "name": "10", "orientation": "v", "showlegend": true, "x": {"dtype": "i2", "bdata": "4QfiB+MH5AflB+YH5wfoBw=="}, "xaxis": "x", "y": {"dtype": "f8", "bdata": "2FBeQ3kNFUAdk/Uck/UMQGnDMpe/nQNAdq1/ohRgB0CKSDRekKX/P7+6kBbLI/o/lYMGxlBk9j+waT9ZApvqPw=="}, "yaxis": "y", "type": "scatter"}], "layout": {"xaxis": {"anchor": "y", "domain": [0.0, 1.0], "title": {"text": "ano"}}, "yaxis": {"anchor": "x", "domain": [0.0, 1.0], "title": {"text": "ocorrências (%)"}}, "legend": {"title": {"text": "tópico"}, "tracegroupgap": 0}}}
</code></pre> <p>Os tópicos a seguir estão listados na ordem em que tiveram a maior diminuição de artigos no último ano.</p> <details> <summary><b>Tópico 1 - Self-Supervised Pretraining: Masked Models and Their Impact on Downstream Vision Tasks (115 documents)</b></summary> <figure> <picture> <img src="/assets/img/blog/2025-03-26-cvpr-history-analysis/topic_44.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" alt="Nuvem de palavras para o tópico 1" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> Self-supervised pretraining has revolutionized machine learning by enabling models to learn from unlabeled data, significantly improving performance on a wide range of downstream vision tasks. Techniques like masked autoencoding and contrastive pretraining have become central to this approach, where a model is trained to predict missing parts of the data, learning rich representations without the need for labeled examples. These methods, including masked token strategies and large-scale pretraining on unlabeled video or image datasets, have shown to outperform traditional supervised pretraining, achieving great success across various applications. The benefits of self-supervised learning, especially in terms of scalability and performance, are now being extensively explored in vision-language pretraining (VLP) and other vision tasks, often surpassing existing supervised methods. <br/> <br/> Principais autores: <ol> <li>Yu Qiao (9 artigos)</li> <li>Ishan Misra (4 artigos)</li> <li>Ross Girshick (4 artigos)</li> </ol> Exemplos de artigos: <ul> <li><a href="https://openaccess.thecvf.com/content/CVPR2024/html/Liu_Solving_Masked_Jigsaw_Puzzles_with_Diffusion_Vision_Transformers_CVPR_2024_paper.html">Solving Masked Jigsaw Puzzles with Diffusion Vision Transformers (2024)</a></li> <li><a href="https://openaccess.thecvf.com/content_cvpr_2017/html/Pathak_Learning_Features_by_CVPR_2017_paper.html">Learning Features by Watching Objects Move (2017)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2024W/CV4MS/html/Kazimi_Self-Supervised_Learning_with_Generative_Adversarial_Networks_for_Electron_Microscopy_CVPRW_2024_paper.html">Self-Supervised Learning with Generative Adversarial Networks for Electron Microscopy (2024)</a></li> </ul> <hr/> </details> <details> <summary><b>Tópico 2 - Vision-Language Models: Aligning Text and Image for Cross-Modal Understanding (432 documents)</b></summary> <figure> <picture> <img src="/assets/img/blog/2025-03-26-cvpr-history-analysis/topic_2.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" alt="Nuvem de palavras para o tópico 2" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> Vision-language models, such as CLIP, leverage large datasets of paired image-text data to learn the alignment between visual content and language. These models enable tasks like image captioning, where a description is generated for an image, and text-based image retrieval, where a sentence or phrase is used to find relevant visual content. Through pretraining on vast collections of images and their corresponding captions, these models achieve zero-shot capabilities, meaning they can generalize to tasks they were not explicitly trained on. Grounding text in visual concepts, such as matching sentences to images or videos, has become a central challenge in creating more sophisticated systems for understanding and generating visual and textual information across diverse domains, including untrimmed videos and spoken language. <br/> <br/> Principais autores: <ol> <li>Lijuan Wang (9 artigos)</li> <li>Mike Zheng Shou (7 artigos)</li> <li>Ying Shan (7 artigos)</li> </ol> Exemplos de artigos: <ul> <li><a href="https://openaccess.thecvf.com/content_CVPR_2020/html/Chen_Image_Search_With_Text_Feedback_by_Visiolinguistic_Attention_Learning_CVPR_2020_paper.html">Image Search With Text Feedback by Visiolinguistic Attention Learning (2020)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2023/html/Gao_ULIP_Learning_a_Unified_Representation_of_Language_Images_and_Point_CVPR_2023_paper.html">ULIP: Learning a Unified Representation of Language, Images, and Point Clouds for 3D Understanding (2023)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2024/html/Vasu_MobileCLIP_Fast_Image-Text_Models_through_Multi-Modal_Reinforced_Training_CVPR_2024_paper.html">MobileCLIP: Fast Image-Text Models through Multi-Modal Reinforced Training (2024)</a></li> </ul> <hr/> </details> <details> <summary><b>Tópico 3 - Semi-Supervised Learning: Leveraging Unlabeled Data for Improved Model Performance (179 documents)</b></summary> <figure> <picture> <img src="/assets/img/blog/2025-03-26-cvpr-history-analysis/topic_19.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" alt="Nuvem de palavras para o tópico 3" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> Semi-supervised learning (SSL) is a powerful technique that utilizes both labeled and unlabeled data to train models, especially when labeled data is scarce. In SSL, pseudo-labeling is commonly employed, where unlabeled examples are assigned pseudo-labels based on model predictions, and these pseudo-labeled data are incorporated into the training process. This approach allows models to learn from a large amount of unlabeled data, improving generalization without requiring extensive labeled datasets. Methods like pseudo label refinement and self-training help ensure the quality and reliability of the pseudo-labels, making SSL effective for tasks like medical image analysis, where labeled data is limited. By combining labeled data with confident pseudo-labels from unlabeled examples, semi-supervised learning can outperform traditional fully supervised methods, particularly in challenging settings with partially labeled data. <br/> <br/> Principais autores: <ol> <li>Jingdong Wang (4 artigos)</li> <li>Lei Qi (4 artigos)</li> <li>Yinghuan Shi (4 artigos)</li> </ol> Exemplos de artigos: <ul> <li><a href="https://openaccess.thecvf.com/content/CVPR2024/html/Zhang_Decoupled_Pseudo-labeling_for_Semi-Supervised_Monocular_3D_Object_Detection_CVPR_2024_paper.html">Decoupled Pseudo-labeling for Semi-Supervised Monocular 3D Object Detection (2024)</a></li> <li><a href="https://openaccess.thecvf.com/content_CVPRW_2020/html/w45/Rebuffi_Semi-Supervised_Learning_With_Scarce_Annotations_CVPRW_2020_paper.html">Semi-Supervised Learning With Scarce Annotations (2020)</a></li> <li><a href="https://openaccess.thecvf.com/content_CVPR_2020/html/Yang_Phase_Consistent_Ecological_Domain_Adaptation_CVPR_2020_paper.html">Phase Consistent Ecological Domain Adaptation (2020)</a></li> </ul> <hr/> </details> <details> <summary><b>Tópico 4 - Domain Adaptation: Bridging the Gap Between Source and Target Domains (323 documents)</b></summary> <figure> <picture> <img src="/assets/img/blog/2025-03-26-cvpr-history-analysis/topic_6.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" alt="Nuvem de palavras para o tópico 4" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> Domain adaptation (DA) focuses on adapting models trained on a labeled source domain to perform well on an unseen target domain, addressing the challenges posed by domain shift or domain gap. This process is crucial when the source and target domains differ significantly, such as in cross-domain generalization tasks. Techniques like pseudo-labeling, self-training, and few-shot learning are employed to improve performance on target data, even when labeled data from the target domain is limited or unavailable. Domain adaptation methods aim to reduce the discrepancy between the source and target domains by minimizing the impact of domain shift and leveraging unlabeled target samples. These methods are vital for applications like visual domain adaptation, where new target domains with varying conditions or classes are frequently encountered. <br/> <br/> Principais autores: <ol> <li>Luc Van Gool (8 artigos)</li> <li>Dengxin Dai (7 artigos)</li> <li>Wen Li (7 artigos)</li> </ol> Exemplos de artigos: <ul> <li><a href="https://openaccess.thecvf.com/content/CVPR2021W/WiCV/html/Thota_Contrastive_Domain_Adaptation_CVPRW_2021_paper.html">Contrastive Domain Adaptation (2021)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2021W/LLID/html/Cai_DAMSL_Domain_Agnostic_Meta_Score-Based_Learning_CVPRW_2021_paper.html">DAMSL: Domain Agnostic Meta Score-Based Learning (2021)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2021/html/Song_Spatio-temporal_Contrastive_Domain_Adaptation_for_Action_Recognition_CVPR_2021_paper.html">Spatio-temporal Contrastive Domain Adaptation for Action Recognition (2021)</a></li> </ul> <hr/> </details> <details> <summary><b>Tópico 5 - 3D Object Detection: Advancements in Lidar and Monocular Approaches for Autonomous Vehicles (217 documents)</b></summary> <figure> <picture> <img src="/assets/img/blog/2025-03-26-cvpr-history-analysis/topic_15.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" alt="Nuvem de palavras para o tópico 5" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> 3D object detection is a critical component of autonomous driving, enabling vehicles to perceive and understand their environment in three dimensions. Using technologies like lidar, monocular cameras, and radar, 3D detection systems create detailed representations of the surroundings, often represented in formats such as birds-eye view (BEV) or voxel grids. Datasets like KITTI, NuScenes, and Waymo provide benchmarks for evaluating 3D detection models, with lidar-based point clouds playing a central role in high-accuracy detection of objects, such as pedestrians, vehicles, and obstacles. These systems face challenges such as slow inference speeds and the complexity of predicting occupancy grids, but advancements in lidar sensors, occupancy prediction, and BEV detectors are helping improve autonomous vehicle perception and safety. As autonomous driving systems evolve, 3D detection continues to be crucial for precise navigation and decision-making. <br/> <br/> Principais autores: <ol> <li>Jie Zhou (7 artigos)</li> <li>Jiwen Lu (6 artigos)</li> <li>Yuexin Ma (6 artigos)</li> </ol> Exemplos de artigos: <ul> <li><a href="https://openaccess.thecvf.com/content/CVPR2024/html/Li_GAFusion_Adaptive_Fusing_LiDAR_and_Camera_with_Multiple_Guidance_for_CVPR_2024_paper.html">GAFusion: Adaptive Fusing LiDAR and Camera with Multiple Guidance for 3D Object Detection (2024)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2024/html/Tang_SparseOcc_Rethinking_Sparse_Latent_Representation_for_Vision-Based_Semantic_Occupancy_Prediction_CVPR_2024_paper.html">SparseOcc: Rethinking Sparse Latent Representation for Vision-Based Semantic Occupancy Prediction (2024)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2024/html/Yin_IS-Fusion_Instance-Scene_Collaborative_Fusion_for_Multimodal_3D_Object_Detection_CVPR_2024_paper.html">IS-Fusion: Instance-Scene Collaborative Fusion for Multimodal 3D Object Detection (2024)</a></li> </ul> <hr/> </details> <details> <summary><b>Tópico 6 - Weakly Supervised Object Segmentation: Balancing Annotations and Performance (244 documents)</b></summary> <figure> <picture> <img src="/assets/img/blog/2025-03-26-cvpr-history-analysis/topic_13.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" alt="Nuvem de palavras para o tópico 6" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> Weakly supervised object segmentation focuses on leveraging less detailed annotations, such as image-level labels or object proposals, to train segmentation models. Unlike fully supervised methods that require pixel-level annotations, weak supervision relies on class-level or bounding box labels to guide the segmentation process. Datasets like Pascal VOC and MS COCO provide benchmarks for evaluating segmentation models, with metrics such as mean Intersection over Union (mIoU) used to assess performance. Techniques like class-agnostic object masks, discriminative region mapping (CAM), and pseudo-masks are employed to generate pixel-level segmentations from weak annotations. This approach aims to reduce the cost and effort associated with obtaining high-quality, pixel-wise annotations, while still achieving competitive segmentation results, especially for complex tasks like instance-level segmentation and object part identification. <br/> <br/> Principais autores: <ol> <li>Junwei Han (5 artigos)</li> <li>Yunchao Wei (5 artigos)</li> <li>Bingfeng Zhang (4 artigos)</li> </ol> Exemplos de artigos: <ul> <li><a href="https://openaccess.thecvf.com/content_CVPR_2020/html/Cheng_CascadePSP_Toward_Class-Agnostic_and_Very_High-Resolution_Segmentation_via_Global_and_CVPR_2020_paper.html">CascadePSP: Toward Class-Agnostic and Very High-Resolution Segmentation via Global and Local Refinement (2020)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2023/html/Huynh_SimpSON_Simplifying_Photo_Cleanup_With_Single-Click_Distracting_Object_Segmentation_Network_CVPR_2023_paper.html">SimpSON: Simplifying Photo Cleanup With Single-Click Distracting Object Segmentation Network (2023)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2023/html/Kang_Distilling_Self-Supervised_Vision_Transformers_for_Weakly-Supervised_Few-Shot_Classification__Segmentation_CVPR_2023_paper.html">Distilling Self-Supervised Vision Transformers for Weakly-Supervised Few-Shot Classification &amp; Segmentation (2023)</a></li> </ul> <hr/> </details> <details> <summary><b>Tópico 7 - Image Relighting: Enhancing Lighting and Material Effects in Digital Rendering (167 documents)</b></summary> <figure> <picture> <img src="/assets/img/blog/2025-03-26-cvpr-history-analysis/topic_21.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" alt="Nuvem de palavras para o tópico 7" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> Image relighting is a technique used in computer graphics and computational photography to manipulate or simulate changes in lighting conditions on a given scene or object. This process involves adjusting various aspects of lighting, such as specular and diffuse reflections, albedo, and shadow effects, to create realistic or desired lighting outcomes. It takes into account material properties like reflectance, illumination, and surface normals, which determine how light interacts with the scene. Relighting is commonly applied in tasks such as portrait or face relighting, where the goal is to alter lighting without changing the geometry of the scene. By estimating and adjusting lighting effects like specular highlights, shadows, and ambient light, image relighting allows for enhanced visual realism and flexibility in various applications, from film production to virtual environments and interactive systems. <br/> <br/> Principais autores: <ol> <li>Boxin Shi (11 artigos)</li> <li>Kalyan Sunkavalli (7 artigos)</li> <li>Noah Snavely (6 artigos)</li> </ol> Exemplos de artigos: <ul> <li><a href="https://openaccess.thecvf.com/content_cvpr_2018/html/Mo_Uncalibrated_Photometric_Stereo_CVPR_2018_paper.html">Uncalibrated Photometric Stereo Under Natural Illumination (2018)</a></li> <li><a href="https://openaccess.thecvf.com/content_CVPR_2020/html/Thapa_Dynamic_Fluid_Surface_Reconstruction_Using_Deep_Neural_Network_CVPR_2020_paper.html">Dynamic Fluid Surface Reconstruction Using Deep Neural Network (2020)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2021/html/R_Monocular_Reconstruction_of_Neural_Face_Reflectance_Fields_CVPR_2021_paper.html">Monocular Reconstruction of Neural Face Reflectance Fields (2021)</a></li> </ul> <hr/> </details> <details> <summary><b>Tópico 8 - Large Kernel Convolutions and Self-Attention Mechanisms in Vision Transformers (209 documents)</b></summary> <figure> <picture> <img src="/assets/img/blog/2025-03-26-cvpr-history-analysis/topic_16.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" alt="Nuvem de palavras para o tópico 8" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> The integration of large kernel convolutions and self-attention mechanisms has become a powerful approach in modern computer vision tasks. Large kernel convolutions, such as atrous or depthwise convolutions, allow for an increased receptive field, enabling the model to capture long-range dependencies in an image without significantly increasing computational cost. This is essential for vision tasks like object detection and segmentation, where understanding the global context is crucial. On the other hand, self-attention mechanisms, particularly in Vision Transformers (ViTs), facilitate capturing relationships between distant image patches, enhancing the model's ability to focus on relevant parts of an image. By combining large kernel convolutions with self-attention layers, models like the Vision Transformer (ViT) can effectively balance local feature extraction and global context understanding, leading to improved performance on benchmarks like ADE, Cityscapes, and COCO, especially in tasks like segmentation and scene understanding. This combination provides an efficient and scalable solution for handling complex vision tasks while maintaining competitive performance. <br/> <br/> Principais autores: <ol> <li>Xiangyu Zhang (6 artigos)</li> <li>Chang Xu (5 artigos)</li> <li>Yu Qiao (5 artigos)</li> </ol> Exemplos de artigos: <ul> <li><a href="https://openaccess.thecvf.com/content/CVPR2022/html/Zhang_PatchFormer_An_Efficient_Point_Transformer_With_Patch_Attention_CVPR_2022_paper.html">PatchFormer: An Efficient Point Transformer With Patch Attention (2022)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2024/html/Ding_UniRepLKNet_A_Universal_Perception_Large-Kernel_ConvNet_for_Audio_Video_Point_CVPR_2024_paper.html">UniRepLKNet: A Universal Perception Large-Kernel ConvNet for Audio Video Point Cloud Time-Series and Image Recognition (2024)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2021/html/Ruan_Gaussian_Context_Transformer_CVPR_2021_paper.html">Gaussian Context Transformer (2021)</a></li> </ul> <hr/> </details> <details> <summary><b>Tópico 9 - 3D-Aware Image Synthesis with GANs for High-Fidelity and Controllable Rendering (71 documents)</b></summary> <figure> <picture> <img src="/assets/img/blog/2025-03-26-cvpr-history-analysis/topic_91.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" alt="Nuvem de palavras para o tópico 9" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> 3D-aware image synthesis is an advanced technique that combines the power of Generative Adversarial Networks (GANs) with 3D geometry to create highly realistic and controllable images. By incorporating 3D-aware models like Neural Radiance Fields (NeRF) and leveraging latent spaces in GAN architectures such as StyleGAN, this method enables the generation of high-fidelity images from novel views or multi-view perspectives. This approach allows for fine-grained control over attributes like lighting, angles, and details, making it particularly useful for photorealistic rendering and editing. The synthesis process ensures that the generated images maintain consistency across different views and provide high-quality visual outputs, which can be applied in areas such as virtual reality, digital content creation, and computer graphics. With advancements in 3D-aware GANs, it is now possible to synthesize photo-realistic images with impressive fidelity, enabling novel applications in creative industries. <br/> <br/> Principais autores: <ol> <li>Gordon Wetzstein (4 artigos)</li> <li>Jiajun Wu (4 artigos)</li> <li>Sida Peng (4 artigos)</li> </ol> Exemplos de artigos: <ul> <li><a href="https://openaccess.thecvf.com/content/CVPR2023/html/Xu_DisCoScene_Spatially_Disentangled_Generative_Radiance_Fields_for_Controllable_3D-Aware_Scene_CVPR_2023_paper.html">DisCoScene: Spatially Disentangled Generative Radiance Fields for Controllable 3D-Aware Scene Synthesis (2023)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2023/html/Kim_NeuralField-LDM_Scene_Generation_With_Hierarchical_Latent_Diffusion_Models_CVPR_2023_paper.html">NeuralField-LDM: Scene Generation With Hierarchical Latent Diffusion Models (2023)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2023/html/Li_Lift3D_Synthesize_3D_Training_Data_by_Lifting_2D_GAN_to_CVPR_2023_paper.html">Lift3D: Synthesize 3D Training Data by Lifting 2D GAN to 3D Generative Radiance Field (2023)</a></li> </ul> <hr/> </details> <details> <summary><b>Tópico 10 - Efficient Solving of Non-Convex Problems with Outlier Rejection and Relaxation Techniques (356 documents)</b></summary> <figure> <picture> <img src="/assets/img/blog/2025-03-26-cvpr-history-analysis/topic_4.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" alt="Nuvem de palavras para o tópico 10" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> Solving non-convex problems, especially those involving outlier detection, correspondence, and registration, is a complex challenge in fields like computer vision and robotics. Methods like RANSAC (Random Sample Consensus) and polynomial solvers are commonly used to handle these issues, where outliers — incorrect data points — are filtered out to improve the accuracy of the solution. Convex relaxation techniques and non-convex optimization solvers are applied to iteratively refine the solution toward a globally optimal result. For example, pose estimation problems, such as relative rotation or translation, are solved efficiently by leveraging convex optimization and minimal solvers, ensuring that even with noisy or incomplete data, the solution converges to the correct answer. These techniques, including the use of least squares and graph matching, play a key role in ensuring robust performance in real-world applications, where noise and outliers are unavoidable. <br/> <br/> Principais autores: <ol> <li>Daniel Barath (13 artigos)</li> <li>Daniel Cremers (13 artigos)</li> <li>Viktor Larsson (10 artigos)</li> </ol> Exemplos de artigos: <ul> <li><a href="https://openaccess.thecvf.com/content/CVPR2023/html/Bai_Sliced_Optimal_Partial_Transport_CVPR_2023_paper.html">Sliced Optimal Partial Transport (2023)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2023/html/Zhang_3D_Registration_With_Maximal_Cliques_CVPR_2023_paper.html">3D Registration With Maximal Cliques (2023)</a></li> <li><a href="https://openaccess.thecvf.com/content/CVPR2023/html/He_A_Rotation-Translation-Decoupled_Solution_for_Robust_and_Efficient_Visual-Inertial_Initialization_CVPR_2023_paper.html">A Rotation-Translation-Decoupled Solution for Robust and Efficient Visual-Inertial Initialization (2023)</a></li> </ul> <hr/> </details> <h2 id="conclusão">Conclusão</h2> <p>Nesta análise, exploramos as tendências e mudanças nos tópicos de pesquisa da comunidade CVPR ao longo dos últimos anos. Os dados revelam um cenário dinâmico, com algumas áreas apresentando crescimento significativo, enquanto outras mostram uma queda de interesse. Isso reflete a natureza evolutiva da pesquisa em inteligência artificial e a busca contínua por inovação e aprimoramento em diversos domínios.</p> <p>Os tópicos mais quentes – que vão desde LLMs multimodais com fine-tuning por instrução para compreensão visão-linguagem até os avanços rápidos na edição orientada por texto, síntese com consciência do 3D e visão baseada em eventos – evidenciam um forte impulso na integração das modalidades, na criação de modelos generativos mais controláveis e na abordagem das crescentes demandas de aplicações reais. Pesquisadores estão cada vez mais empenhados em melhorar a integração entre linguagem e visão para possibilitar um raciocínio mais eficaz, lidar melhor com ambiguidades (como alucinações) e aprimorar o desempenho tanto em contextos criativos quanto em ambientes críticos para a segurança.</p> <p>Em contraste, os tópicos mais frios – tais como o pré-treinamento auto-supervisionado, o alinhamento tradicional visão-linguagem, o aprendizado semi-supervisionado, a adaptação de domínio e até mesmo a detecção clássica de objetos 3D – indicam áreas onde técnicas bem estabelecidas parecem ter atingido um platô. Enquanto esses métodos lançaram as bases para os avanços atuais, sua evolução desacelerou em favor de abordagens mais recentes. Técnicas que outrora foram inovadoras estão sendo revisitadas com o intuito de integrá-las a sistemas mais abrangentes, mas seu apelo isolado diminuiu à medida que a comunidade se volta para soluções end-to-end, multimodais e específicas para cada tarefa.</p> <p>Em conjunto, essas tendências sugerem que o campo está se direcionando para modelos mais holísticos e integrados, que não apenas expandem os limites do que os sistemas automatizados podem gerar ou analisar, mas também proporcionam maior confiabilidade e controle em aplicações do mundo real. À medida que a indústria continua a explorar a fusão de texto, imagem e até dados de sensores, a próxima onda de inovação provavelmente será impulsionada por sistemas que aprendem simultaneamente a partir de múltiplas modalidades, enquanto aproveitam métodos robustos já estabelecidos como alicerce.</p> <p>Essa evolução ressalta a natureza vibrante da pesquisa em inteligência artificial, onde métodos consagrados oferecem uma base sólida, ao mesmo tempo em que as técnicas emergentes prometem remodelar o futuro da inteligência artificial.</p>]]></content><author><name></name></author><category term="data-science"/><category term="ai"/><category term="conference"/><category term="analysis"/><summary type="html"><![CDATA[Uma análise do histórico do CVPR e seus workshops de 2017 a 2024.]]></summary></entry><entry><title type="html">sli.dev para desenvolvedores não web</title><link href="https://george-gca.github.io/pt-br/blog/2023/slidev_for_non_web_devs/" rel="alternate" type="text/html" title="sli.dev para desenvolvedores não web"/><published>2023-06-01T17:19:10+00:00</published><updated>2023-06-01T17:19:10+00:00</updated><id>https://george-gca.github.io/blog/2023/slidev_for_non_web_devs</id><content type="html" xml:base="https://george-gca.github.io/blog/2023/slidev_for_non_web_devs/"><![CDATA[<p>Eu sempre tive dificuldades sempre que tinha que fazer uma nova apresentação. Não me interpretem mal, o Google Slides é bom e é suficiente para a maioria dos casos de uso mais comuns. O problema é quando os slides estão sempre mudando e você quer fazer um controle de versão neles. No passado, fiz alguns slides usando LaTeX com a classe Beamer. Um amigo até me mostrou um <a href="https://github.com/deuslirio/UFGTeX-Presentation">modelo mais bonito</a> do que os predefinidos. O problema é que, embora esta solução seja portátil (pode gerar um documento PDF), não tem algumas funcionalidades que eu queria, como animações, transições e suporte para desenho.</p> <p>Analisei o <a href="https://revealjs.com/">Reveal.js</a>, mas era muito trabalhoso para configurar e manter. Também considerei o <a href="https://remarkjs.com/">Remark</a>, mas a <a href="https://github.com/gnab/remark">última atualização</a> foi há mais de 2 anos. Foi então que encontrei o <a href="https://sli.dev/">sli.dev</a>. É uma ferramenta <a href="https://github.com/slidevjs/slidev">em constante desenvolvimento</a> para criar slides usando <a href="https://sli.dev/guide/syntax.html">Markdown</a>. É baseado em muitas tecnologias web, mas você não precisa ser fluente nelas para usá-lo. Aqui está tudo o que precisa para começar.</p> <h2 id="instalando-o-gerenciador-de-versões-do-node-nvm">Instalando o gerenciador de versões do node (nvm)</h2> <p>O <a href="https://github.com/nvm-sh/nvm">nvm</a> lhe permite rapidamente instalar e usar diferentes versões do node através da linha de comando. Para instalar a versão mais recente, execute o seguinte comando:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>get_latest_github_raw_no_v<span class="o">()</span> <span class="o">{</span>
  <span class="c"># use quando a URL para o download não tiver uma versão incluída no nome do arquivo</span>
  <span class="c"># por exemplo: https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh</span>
  <span class="c"># forma de usar: get_latest_github_raw_no_v "user/repo" "filename"</span>
  <span class="nv">version</span><span class="o">=</span><span class="si">$(</span>curl <span class="nt">--silent</span> <span class="s2">"https://api.github.com/repos/</span><span class="nv">$1</span><span class="s2">/releases/latest"</span> |  <span class="c"># Obtém a versão mais recente da API do GitHub</span>
    <span class="nb">grep</span> <span class="s1">'"tag_name":'</span> |                                             <span class="c"># Pega a linha da tag</span>
    <span class="nb">sed</span> <span class="nt">-E</span> <span class="s1">'s/.*"([^"]+)".*/\1/'</span><span class="si">)</span>                                    <span class="c"># Extrai o valor do JSON</span>
  <span class="nb">echo</span> <span class="s2">"https://raw.githubusercontent.com/</span><span class="nv">$1</span><span class="s2">/</span><span class="nv">$version</span><span class="s2">/"</span><span class="nv">$2</span>
<span class="o">}</span>

<span class="c"># Instala o node version manager (nvm)</span>
<span class="nv">site</span><span class="o">=</span><span class="si">$(</span>get_latest_github_raw_no_v <span class="s2">"nvm-sh/nvm"</span> <span class="s2">"install.sh"</span><span class="si">)</span>
curl <span class="nt">-o-</span> <span class="nv">$site</span> | bash
</code></pre></div></div> <p>Depois, adicione as seguintes linhas ao seu <code class="language-plaintext highlighter-rouge">~/.bashrc</code>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># habilita o node version manager</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-d</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.nvm"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">export </span><span class="nv">NVM_DIR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.nvm"</span>
    <span class="o">[</span> <span class="nt">-s</span> <span class="s2">"</span><span class="nv">$NVM_DIR</span><span class="s2">/nvm.sh"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="se">\.</span> <span class="s2">"</span><span class="nv">$NVM_DIR</span><span class="s2">/nvm.sh"</span>  <span class="c"># Carrega o nvm</span>
    <span class="o">[</span> <span class="nt">-s</span> <span class="s2">"</span><span class="nv">$NVM_DIR</span><span class="s2">/bash_completion"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="se">\.</span> <span class="s2">"</span><span class="nv">$NVM_DIR</span><span class="s2">/bash_completion"</span>  <span class="c"># Habilita o bash_completion</span>
<span class="k">fi</span>
</code></pre></div></div> <p>Reinicie seu terminal, ou apenas recarregue o arquivo <code class="language-plaintext highlighter-rouge">~/.bashrc</code>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">.</span> ~/.bashrc
</code></pre></div></div> <h2 id="instalando-o-node-versão-mais-recente">Instalando o Node (versão mais recente)</h2> <p>Para instalar a versão mais recente do node, execute o seguinte comando:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvm <span class="nb">install</span> <span class="si">$(</span>nvm ls-remote | <span class="nb">grep</span> <span class="nt">-i</span> latest | <span class="nb">tail</span> <span class="nt">-n</span> 1 |
  <span class="nb">sed</span> <span class="nt">-ne</span> <span class="s1">'s/[^v0-9]*\(\([0-9]*\.\)\{0,4\}[0-9][^.]\).*/\1/p'</span> | xargs<span class="si">)</span>
</code></pre></div></div> <p>No meu caso, a última versão disponível é a <code class="language-plaintext highlighter-rouge">v20.2.0</code>. É possível verificar a versão instalada executando:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node <span class="nt">--version</span>
</code></pre></div></div> <h2 id="instalando-o-slidev">Instalando o sli.dev</h2> <p>Para instalar o sli.dev, é só executar:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm init slidev
</code></pre></div></div> <p>Este comando irá instalar tudo o que precisa, pedir o nome do projeto e iniciar o projeto modelo. Após a instalação, as seguintes linhas devem aparecer no seu terminal:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public slide show   &gt; http://localhost:3030/
  presenter mode      &gt; http://localhost:3030/presenter/
  remote control      &gt; pass --remote to enable

  shortcuts           &gt; restart | open | edit
</code></pre></div></div> <p>Se o browser não abriu automaticamente, é só abri-lo manualmente e acessar a URL <code class="language-plaintext highlighter-rouge">http://localhost:3030/</code>. Para parar a execução do servidor, basta pressionar <code class="language-plaintext highlighter-rouge">Ctrl+C</code> no terminal. Depois de parado, é possível iniciar novamente o servidor de desenvolvimento entrando no diretório criado e executando:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm run-script dev
</code></pre></div></div> <p>Para ver uma lista de comandos (scripts), execute <code class="language-plaintext highlighter-rouge">npm run</code>:</p> <pre><code class="language-txt">Scripts available in XXXXXXXXX via `npm run-script`:
  build
    slidev build
  dev
    slidev --open
  export
    slidev export
</code></pre> <p>Se você quiser modificar qualquer um desses comandos (ou criar mais, como exportar as notas do apresentador), você pode editar o arquivo <code class="language-plaintext highlighter-rouge">package.json</code>. Por exemplo, para adicionar um comando para exportar as notas do apresentador, adicione as seguintes linhas à seção <code class="language-plaintext highlighter-rouge">scripts</code>:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"export_notes"</span><span class="p">:</span><span class="w"> </span><span class="s2">"slidev export-notes"</span><span class="w">
</span></code></pre></div></div> <h2 id="mudando-o-tema-do-slidev">Mudando o tema do sli.dev</h2> <p>Para alterar o tema da apresentação, basta editar o atributo <code class="language-plaintext highlighter-rouge">theme</code> no cabeçalho (ou <a href="https://sli.dev/guide/syntax.html#front-matter-layouts">front matter</a>) do arquivo <code class="language-plaintext highlighter-rouge">slides.md</code>. Após a alteração, a interface cli baixa automaticamente e aplica o novo tema.</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">theme</span><span class="pi">:</span> <span class="s">academic</span>
</code></pre></div></div> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2023-06-01-slidev_for_non_web_devs/change_theme-480.webp 480w,/assets/img/blog/2023-06-01-slidev_for_non_web_devs/change_theme-800.webp 800w,/assets/img/blog/2023-06-01-slidev_for_non_web_devs/change_theme-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blog/2023-06-01-slidev_for_non_web_devs/change_theme.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Instalando o novo tema no sli.dev. </div> <h2 id="configurações-básicas">Configurações básicas</h2> <p>Não sou um usuário avançado do sli.dev ou um programador Web. Por isso, demorei algum tempo para descobrir algumas coisas, e acho que vale a pena mencioná-las. A primeira é forçar os slides a ficarem em modo escuro. Para fazer isso, adicione a seguinte linha ao cabeçalho do <code class="language-plaintext highlighter-rouge">slides.md</code>:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">colorSchema</span><span class="pi">:</span> <span class="s2">"</span><span class="s">dark"</span>
</code></pre></div></div> <p>Ao utilizar o tema <code class="language-plaintext highlighter-rouge">academic</code>, por padrão, cada slide com um <code class="language-plaintext highlighter-rouge"># título</code> será adicionado ao índice. Para ocultar um slide do índice, adicione a seguinte linha ao cabeçalho do slide:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hideInToc</span><span class="pi">:</span> <span class="kc">true</span>
</code></pre></div></div> <p>Por uma questão de organização, eu prefiro criar um arquivo diferente para cada seção da minha apresentação e, em seguida, importar esses arquivos no meu <code class="language-plaintext highlighter-rouge">slides.md</code> principal. Para fazer isso, crie um novo arquivo com a extensão markdown e adicione as seguintes linhas ao <code class="language-plaintext highlighter-rouge">slides.md</code> para cada arquivo a ser incluído:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">src</span><span class="pi">:</span> <span class="s">slides/other_slide.md</span>
<span class="nn">---</span>
</code></pre></div></div> <h2 id="exportando-os-slides">Exportando os slides</h2> <p><a href="https://sli.dev/guide/exporting.html">Exportar para PDF ou PNG</a> depende do <code class="language-plaintext highlighter-rouge">Playwright</code> para renderização. Portanto, é necessário instalar o <code class="language-plaintext highlighter-rouge">playwright-chromium</code> para utilizar este recurso. Para isso, execute:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i <span class="nt">-D</span> playwright-chromium
</code></pre></div></div> <p>Depois, adicione as seguintes linhas à seção <code class="language-plaintext highlighter-rouge">scripts</code> do arquivo <code class="language-plaintext highlighter-rouge">package.json</code>:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"export_slides"</span><span class="p">:</span><span class="w"> </span><span class="s2">"slidev export --with-toc --with-clicks"</span><span class="w">
</span></code></pre></div></div> <p>Por fim, execute o comando:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm run-script export_slides
</code></pre></div></div> <h2 id="atualizando-as-dependências">Atualizando as dependências</h2> <p>Para atualizar o <code class="language-plaintext highlighter-rouge">node</code> para a versão mais recente, execute:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvm <span class="nb">install</span> <span class="si">$(</span>nvm ls-remote | <span class="nb">grep</span> <span class="nt">-i</span> latest | <span class="nb">tail</span> <span class="nt">-n</span> 1 |
  <span class="nb">sed</span> <span class="nt">-ne</span> <span class="s1">'s/[^v0-9]*\(\([0-9]*\.\)\{0,4\}[0-9][^.]\).*/\1/p'</span> | xargs<span class="si">)</span> <span class="nt">--reinstall-packages-from</span><span class="o">=</span>current
</code></pre></div></div> <p>Para verificar as dependências que precisam ser atualizadas, execute:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm outdated
</code></pre></div></div> <p>que irá produzir algo como:</p> <pre><code class="language-txt">Package      Current   Wanted  Latest  Location                  Depended by
@slidev/cli  0.43.11  0.43.15  0.46.1  node_modules/@slidev/cli  xxxxxxxx
</code></pre> <p>Para atualizar as dependências instaladas, basta executar:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm update
</code></pre></div></div> <p>Tenha em mente que o <code class="language-plaintext highlighter-rouge">npm update</code> nunca atualizará para uma versão de quebra de compatibilidade, apenas para uma versão menor. O que isso significa é que ele usará a versão <code class="language-plaintext highlighter-rouge">Wanted</code> na tabela acima em vez da versão <code class="language-plaintext highlighter-rouge">Latest</code>. Para obter a versão <code class="language-plaintext highlighter-rouge">Latest</code>, chame o comando de instalação com <code class="language-plaintext highlighter-rouge">@latest</code> anexado ao nome do pacote. Por exemplo, para atualizar o <code class="language-plaintext highlighter-rouge">@slidev/cli</code> para a versão mais recente, execute:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> @slidev/cli@latest
</code></pre></div></div>]]></content><author><name></name></author><category term="web"/><category term="presentation"/><category term="programming"/><category term="code"/><category term="slides"/><category term="sli.dev"/><category term="web"/><summary type="html"><![CDATA[Como configurar e usar sli.dev para desenvolvedores que não são web]]></summary></entry><entry><title type="html">Melhorando seu código Python com truques simples</title><link href="https://george-gca.github.io/pt-br/blog/2023/simple-improvements-python-code/" rel="alternate" type="text/html" title="Melhorando seu código Python com truques simples"/><published>2023-01-25T13:28:15+00:00</published><updated>2023-01-25T13:28:15+00:00</updated><id>https://george-gca.github.io/blog/2023/simple-improvements-python-code</id><content type="html" xml:base="https://george-gca.github.io/blog/2023/simple-improvements-python-code/"><![CDATA[<p>Nosso código às vezes está lento. Às vezes, está consumindo muita memória. Talvez não esteja tão legível quanto gostaríamos que fosse. Neste post, veremos como utilizar algumas funções da biblioteca padrão para melhorar o nosso código. Todo o código usado neste post <a href="https://gist.github.com/george-gca/bea9d8c23a0932a22d6b1b80006629f4">está disponível aqui</a>. Embora eu apresente apenas algumas funções que uso com frequência, há muitas mais que podem ser usadas para melhorar seu código. Encorajo você a verificar a <a href="https://docs.python.org/3/library/">documentação oficial</a> para descobrir o que mais está disponível.</p> <h2 id="use-list-comprehension-sempre-que-possível">Use <a href="https://realpython.com/list-comprehension-python/">list comprehension</a> sempre que possível</h2> <h3 id="o-que-isso-significa">O que isso significa?</h3> <p>List comprehension é basicamente outra maneira de criar uma lista. Suponha que queremos criar uma lista de valores em um intervalo:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># forma tradicional
</span><span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">):</span>
  <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="c1"># list comprehension
</span><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)]</span>
</code></pre></div></div> <h3 id="por-que-isso-importa">Por que isso importa?</h3> <p>List comprehension geralmente é muito mais rápido do que o loop tradicional. Vamos compará-los:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">):</span>
  <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">1.04 s ± 89.8 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 293.57 MiB
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)]</span>
</code></pre></div></div> <pre><code class="language-txt">731 ms ± 71.6 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 285.82 MiB
</code></pre> <h3 id="outros-exemplos">Outros exemplos</h3> <h4 id="criando-uma-lista-com-uma-condição-if">Criando uma lista com uma condição <code class="language-plaintext highlighter-rouge">if</code></h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">):</span>
  <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">1.11 s ± 24 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: -0.25 MiB
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)</span> <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
</code></pre></div></div> <pre><code class="language-txt">944 ms ± 6.79 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 115.54 MiB
</code></pre> <hr/> <h4 id="criando-uma-lista-com-uma-condição-if-else">Criando uma lista com uma condição <code class="language-plaintext highlighter-rouge">if else</code></h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">):</span>
  <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">1.61 s ± 90.5 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 32.89 MiB
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)]</span>
</code></pre></div></div> <pre><code class="language-txt">1.33 s ± 11.4 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 273.82 MiB
</code></pre> <h3 id="a-maneira-mais-rápida-de-criar-uma-lista">A maneira mais rápida de criar uma lista</h3> <p>Ao gerar uma lista a partir de um gerador (<code class="language-plaintext highlighter-rouge">range</code> neste caso), é mais rápido usar o construtor <code class="language-plaintext highlighter-rouge">list()</code>.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">))</span>
</code></pre></div></div> <p>Para validar isso, vamos comparar o código para 7 execuções, 10 loops cada:</p> <table> <thead> <tr> <th style="text-align: center"> </th> <th style="text-align: center">loop</th> <th style="text-align: center">list comprehension</th> <th style="text-align: center">construtor de lista</th> </tr> </thead> <tbody> <tr> <td style="text-align: center">média ± desvio padrão. por loop</td> <td style="text-align: center">1.04 s ± 89.8 ms</td> <td style="text-align: center">731 ms ± 71.6 ms</td> <td style="text-align: center">301 ms ± 18.4 ms</td> </tr> <tr> <td style="text-align: center">incremento de memória</td> <td style="text-align: center">293.57 MiB</td> <td style="text-align: center">285.82 MiB</td> <td style="text-align: center">75.12 MiB</td> </tr> </tbody> </table> <p>Por que o construtor <code class="language-plaintext highlighter-rouge">list()</code> é mais rápido? De acordo com <a href="https://stackoverflow.com/a/29356931">esta resposta no StackOverflow</a>:</p> <blockquote> <p>A list comprehension executa o loop em bytecode Python, como um loop for regular. A chamada list() itera inteiramente em código C, o que é muito mais rápido.</p> </blockquote> <p>Para comparar todas essas soluções, vamos verificar os bytecodes equivalentes. Para o caso do loop:</p> <pre><code class="language-txt">1           0 BUILD_LIST               0
            2 STORE_NAME               0 (tmp)

2           4 LOAD_NAME                1 (range)
            6 LOAD_CONST               0 (10000000)
            8 CALL_FUNCTION            1
            10 GET_ITER
    &gt;&gt;   12 FOR_ITER                14 (to 28)
            14 STORE_NAME               2 (i)
            16 LOAD_NAME                0 (tmp)
            18 LOAD_METHOD              3 (append)
            20 LOAD_NAME                2 (i)
            22 CALL_METHOD              1
            24 POP_TOP
            26 JUMP_ABSOLUTE           12
    &gt;&gt;   28 LOAD_CONST               1 (None)
            30 RETURN_VALUE
</code></pre> <p>Para a solução de list comprehension:</p> <pre><code class="language-txt">1           0 LOAD_CONST               0 (&lt;code object &lt;listcomp&gt; at 0x7f272c8eaf50, file "&lt;stdin&gt;", line 1&gt;)
            2 LOAD_CONST               1 ('&lt;listcomp&gt;')
            4 MAKE_FUNCTION            0
            6 LOAD_NAME                0 (range)
            8 LOAD_NAME                1 (10_000_000)
            10 CALL_FUNCTION            1
            12 GET_ITER
            14 CALL_FUNCTION            1
            16 POP_TOP
            18 LOAD_CONST               2 (None)
            20 RETURN_VALUE

Disassembly of &lt;code object &lt;listcomp&gt; at 0x7f272c8eaf50, file "&lt;stdin&gt;", line 1&gt;:
1           0 BUILD_LIST               0
            2 LOAD_FAST                0 (.0)
    &gt;&gt;    4 FOR_ITER                 8 (to 14)
            6 STORE_FAST               1 (i)
            8 LOAD_FAST                1 (i)
            10 LIST_APPEND              2
            12 JUMP_ABSOLUTE            4
    &gt;&gt;   14 RETURN_VALUE
</code></pre> <p>E para a solução do construtor de lista:</p> <pre><code class="language-txt">1           0 LOAD_NAME                0 (list)
            2 LOAD_NAME                1 (range)
            4 LOAD_NAME                2 (10_000_000)
            6 CALL_FUNCTION            1
            8 CALL_FUNCTION            1
            10 POP_TOP
            12 LOAD_CONST               0 (None)
            14 RETURN_VALUE
</code></pre> <p>Podemos ver que o construtor <code class="language-plaintext highlighter-rouge">list()</code> gera menos bytecodes.</p> <h2 id="use-geradores-generators-e-iteradores-iterators-sempre-que-possível">Use geradores (<a href="https://realpython.com/introduction-to-python-generators/">generators</a>) e iteradores (<a href="https://docs.python.org/3/glossary.html#term-iterator">iterators</a>) sempre que possível</h2> <p>Para criar um gerador como uma list comprehension (chamada expressão geradora ou <a href="https://docs.python.org/3/glossary.html#index-20">generator expression</a>), basta substituir os colchetes [ ] por parênteses ( ).</p> <h3 id="por-que-isso-importa-1">Por que isso importa?</h3> <p><a href="https://docs.python.org/3/glossary.html#index-19">Geradores</a> parecem uma função normal, porém contém expressões <code class="language-plaintext highlighter-rouge">yield</code> para produzir uma série de valores utilizáveis em um loop for ou que podem ser recuperados um de cada vez com a função <code class="language-plaintext highlighter-rouge">next()</code>. Ele retorna um iterador de gerador (<a href="https://docs.python.org/3/glossary.html#term-generator-iterator">generator iterator</a>), que suspende temporariamente o processamento, lembrando o estado local de execução (incluindo variáveis locais e instruções try pendentes).</p> <p>Vamos fazer algumas comparações:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">([</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)])</span>
</code></pre></div></div> <pre><code class="language-txt">860 ms ± 30.4 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">((</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)))</span>
</code></pre></div></div> <pre><code class="language-txt">609 ms ± 2.93 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
</code></pre> <p>Não é tão diferente, certo? Agora, vamos verificar o consumo de memória. Vamos focar no incremento, pois ele representa a diferença de memória entre o início e o fim desta execução.</p> <pre><code class="language-txt">memory increment: 263.44 MiB
</code></pre> <pre><code class="language-txt">memory increment: 0.00 MiB
</code></pre> <p>O que aconteceu? O gerador retorna apenas um elemento por vez, que por sua vez é fornecido à função sum. Dessa forma, não precisamos gerar previamente toda a lista para realizar a soma dos elementos. Na verdade, como a função <a href="https://docs.python.org/3/library/functions.html#sum">sum</a> recebe um iterador como parâmetro, poderíamos usá-la assim:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">))</span>
</code></pre></div></div> <pre><code class="language-txt">593 ms ± 90.4 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.01 MiB
</code></pre> <p>Ou ainda assim:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">))</span>
</code></pre></div></div> <pre><code class="language-txt">168 ms ± 4.68 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.00 MiB
</code></pre> <p>Que executa bem mais rápido.</p> <h2 id="evite-gerar-todos-os-valores-sempre-que-possível">Evite gerar todos os valores sempre que possível</h2> <p>Para os exemplos seguintes, suponha que temos uma lista ordenada de valores.</p> <h3 id="o-que-fazer-se-quisermos-apenas-os-valores-inferiores-a-um-limite">O que fazer se quisermos apenas os valores inferiores a um limite?</h3> <p>A maneira utilizando list comprehension de conseguir isso é esta:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)</span> <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1_000_000</span><span class="p">]</span>
</code></pre></div></div> <pre><code class="language-txt">596 ms ± 7.16 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.02 MiB
</code></pre> <p>Agora, com loops:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">):</span>
  <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1_000_000</span><span class="p">:</span>
    <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="k">break</span>
</code></pre></div></div> <pre><code class="language-txt">116 ms ± 2.37 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.01 MiB
</code></pre> <p>Por que é mais rápido com loop?</p> <p>Porque usando list comprehension toda a lista deve ser gerada antes de selecionar os elementos. O mesmo não acontece para o loop, que só percorre alguns dos valores.</p> <h3 id="podemos-fazer-melhor">Podemos fazer melhor?</h3> <p>Sim, com <a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile">takewhile</a>.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">itertools</span> <span class="kn">import</span> <span class="n">takewhile</span>

<span class="n">tmp</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">takewhile</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">1_000_000</span><span class="p">,</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)))</span>
</code></pre></div></div> <pre><code class="language-txt">107 ms ± 2.37 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.01 MiB
</code></pre> <hr/> <p>Nota: <code class="language-plaintext highlighter-rouge">takewhile</code> só é mais rápido quando você sabe que a condição será satisfeita “em breve”.</p> <hr/> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">):</span>
  <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9_000_000</span><span class="p">:</span>
    <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="k">break</span>
</code></pre></div></div> <pre><code class="language-txt">1.12 s ± 27.5 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 3.70 MiB
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)</span> <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9_000_000</span><span class="p">]</span>
</code></pre></div></div> <pre><code class="language-txt">1.05 s ± 51 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 246.21 MiB
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">takewhile</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">9_000_000</span><span class="p">,</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)))</span>
</code></pre></div></div> <pre><code class="language-txt">1.06 s ± 8.41 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.00 MiB
</code></pre> <p>Nesse caso, é mais rápido gerar a lista inteira e depois filtrá-la. Mas observe que, embora usar list comprehension seja mais rápido, <code class="language-plaintext highlighter-rouge">takewhile</code> ocupa menos memória, pois não precisa armazenar a lista inteira, mesmo que momentaneamente.</p> <h3 id="e-se-quisermos-apenas-os-valores-superiores-a-um-limite">E se quisermos apenas os valores superiores a um limite?</h3> <p>Primeiro, vamos tentar com loops:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">):</span>
  <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">1_000_000</span><span class="p">:</span>
    <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">1.3 s ± 93.3 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.15 MiB
</code></pre> <p>Agora, com list comprehension:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)</span> <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">1_000_000</span><span class="p">]</span>
</code></pre></div></div> <pre><code class="language-txt">978 ms ± 11.2 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 169.84 MiB
</code></pre> <p>Neste caso, como o loop percorrerá todos os elementos, ele é mais lento que list comprehension. Porém, ocupa menos memória, pois não precisa armazenar toda a lista.</p> <h3 id="podemos-fazer-melhor-1">Podemos fazer melhor?</h3> <p>Sim, com <a href="https://docs.python.org/3/library/itertools.html#itertools.dropwhile">dropwhile</a></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">itertools</span> <span class="kn">import</span> <span class="n">dropwhile</span>

<span class="n">tmp</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">dropwhile</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">1_000_000</span><span class="p">,</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)))</span>
</code></pre></div></div> <pre><code class="language-txt">442 ms ± 10.2 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.05 MiB
</code></pre> <hr/> <p>Nota: <code class="language-plaintext highlighter-rouge">dropwhile</code> também só é mais rápido quando você sabe que a condição será satisfeita “em breve”.</p> <hr/> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">):</span>
  <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">9_000_000</span><span class="p">:</span>
    <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">654 ms ± 9.3 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.00 MiB
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)</span> <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">9_000_000</span><span class="p">]</span>
</code></pre></div></div> <pre><code class="language-txt">623 ms ± 13.6 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.01 MiB
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">dropwhile</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">9_000_000</span><span class="p">,</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)))</span>
</code></pre></div></div> <pre><code class="language-txt">924 ms ± 104 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.01 MiB
</code></pre> <h3 id="e-quando-queremos-obter-as-primeiras-n-amostras">E quando queremos obter as primeiras N amostras?</h3> <p>Com loops:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">n</span><span class="p">,</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)):</span>
  <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">1_000_000</span><span class="p">:</span>
    <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="k">break</span>
</code></pre></div></div> <pre><code class="language-txt">147 ms ± 3.09 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.00 MiB
</code></pre> <p>Fazendo com list comprehension:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)][:</span><span class="mi">1_000_000</span><span class="p">]</span>
</code></pre></div></div> <pre><code class="language-txt">523 ms ± 10.8 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.01 MiB
</code></pre> <p>Por que é mais rápido com loops?</p> <p>Porque usando list comprehension toda a lista deve ser gerada antes de fazer a operação de seleção. O mesmo não é verdade para o loop, que só percorre alguns dos valores.</p> <h3 id="podemos-fazer-melhor-2">Podemos fazer melhor?</h3> <p>Sim, com <a href="https://docs.python.org/3/library/itertools.html#itertools.islice">islice</a></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">itertools</span> <span class="kn">import</span> <span class="n">islice</span>

<span class="n">tmp</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">islice</span><span class="p">((</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)),</span> <span class="mi">1_000_000</span><span class="p">))</span>
</code></pre></div></div> <pre><code class="language-txt">72.5 ms ± 1.82 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.01 MiB
</code></pre> <h3 id="e-quando-queremos-obter-as-últimas-n-amostras">E quando queremos obter as últimas N amostras?</h3> <p>Podemos obter o mesmo resultado com <code class="language-plaintext highlighter-rouge">islice</code>. Vamos direto às comparações:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">n</span><span class="p">,</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)):</span>
  <span class="k">if</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">9_000_000</span><span class="p">:</span>
    <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">1.44 s ± 95.3 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 0.00 MiB
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)][</span><span class="mi">9_000_000</span><span class="p">:]</span>
</code></pre></div></div> <pre><code class="language-txt">743 ms ± 8.52 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: 177.31 MiB
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">islice</span><span class="p">((</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10_000_000</span><span class="p">)),</span> <span class="mi">9_000_000</span><span class="p">,</span> <span class="bp">None</span><span class="p">))</span>
</code></pre></div></div> <pre><code class="language-txt">796 ms ± 11.8 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
memory increment: -0.16 MiB
</code></pre> <hr/> <p>Observe novamente que, assim como aconteceu no caso do <code class="language-plaintext highlighter-rouge">dropwhile</code> quando a condição demora mais para ser satisfeita, usar <code class="language-plaintext highlighter-rouge">islice</code> é mais lento do que fazer com list comprehension, porém ocupa muito menos memória.</p> <h3 id="e-se-quisermos-apenas-contar-o-número-de-elementos-que-serão-gerados">E se quisermos apenas contar o número de elementos que serão gerados?</h3> <p>Suponha que queremos saber quantos elementos serão gerados a partir de uma condição. Normalmente, faríamos assim:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
<span class="n">count</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">1.02 s ± 63.6 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
increment: 0.04 MiB
</code></pre> <p>Mas o problema é que estamos armazenando uma lista inteira na memória apenas para obter seu tamanho.</p> <h3 id="podemos-fazer-melhor-3">Podemos fazer melhor?</h3> <p>Sim, criando um gerador que gere <code class="language-plaintext highlighter-rouge">1</code> toda vez que a condição for verdadeira, e somando tudo.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">count</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="mi">1</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">991 ms ± 18.9 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
increment: 0.00 MiB
</code></pre> <h2 id="outras-funções-úteis-de-itertools">Outras funções úteis de <a href="https://docs.python.org/3/library/itertools.html?highlight=itertools#module-itertools">itertools</a></h2> <p>Já introduzimos 3 das funções mais úteis: <code class="language-plaintext highlighter-rouge">dropwhile</code>, <code class="language-plaintext highlighter-rouge">islice</code> e <code class="language-plaintext highlighter-rouge">takewhile</code>. Vamos verificar outras funções úteis.</p> <h3 id="cycle"><a href="https://docs.python.org/3/library/itertools.html?highlight=itertools#itertools.cycle">cycle</a></h3> <p>Repete indefinidamente uma determinada sequência.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">itertools</span> <span class="kn">import</span> <span class="n">cycle</span>

<span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">counter</span><span class="p">,</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="nf">cycle</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">4</span><span class="p">))):</span>
  <span class="k">if</span> <span class="n">counter</span> <span class="o">==</span> <span class="mi">10</span><span class="p">:</span>
    <span class="k">break</span>

  <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">[0, 1, 2, 3, 0, 1, 2, 3, 0, 1]
</code></pre> <h3 id="repeat"><a href="https://docs.python.org/3/library/itertools.html?highlight=itertools#itertools.repeat">repeat</a></h3> <p>Repete indefinidamente um determinado valor, a menos que o argumento <code class="language-plaintext highlighter-rouge">times</code> seja especificado.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">itertools</span> <span class="kn">import</span> <span class="n">repeat</span>

<span class="n">tmp</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">repeat</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">[10, 10, 10, 10, 10]
</code></pre> <h3 id="product"><a href="https://docs.python.org/3/library/itertools.html?highlight=itertools#itertools.product">product</a></h3> <p>Equivalente a um loop for aninhado.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
      <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
        <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">sum</span><span class="p">([</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">l</span><span class="p">]))</span>

<span class="nf">print</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4]
</code></pre> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">itertools</span> <span class="kn">import</span> <span class="n">product</span>

<span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="nf">sum</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">product</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">))]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4]
</code></pre> <p>Como neste caso estamos usando a mesma sequência para todos os loops, podemos usar <code class="language-plaintext highlighter-rouge">repeat</code> para simplificar o código:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">itertools</span> <span class="kn">import</span> <span class="n">product</span>

<span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="nf">sum</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">product</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="n">repeat</span><span class="o">=</span><span class="mi">4</span><span class="p">)]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
</code></pre></div></div> <pre><code class="language-txt">[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4]
</code></pre> <h3 id="itertools-tem-todas-as-funções-combinatórias-implementadas"><a href="https://docs.python.org/3/library/itertools.html?highlight=itertools#module-itertools">itertools</a> tem todas as funções combinatórias implementadas</h3> <table> <thead> <tr> <th style="text-align: center">arranjo</th> <th style="text-align: center">permutação</th> <th style="text-align: center">combinação com repetição</th> <th style="text-align: center">combinação</th> </tr> </thead> <tbody> <tr> <td style="text-align: center">AA</td> <td style="text-align: center"> </td> <td style="text-align: center">AA</td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">AB</td> <td style="text-align: center">AB</td> <td style="text-align: center">AB</td> <td style="text-align: center">AB</td> </tr> <tr> <td style="text-align: center">AC</td> <td style="text-align: center">AC</td> <td style="text-align: center">AC</td> <td style="text-align: center">AC</td> </tr> <tr> <td style="text-align: center">AD</td> <td style="text-align: center">AD</td> <td style="text-align: center">AD</td> <td style="text-align: center">AD</td> </tr> <tr> <td style="text-align: center">BA</td> <td style="text-align: center">BA</td> <td style="text-align: center"> </td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">BB</td> <td style="text-align: center"> </td> <td style="text-align: center">BB</td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">BC</td> <td style="text-align: center">BC</td> <td style="text-align: center">BC</td> <td style="text-align: center">BC</td> </tr> <tr> <td style="text-align: center">BD</td> <td style="text-align: center">BD</td> <td style="text-align: center">BD</td> <td style="text-align: center">BD</td> </tr> <tr> <td style="text-align: center">CA</td> <td style="text-align: center">CA</td> <td style="text-align: center"> </td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">CB</td> <td style="text-align: center">CB</td> <td style="text-align: center"> </td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">CC</td> <td style="text-align: center"> </td> <td style="text-align: center">CC</td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">CD</td> <td style="text-align: center">CD</td> <td style="text-align: center">CD</td> <td style="text-align: center">CD</td> </tr> <tr> <td style="text-align: center">DA</td> <td style="text-align: center">DA</td> <td style="text-align: center"> </td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">DB</td> <td style="text-align: center">DB</td> <td style="text-align: center"> </td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">DC</td> <td style="text-align: center">DC</td> <td style="text-align: center"> </td> <td style="text-align: center"> </td> </tr> <tr> <td style="text-align: center">DD</td> <td style="text-align: center"> </td> <td style="text-align: center">DD</td> <td style="text-align: center"> </td> </tr> </tbody> </table> <h2 id="melhorando-o-código-com-functools">Melhorando o código com <a href="https://docs.python.org/3/library/functools.html?highlight=functools#module-functools">functools</a></h2> <h3 id="armazenando-chamadas-de-função-com-lru_cache">Armazenando chamadas de função com <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache">lru_cache</a></h3> <p>Vamos pegar a função de Fibonacci, por exemplo, que chama a si mesma recursivamente.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">n</span>
    <span class="k">return</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div> <p>Vamos usá-la em uma list comprehension para obter os primeiros 16 números de Fibonacci:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="nf">fib</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">16</span><span class="p">)]</span>
</code></pre></div></div> <pre><code class="language-txt">698 µs ± 152 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)
</code></pre> <p>Leva um bom tempo para executar para um número pequeno. Mas e se pudéssemos salvar automaticamente os resultados das chamadas anteriores à função? É disso que se trata a <code class="language-plaintext highlighter-rouge">lru_cache</code>. Ela armazena chamadas anteriores, com seus parâmetros fornecidos e saída calculada, como uma cache que remove os elementos menos recentemente usados (cache LRU). Dessa forma, sempre que chamarmos a função e essa chamada já tiver sido feita (e seus resultados ainda estiverem armazenados na cache), simplesmente pegamos os resultados da cache.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">functools</span> <span class="kn">import</span> <span class="n">lru_cache</span>

<span class="nd">@lru_cache</span>
<span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">n</span>
    <span class="k">return</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div> <p>Vamos tentar novamente:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="nf">fib</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">16</span><span class="p">)]</span>
</code></pre></div></div> <pre><code class="language-txt">3.34 µs ± 719 ns per loop (mean ± std. dev. of 7 runs, 10 loops each)
</code></pre> <p>Agora, vamos verificar as informações da cache:</p> <ul> <li>hits: número de vezes que a função foi chamada e os resultados já estavam lá;</li> <li>misses: número de vezes que a função foi chamada e o resultado não estava armazenado;</li> <li>maxsize: tamanho máximo permitido para a cache;</li> <li>currsize: tamanho atual da cache (resultados armazenados).</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">fib</span><span class="p">.</span><span class="nf">cache_info</span><span class="p">())</span>
</code></pre></div></div> <pre><code class="language-txt">CacheInfo(hits=1132, misses=16, maxsize=128, currsize=16)
</code></pre> <h3 id="criando-funções-com-valores-padrões-com-partial">Criando funções com valores padrões com <a href="https://docs.python.org/3/library/functools.html#functools.partial">partial</a></h3> <p>Suponha que temos uma função chamada <code class="language-plaintext highlighter-rouge">divide_by</code> que realiza a divisão. É uma função bastante genérica, mas geralmente é chamada com alguns valores específicos, como divisão por dois ou por três.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">divide_by</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
  <span class="k">return</span> <span class="n">x</span> <span class="o">/</span> <span class="n">y</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">divide_by</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">divide_by</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</code></pre></div></div> <pre><code class="language-txt">6.0
4.0
</code></pre> <p>E se, em vez de criar uma função totalmente nova, pudéssemos apenas criar assinaturas diferentes para a função, uma para cada valor mais comum de y? É para isso que serve <code class="language-plaintext highlighter-rouge">partial</code>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">functools</span> <span class="kn">import</span> <span class="n">partial</span>

<span class="n">divide_by_two</span> <span class="o">=</span> <span class="nf">partial</span><span class="p">(</span><span class="n">divide_by</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">divide_by_three</span> <span class="o">=</span> <span class="nf">partial</span><span class="p">(</span><span class="n">divide_by</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">divide_by_two</span><span class="p">(</span><span class="mi">12</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">divide_by_three</span><span class="p">(</span><span class="mi">12</span><span class="p">))</span>
</code></pre></div></div> <pre><code class="language-txt">6.0
4.0
</code></pre>]]></content><author><name></name></author><category term="python"/><category term="programming"/><category term="code"/><category term="improvement"/><category term="python"/><summary type="html"><![CDATA[Como usar funções da biblioteca padrão para melhorar seu código.]]></summary></entry><entry><title type="html">O problema da reproducibilidade de códigos de pesquisa</title><link href="https://george-gca.github.io/pt-br/blog/2022/research-code-reproducibility/" rel="alternate" type="text/html" title="O problema da reproducibilidade de códigos de pesquisa"/><published>2022-10-21T15:13:16+00:00</published><updated>2022-10-21T15:13:16+00:00</updated><id>https://george-gca.github.io/blog/2022/research-code-reproducibility</id><content type="html" xml:base="https://george-gca.github.io/blog/2022/research-code-reproducibility/"><![CDATA[<p>Todo mundo no meio de pesquisa já passou por esse problema:</p> <blockquote> <p>Você encontrou um artigo que deseja reproduzir. Você descobriu que o autor original (ou possivelmente outro pesquisador) publicou o código para executar esses experimentos. Você baixa o código, tenta executá-lo, mas não funciona. Falta trechos de código, bases de dados ou dependências. Talvez o código esteja um pouco desatualizado e você precise atualizá-lo para executar em sua máquina. Ou você precisa descobrir quais versões específicas das bibliotecas os autores usaram. Você passa horas tentando executar o código, mas sem sucesso. Você tenta entrar em contato com os autores, mas eles não respondem. Você tenta consertar o código sozinho, mas é muito complicado. Você desiste.</p> </blockquote> <p>Quem nunca ficou tão frustrado a ponto de desistir daquele código, talvez até daquele artigo? Nossa, conheço pessoas que desistiram de todo um campo de pesquisa porque não conseguiram reproduzir os resultados de um artigo. Várias vezes fui pego nesse tipo de situação, o que me fez questionar toda a parte de publicação de código. Depois de muito pensar, cheguei a uma solução parcial para esse problema.</p> <h2 id="o-principal-culpado">O principal culpado</h2> <p>Na maioria das vezes que eu não consigo executar o código de outra pessoa, é por causa de uma coisa: <strong>as versões das dependências não são especificadas</strong>.</p> <p>Claro, muitas pessoas criam algo como um <code class="language-plaintext highlighter-rouge">requirements.txt</code>, mas geralmente não têm os números das versões. Mesmo quando possuem número de versão, geralmente não é o número exato da versão. Por exemplo, em vez de <code class="language-plaintext highlighter-rouge">numpy==1.19.5</code>, está <code class="language-plaintext highlighter-rouge">numpy&gt;=1.19.5</code>. Isso não é suficiente. Se você quiser reproduzir os resultados de outra pessoa, você precisa saber <strong>exatamente</strong> qual versão de cada dependência você precisa instalar. Caso contrário, você obterá resultados diferentes. Mesmo se você especificar o número exato da versão, ainda poderá obter resultados diferentes se os autores usarem uma versão diferente da linguagem, digamos, Python, ou algumas outras dependências de baixo nível, como cuda ou cuDNN.</p> <h2 id="docker-pra-salvar-o-dia">Docker pra salvar o dia</h2> <p>É aí que entra o <a href="https://www.docker.com/">Docker</a>. O Docker é uma <a href="https://www.docker.com/resources/what-container/">tecnologia de conteinerização</a> que permite criar uma <a href="https://docs.docker.com/glossary/#image">imagem</a> que empacota todas as dependências necessárias para executar seu código. Você pode então executar seu código dentro de um <a href="https://docs.docker.com/glossary/#container">contêiner</a>, <strong>possivelmente</strong> obtendo os mesmos resultados que os autores. Fazendo uma alusão à programação orientada a objetos, <strong>imagem</strong> é a classe e <strong>contêiner</strong> é um objeto ou uma instância dessa classe. Você pode até compartilhar essa imagem com outras pessoas, para que elas também possam executar seu código. O Docker também suporta <a href="https://github.com/NVIDIA/nvidia-docker">executar código em GPUs</a>.</p> <p>Como exemplo, aqui está o <a href="https://github.com/george-gca/sr-pytorch-lightning">código base</a> que usei durante meu mestrado. Tentei ao máximo tornar o código reprodutível e extensível. Isso significa não apenas executar o modelo de IA, mas também poder criar seu próprio modelo e executá-lo com os mesmos dados e parâmetros de treinamento, para permitir comparações.</p> <p>Decidi dividir a lógica de lidar com o Docker (contido no <a href="https://github.com/george-gca/sr-pytorch-lightning/blob/main/Makefile">Makefile</a>) da execução do próprio código Python (contido no <a href="https://github.com/george-gca/sr-pytorch-lightning/blob/main/start_here.sh">start_here.sh</a>). A receita para criar a imagem do Docker está dentro do <a href="https://github.com/george-gca/sr-pytorch-lightning/blob/main/Dockerfile">Dockerfile</a>, e também disponibilizei um <a href="https://github.com/george-gca/sr-pytorch-lightning/blob/main/Dockerfile_fixed_versions">Dockerfile</a> com todas as versões das dependências definidas, como você pode ver no trecho de código abaixo. Tudo o que você pode precisar para executar o código é explicado no arquivo <a href="https://github.com/george-gca/sr-pytorch-lightning/blob/main/README.md">README</a>.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nv">DEBIAN_FRONTEND</span><span class="o">=</span>noninteractive <span class="nv">$APT_INSTALL</span> <span class="se">\</span>
        <span class="nv">bc</span><span class="o">=</span>1.07.1-2 <span class="se">\</span>
        <span class="nv">curl</span><span class="o">=</span>7.58.0-2ubuntu3.18 <span class="se">\</span>
        <span class="nv">git</span><span class="o">=</span>1:2.17.1-1ubuntu0.11 <span class="se">\</span>
        libffi-dev<span class="o">=</span>3.2.1-8 <span class="se">\</span>
        <span class="nv">rsync</span><span class="o">=</span>3.1.2-2.1ubuntu1.4 <span class="se">\</span>
        <span class="nv">wget</span><span class="o">=</span>1.19.4-1ubuntu2.2 <span class="o">&amp;&amp;</span> <span class="se">\</span>

<span class="c"># ==================================================================</span>
<span class="c"># install python libraries via pip</span>
<span class="c"># ------------------------------------------------------------------</span>

    <span class="nv">$PIP_INSTALL</span> <span class="se">\</span>
        <span class="nv">pip</span><span class="o">==</span>22.0.4 <span class="se">\</span>
        <span class="nv">setuptools</span><span class="o">==</span>62.2.0 <span class="se">\</span>
        <span class="nv">wheel</span><span class="o">==</span>0.37.1 <span class="o">&amp;&amp;</span> <span class="se">\</span>
</code></pre></div></div> <p>Para garantir a reproducibilidade, apesar dos geradores de números aleatórios, usei a função <a href="https://pytorch-lightning.readthedocs.io/en/stable/api/pytorch_lightning.utilities.seed.html#pytorch_lightning.utilities.seed.seed_everything">seed_everything</a> do PyTorch Lightning. Essa função define a semente para geradores de números pseudo-aleatórios em: <code class="language-plaintext highlighter-rouge">pytorch</code>, <code class="language-plaintext highlighter-rouge">numpy</code>, <code class="language-plaintext highlighter-rouge">python.random</code>. Ele também define as seguintes variáveis de ambiente: <code class="language-plaintext highlighter-rouge">PL_GLOBAL_SEED</code> e <code class="language-plaintext highlighter-rouge">PL_SEED_WORKERS</code>.</p> <h2 id="o-docker-não-resolve-tudo">O Docker não resolve tudo</h2> <p>Como você provavelmente está pensando, essa não é uma solução perfeita. Ainda existem problemas que podem surgir e que você precisa estar ciente, pois alguns deles estão fora do nosso controle.</p> <h3 id="alterações-nos-repositórios">Alterações nos repositórios</h3> <p>Veja, por exemplo, essa parte do <a href="https://github.com/george-gca/sr-pytorch-lightning/blob/main/Dockerfile_fixed_versions">Dockerfile</a>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># temporary solution for bug</span>
<span class="c"># see https://forums.developer.nvidia.com/t/gpg-error-http-developer-download-nvidia-com-compute-cuda-repos-ubuntu1804-x86-64/212904/3</span>
apt-key adv <span class="nt">--fetch-keys</span> https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/3bf863cc.pub <span class="o">&amp;&amp;</span> <span class="se">\</span>
apt-key adv <span class="nt">--fetch-keys</span> https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub <span class="o">&amp;&amp;</span> <span class="se">\</span>
</code></pre></div></div> <p>Esta é uma solução para um problema que encontrei no repositório da NVIDIA. Basicamente, eles estão (estavam?) em processo de rotação de suas chaves públicas GPG do repositório, que são usadas para assinar os pacotes. Isso estava causando um erro no comando <code class="language-plaintext highlighter-rouge">apt-get update</code> ao criar a imagem do Docker, e isso não estava acontecendo durante os meus experimentos, mas aconteceu quando eu decidi publicar o código.</p> <h3 id="dependências-de-dependências">Dependências de dependências</h3> <p>Às vezes, algumas versões específicas de dependências requerem versões específicas de suas próprias dependências. Isso aconteceu comigo ao especificar <code class="language-plaintext highlighter-rouge">tensorboard==2.9.0</code>, o que causou um erro ao construir a imagem do Docker. Para corrigir isso, eu precisava definir a versão apropriada do <code class="language-plaintext highlighter-rouge">protobuf</code> para instalar, mesmo meu código não usando o <code class="language-plaintext highlighter-rouge">protobuf</code> diretamente.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">prettytable</span><span class="o">==</span>3.3.0 <span class="se">\</span>
<span class="c"># specify protobuf to avoid bug with tensorboard</span>
<span class="c"># https://developers.google.com/protocol-buffers/docs/news/2022-05-06#python-updates</span>
<span class="nv">protobuf</span><span class="o">==</span>3.20 <span class="se">\</span>
pytorch-lightning<span class="o">==</span>1.6.3 <span class="se">\</span>
<span class="nv">tensorboard</span><span class="o">==</span>2.9.0 <span class="se">\</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="research-code"/><category term="research"/><category term="programming"/><category term="reproducibility"/><category term="code"/><summary type="html"><![CDATA[Uma breve visão geral do problema da reproducibilidade de códigos de pesquisa.]]></summary></entry><entry><title type="html">Criando postagens de blog traduzidas</title><link href="https://george-gca.github.io/pt-br/blog/2022/localized-blog/" rel="alternate" type="text/html" title="Criando postagens de blog traduzidas"/><published>2022-09-30T17:40:13+00:00</published><updated>2022-09-30T17:40:13+00:00</updated><id>https://george-gca.github.io/blog/2022/localized-blog</id><content type="html" xml:base="https://george-gca.github.io/blog/2022/localized-blog/"><![CDATA[<p>Este post faz parte de uma série de posts que explicam como configurar seu próprio site baseado no tema al-folio e adicionar suporte a uma segunda língua:</p> <ul> <li><a href="/pt-br/blog/2022/running-local-al-folio/">Executando localmente seu próprio site al-folio</a></li> <li><a href="/pt-br/blog/2022/dual-language-al-folio/">Tornando seu al-folio em um site com dois idiomas</a></li> <li><a href="/pt-br/blog/2022/localized-cv/">Criando páginas de CV traduzidas</a></li> <li><a href="/pt-br/blog/2022/localized-projects/">Criando páginas de projetos traduzidas</a></li> <li>Criando postagens de blog traduzidas</li> </ul> <hr/> <p>Nós <a href="/pt-br/blog/2022/running-local-al-folio/">criamos um site al-folio local</a>, <a href="/pt-br/blog/2022/dual-language-al-folio/">adicionamos suporte para outro idioma nele</a>, <a href="/pt-br/blog/2022/localized-cv/">criamos páginas de CV</a> e <a href="/pt-br/blog/2022/localized-projects/">páginas de projetos</a> traduzidas. Agora, vamos traduzir a parte do blog.</p> <h2 id="criando-a-estrutura">Criando a estrutura</h2> <p>Se você for para a seção de blog do seu site al-folio, perceberá que ela está bastante vazia, embora haja postagens no modelo. Na verdade, o <a href="https://github.com/kurtsson/jekyll-multiple-languages-plugin">Jekyll Multiple Languages ​​Plugin</a> já suporta <a href="https://github.com/kurtsson/jekyll-multiple-languages-plugin#57-creating-posts">postagens de blog localizadas</a>. Ele só não está exibindo porque não está encontrando as postagens. Então, vamos criar a estrutura correta para eles. Crie um diretório <code class="language-plaintext highlighter-rouge">_posts/</code> dentro de cada idioma no diretório <code class="language-plaintext highlighter-rouge">_i18n/</code> e copie o conteúdo do diretório <code class="language-plaintext highlighter-rouge">_posts/</code> da raiz do site para os diretórios de idioma. Então, por exemplo, se você tiver um diretório <code class="language-plaintext highlighter-rouge">_posts/</code> com o seguinte conteúdo:</p> <ul> <li>_posts/2015-03-15-formatting-and-links.md</li> <li>_posts/2015-05-15-images.md</li> <li>_posts/2015-07-15-code.md</li> <li>_posts/2015-10-20-comments.md</li> <li>_posts/2015-10-20-math.md</li> <li>_posts/2018-12-22-distill.md</li> <li>_posts/2020-09-28-github-metadata.md</li> <li>_posts/2020-09-28-twitter.md</li> <li>_posts/2021-07-04-diagrams.md</li> <li>_posts/2022-02-01-redirect.md</li> </ul> <p>Você deve criar a seguinte estrutura para todos os seus idiomas, por exemplo, para o idioma inglês:</p> <ul> <li>_i18n/en/_posts/2015-03-15-formatting-and-links.md</li> <li>_i18n/en/_posts/2015-05-15-images.md</li> <li>_i18n/en/_posts/2015-07-15-code.md</li> <li>_i18n/en/_posts/2015-10-20-comments.md</li> <li>_i18n/en/_posts/2015-10-20-math.md</li> <li>_i18n/en/_posts/2018-12-22-distill.md</li> <li>_i18n/en/_posts/2020-09-28-github-metadata.md</li> <li>_i18n/en/_posts/2020-09-28-twitter.md</li> <li>_i18n/en/_posts/2021-07-04-diagrams.md</li> <li>_i18n/en/_posts/2022-02-01-redirect.md</li> </ul> <p>Crie isso, traduza o conteúdo das páginas e agora o modelo mostrará as postagens do blog. Fácil, certo? Ééééé, faltam dois pequenos detalhes: o formato da data e o tempo de leitura. A má notícia é que o Jekyll não oferece suporte nativo a formatos de data por idioma. A boa notícia é que não é tão difícil criar. Vamos começar com o formato da data.</p> <h2 id="traduzindo-o-formato-da-data">Traduzindo o formato da data</h2> <p>Existem dois formatos principais de data utilizados no template: na lista de posts e dentro dos posts, com o formato <code class="language-plaintext highlighter-rouge">28 de setembro, 2020</code>, e ao filtrar os posts (ex.: por tag), com o formato <code class="language-plaintext highlighter-rouge">28 de set, 2020</code>. A maneira mais fácil que encontrei de traduzi-los é primeiro traduzindo manualmente os nomes dos meses. Para isso, adicione a seguinte seção aos seus arquivos de idioma (<code class="language-plaintext highlighter-rouge">_i18n/en.yml</code> e <code class="language-plaintext highlighter-rouge">_i18n/pt-br.yml</code>), traduzindo os nomes dos meses para o seu idioma:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">months</span><span class="pi">:</span>
  <span class="na">long</span><span class="pi">:</span>
    <span class="na">january</span><span class="pi">:</span> <span class="s">January</span>
    <span class="na">february</span><span class="pi">:</span> <span class="s">February</span>
    <span class="na">march</span><span class="pi">:</span> <span class="s">March</span>
    <span class="na">april</span><span class="pi">:</span> <span class="s">April</span>
    <span class="na">may</span><span class="pi">:</span> <span class="s">May</span>
    <span class="na">june</span><span class="pi">:</span> <span class="s">June</span>
    <span class="na">july</span><span class="pi">:</span> <span class="s">July</span>
    <span class="na">august</span><span class="pi">:</span> <span class="s">August</span>
    <span class="na">september</span><span class="pi">:</span> <span class="s">September</span>
    <span class="na">october</span><span class="pi">:</span> <span class="s">October</span>
    <span class="na">november</span><span class="pi">:</span> <span class="s">November</span>
    <span class="na">december</span><span class="pi">:</span> <span class="s">December</span>
  <span class="na">short</span><span class="pi">:</span>
    <span class="na">january</span><span class="pi">:</span> <span class="s">Jan</span>
    <span class="na">february</span><span class="pi">:</span> <span class="s">Feb</span>
    <span class="na">march</span><span class="pi">:</span> <span class="s">Mar</span>
    <span class="na">april</span><span class="pi">:</span> <span class="s">Apr</span>
    <span class="na">may</span><span class="pi">:</span> <span class="s">May</span>
    <span class="na">june</span><span class="pi">:</span> <span class="s">Jun</span>
    <span class="na">july</span><span class="pi">:</span> <span class="s">Jul</span>
    <span class="na">august</span><span class="pi">:</span> <span class="s">Aug</span>
    <span class="na">september</span><span class="pi">:</span> <span class="s">Sep</span>
    <span class="na">october</span><span class="pi">:</span> <span class="s">Oct</span>
    <span class="na">november</span><span class="pi">:</span> <span class="s">Nov</span>
    <span class="na">december</span><span class="pi">:</span> <span class="s">Dec</span>
</code></pre></div></div> <p>Como as datas são usadas em vários locais, vamos criar uma função para reutilizar o código. Crie o arquivo <code class="language-plaintext highlighter-rouge">_includes/date_format.html</code> com o seguinte código:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">months</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'january|february|march|april|may|june|july|august|september|october|november|december'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="w"> </span><span class="s1">'|'</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">m</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">include</span><span class="p">.</span><span class="nv">date_from</span><span class="p">.</span><span class="nv">date</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">date</span><span class="p">:</span><span class="w"> </span><span class="s1">'%-m'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">minus</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">day</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">include</span><span class="p">.</span><span class="nv">date_from</span><span class="p">.</span><span class="nv">date</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">date</span><span class="p">:</span><span class="w"> </span><span class="s1">'%d'</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">month</span><span class="w"> </span><span class="cp">%}</span>months.<span class="cp">{{</span><span class="w"> </span><span class="nv">include</span><span class="p">.</span><span class="nv">format</span><span class="w"> </span><span class="cp">}}</span>.<span class="cp">{{</span><span class="w"> </span><span class="nv">months</span><span class="p">[</span><span class="nv">m</span><span class="p">]</span><span class="w"> </span><span class="cp">}}{%</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">year</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">include</span><span class="p">.</span><span class="nv">date_from</span><span class="p">.</span><span class="nv">date</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">date</span><span class="p">:</span><span class="w"> </span><span class="s1">'%Y'</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">if</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">lang</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">'en'</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{%-</span><span class="w"> </span><span class="nt">t</span><span class="w"> </span><span class="nv">month</span><span class="w"> </span><span class="cp">%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">day</span><span class="w"> </span><span class="cp">}}</span>, <span class="cp">{{</span><span class="w"> </span><span class="nv">year</span><span class="w"> </span><span class="cp">-}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">else</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{{-</span><span class="w"> </span><span class="nv">day</span><span class="w"> </span><span class="cp">}}</span> de <span class="cp">{%</span><span class="w"> </span><span class="nt">t</span><span class="w"> </span><span class="nv">month</span><span class="w"> </span><span class="cp">%}</span>, <span class="cp">{{</span><span class="w"> </span><span class="nv">year</span><span class="w"> </span><span class="cp">-}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">endif</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>Este código define uma função que extrai o mês, dia e ano da variável <code class="language-plaintext highlighter-rouge">date_from</code>, formata de acordo com <code class="language-plaintext highlighter-rouge">format</code> e retorna a string traduzida formatada. Observe que, para acessar as variáveis fornecidas, devemos nos referir a elas precedidas de <code class="language-plaintext highlighter-rouge">include.</code>. A variável <code class="language-plaintext highlighter-rouge">format</code> pode ser <code class="language-plaintext highlighter-rouge">long</code> ou <code class="language-plaintext highlighter-rouge">short</code>, como definimos acima, e a variável <code class="language-plaintext highlighter-rouge">date_from</code> deve ter um objeto de data dentro dela. A função também considera o idioma atual. Agora, vamos chamar a função com os parâmetros apropriados. Dentro do arquivo <code class="language-plaintext highlighter-rouge">blog/index.html</code>, faça as seguintes alterações:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- {{ post.date | date: '%B %-d, %Y' }} --&gt;</span>
{% include date_format.html format="long" date_from=post %}
</code></pre></div></div> <p>A lista de postagens agora exibirá o formato de data corretamente. Basta fazer as mesmas alterações para todos os outros lugares onde o formato da data aparece, como as páginas de filtros, alterando o formato do mês para <code class="language-plaintext highlighter-rouge">"short"</code> quando necessário, e também fornecendo o parâmetro <code class="language-plaintext highlighter-rouge">date_from</code> correto. Por exemplo, para o arquivo <code class="language-plaintext highlighter-rouge">_layouts/archive-category.html</code> a mudança será:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- &lt;th scope="row"&gt;{{ post.date | date: "%b %-d, %Y" }}&lt;/th&gt; --&gt;</span>
<span class="nt">&lt;th</span> <span class="na">scope=</span><span class="s">"row"</span><span class="nt">&gt;</span>{% include date_format.html format="short" date_from=post %}<span class="nt">&lt;/th&gt;</span>
</code></pre></div></div> <h2 id="traduzindo-o-tempo-de-leitura">Traduzindo o tempo de leitura</h2> <p>Agora, vamos traduzir o tempo de leitura. Faça as seguintes alterações no arquivo <code class="language-plaintext highlighter-rouge">blog/index.html</code>:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- {{ read_time }} min read &amp;nbsp; &amp;middot; &amp;nbsp; --&gt;</span>
{% if site.lang == 'en' %}{{ read_time }} min read{% else %}Leitura de {{ read_time }} min{% endif %} <span class="ni">&amp;nbsp;</span> <span class="ni">&amp;middot;</span> <span class="ni">&amp;nbsp;</span>
</code></pre></div></div> <h2 id="corrigindo-a-navegação-nos-arquivos-do-blog">Corrigindo a navegação nos arquivos do blog</h2> <p>Ao clicar para filtrar as postagens do blog por tag, ano ou categoria, a página mostra as postagens, mas a navegação não funciona como deveria. Isso ocorre porque essas navegações ainda não dão suporte à tradução. Para corrigir isso, modifique as seguintes linhas nos arquivos <code class="language-plaintext highlighter-rouge">_layouts/archive-category.html</code>, <code class="language-plaintext highlighter-rouge">_layouts/archive-tag.html</code> e <code class="language-plaintext highlighter-rouge">_layouts/archive-year.html</code>:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- &lt;a class="post-link" href="{{ post.url | relative_url }}"&gt;{{ post.title }}&lt;/a&gt; --&gt;</span>
<span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"post-link"</span> <span class="na">href=</span><span class="s">"{{ post.url | prepend: site.baseurl }}"</span><span class="nt">&gt;</span>{{ post.title }}<span class="nt">&lt;/a&gt;</span>
</code></pre></div></div> <p>Também mude a seguinte linha no arquivo <code class="language-plaintext highlighter-rouge">blog/index.html</code>:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- &lt;i class="fas fa-hashtag fa-sm"&gt;&lt;/i&gt; &lt;a href="{{ tag | prepend: '/blog/tag/' | relative_url }}"&gt;{{ tag }}&lt;/a&gt; --&gt;</span>
<span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">"fas fa-hashtag fa-sm"</span><span class="nt">&gt;&lt;/i&gt;</span> <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{{ tag | prepend: '/blog/tag/' | prepend: site.baseurl }}"</span><span class="nt">&gt;</span>{{ tag }}<span class="nt">&lt;/a&gt;</span>
</code></pre></div></div> <h2 id="corrigindo-a-paginação">Corrigindo a paginação</h2> <p>Se o seu blog tiver postagens suficientes para habilitar mais páginas com resultados (paginação), você perceberá que isso ainda não está traduzido. Para corrigir, primeiro precisamos criar traduções para os termos <code class="language-plaintext highlighter-rouge">Older</code> e <code class="language-plaintext highlighter-rouge">Newer</code> nos arquivos de idioma <code class="language-plaintext highlighter-rouge">_i18n/en.yml</code> e <code class="language-plaintext highlighter-rouge">_i18n/pt-br.yml</code>, respectivamente:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">pagination</span><span class="pi">:</span>
  <span class="na">newer</span><span class="pi">:</span> <span class="s">Newer</span>
  <span class="na">older</span><span class="pi">:</span> <span class="s">Older</span>
</code></pre></div></div> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">pagination</span><span class="pi">:</span>
  <span class="na">newer</span><span class="pi">:</span> <span class="s">Recentes</span>
  <span class="na">older</span><span class="pi">:</span> <span class="s">Antigas</span>
</code></pre></div></div> <p>Em seguida, mudamos todos os usos de <code class="language-plaintext highlighter-rouge">relative_url</code> para <code class="language-plaintext highlighter-rouge">prepend: site.baseurl</code> no arquivo <code class="language-plaintext highlighter-rouge">_includes/pagination.html</code>, para que ele lide com as URLs no idioma correto. Além disso, substitua as palavras “Newer” e “Older” pela sua tradução correspondente do arquivo de idioma:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{%- if paginator.total_pages &gt; 1 -%}
<span class="nt">&lt;nav</span> <span class="na">aria-label=</span><span class="s">"Blog page naviation"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"pagination pagination-lg justify-content-center"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"page-item {% unless paginator.previous_page %}disabled{% endunless %}"</span><span class="nt">&gt;</span>
      <span class="c">&lt;!-- &lt;a class="page-link" href="{{ paginator.previous_page_path | relative_url }}" tabindex="-1" aria-disabled="{{ paginator.previous_page }}"&gt;Newer&lt;/a&gt; --&gt;</span>
      <span class="nt">&lt;a</span>
        <span class="na">class=</span><span class="s">"page-link"</span>
        <span class="na">href=</span><span class="s">"{{ paginator.previous_page_path |  prepend: site.baseurl }}"</span>
        <span class="na">tabindex=</span><span class="s">"-1"</span>
        <span class="na">aria-disabled=</span><span class="s">"{{ paginator.previous_page }}"</span>
        <span class="nt">&gt;</span>{% t pagination.newer %}<span class="nt">&lt;/a</span>
      <span class="nt">&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
    {%- if paginator.page_trail -%} {% for trail in paginator.page_trail -%}
    <span class="c">&lt;!-- &lt;li class="page-item {% if page.url == trail.path %}active{% endif %}"&gt;&lt;a class="page-link" href="{{ trail.path | relative_url }}" title="{{trail.title}}"&gt;{{ trail.num }}&lt;/a&gt;&lt;/li&gt; --&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"page-item {% if page.url == trail.path %}active{% endif %}"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"page-link"</span> <span class="na">href=</span><span class="s">"{{ trail.path | prepend: site.baseurl }}"</span> <span class="na">title=</span><span class="s">"{{trail.title}}"</span><span class="nt">&gt;</span>{{ trail.num }}<span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
    {% endfor -%} {%- endif -%}
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"page-item {% unless paginator.next_page %}disabled{% endunless %}"</span><span class="nt">&gt;</span>
      <span class="c">&lt;!-- &lt;a class="page-link" href="{{ paginator.next_page_path | relative_url }}"&gt;Older&lt;/a&gt; --&gt;</span>
      <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"page-link"</span> <span class="na">href=</span><span class="s">"{{ paginator.next_page_path | prepend: site.baseurl }}"</span><span class="nt">&gt;</span>{% t pagination.older %}<span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/nav&gt;</span>
{%- endif -%}
</code></pre></div></div> <h2 id="corrigindo-o-título-da-página-no-navegador">Corrigindo o título da página no navegador</h2> <p>Se você filtrar as postagens do seu blog por ano, notará que o ano não é exibido no título do navegador. Para corrigir isso, modifique as seguintes linhas no arquivo <code class="language-plaintext highlighter-rouge">_includes/metadata.html</code>:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">if</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">'/blog/index.html'</span><span class="w"> </span><span class="cp">%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">blog_nav_title</span><span class="w"> </span><span class="cp">}}</span> | <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">elsif</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="ow">contains</span><span class="w"> </span><span class="s1">'/blog/'</span><span class="w"> </span><span class="cp">%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span> | <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">elsif</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="ow">contains</span><span class="w"> </span><span class="s1">'Announcement'</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">elsif</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s1">'blank'</span><span class="w"> </span><span class="ow">and</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s1">'/'</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{%</span><span class="w"> </span><span class="nt">t</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="cp">%}</span> | <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">else</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">endif</span><span class="w"> </span><span class="cp">-%}</span>
</code></pre></div></div> <p>por essas:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">if</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">'/blog/index.html'</span><span class="w"> </span><span class="cp">%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">blog_nav_title</span><span class="w"> </span><span class="cp">}}</span> | <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">elsif</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="ow">contains</span><span class="w"> </span><span class="s1">'/blog/'</span><span class="w"> </span><span class="cp">%}</span>
  <span class="cp">{%-</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">blog_year</span><span class="w"> </span><span class="cp">-%}{{</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">slice</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">11</span><span class="w"> </span><span class="cp">}}{%-</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{%-</span><span class="w"> </span><span class="nt">if</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="nv">blog_year</span><span class="w"> </span><span class="cp">-%}</span>
    <span class="cp">{{</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">date</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">date</span><span class="p">:</span><span class="w"> </span><span class="s1">'%Y'</span><span class="w"> </span><span class="cp">}}</span> | <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
  <span class="cp">{%-</span><span class="w"> </span><span class="nt">else</span><span class="w"> </span><span class="cp">-%}</span>
    <span class="cp">{{</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span> | <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
  <span class="cp">{%-</span><span class="w"> </span><span class="nt">endif</span><span class="w"> </span><span class="cp">-%}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">elsif</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s1">'blank'</span><span class="w"> </span><span class="ow">and</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s1">'/'</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{%-</span><span class="w"> </span><span class="nt">if</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="ow">contains</span><span class="w"> </span><span class="s1">'Announcement'</span><span class="w"> </span><span class="cp">-%}</span>
    <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
  <span class="cp">{%-</span><span class="w"> </span><span class="nt">else</span><span class="w"> </span><span class="cp">-%}</span>
    <span class="cp">{%</span><span class="w"> </span><span class="nt">t</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="cp">%}</span> | <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
  <span class="cp">{%-</span><span class="w"> </span><span class="nt">endif</span><span class="w"> </span><span class="cp">-%}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">else</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">endif</span><span class="w"> </span><span class="cp">-%}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="website"/><category term="development"/><category term="al-folio"/><category term="website"/><category term="jekyll"/><category term="localization"/><category term="languages"/><summary type="html"><![CDATA[Como criar um blog traduzido no seu site al-folio.]]></summary></entry><entry><title type="html">Criando páginas de projetos traduzidas</title><link href="https://george-gca.github.io/pt-br/blog/2022/localized-projects/" rel="alternate" type="text/html" title="Criando páginas de projetos traduzidas"/><published>2022-09-30T11:57:13+00:00</published><updated>2022-09-30T11:57:13+00:00</updated><id>https://george-gca.github.io/blog/2022/localized-projects</id><content type="html" xml:base="https://george-gca.github.io/blog/2022/localized-projects/"><![CDATA[<p>Este post faz parte de uma série de posts que explicam como configurar seu próprio site baseado no tema al-folio e adicionar suporte a uma segunda língua:</p> <ul> <li><a href="/pt-br/blog/2022/running-local-al-folio/">Executando localmente seu próprio site al-folio</a></li> <li><a href="/pt-br/blog/2022/dual-language-al-folio/">Tornando seu al-folio em um site com dois idiomas</a></li> <li><a href="/pt-br/blog/2022/localized-cv/">Criando páginas de CV traduzidas</a></li> <li>Criando páginas de projetos traduzidas</li> <li><a href="/pt-br/blog/2022/localized-blog/">Criando postagens de blog traduzidas</a></li> </ul> <hr/> <p>Nós <a href="/pt-br/blog/2022/running-local-al-folio/">criamos um site al-folio local</a>, <a href="/pt-br/blog/2022/dual-language-al-folio/">adicionamos suporte para outro idioma nele</a> e <a href="/pt-br/blog/2022/localized-cv/">criamos páginas de CV traduzidas</a>. Agora, vamos criar a versão traduzida da página Projetos.</p> <h2 id="traduzindo-as-descrições-das-páginas">Traduzindo as descrições das páginas</h2> <p>Vamos primeiro localizar todas as descrições das páginas. Isso começará com a criação das chaves nos arquivos <code class="language-plaintext highlighter-rouge">_i18n/en.yml</code> e <code class="language-plaintext highlighter-rouge">_i18n/pt-br.yml</code>, e movendo para lá o conteúdo referido das páginas. Então, vamos começar criando as descrições tanto na raiz do arquivo quanto dentro da chave <code class="language-plaintext highlighter-rouge">projects</code>. O novo conteúdo do arquivo <code class="language-plaintext highlighter-rouge">_i18n/en.yml</code> será:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">titles</span><span class="pi">:</span>
  <span class="na">about</span><span class="pi">:</span> <span class="s">about</span>
  <span class="na">blog</span><span class="pi">:</span> <span class="s">blog</span>
  <span class="na">cv</span><span class="pi">:</span> <span class="s">cv</span>
  <span class="na">news</span><span class="pi">:</span> <span class="s">news</span>
  <span class="na">projects</span><span class="pi">:</span> <span class="s">projects</span>
  <span class="na">publications</span><span class="pi">:</span> <span class="s">publications</span>
  <span class="na">repositories</span><span class="pi">:</span> <span class="s">repositories</span>
  <span class="na">teaching</span><span class="pi">:</span> <span class="s">teaching</span>
  <span class="na">submenus</span><span class="pi">:</span> <span class="s">submenus</span>
  <span class="na">unk</span><span class="pi">:</span> <span class="s">page not found</span>
<span class="na">descriptions</span><span class="pi">:</span>
  <span class="na">about</span><span class="pi">:</span> <span class="s">about me</span>
  <span class="na">blog</span><span class="pi">:</span> <span class="s">blogging</span>
  <span class="na">publications</span><span class="pi">:</span> <span class="s">publications by categories in reversed chronological order. generated by jekyll-scholar.</span>
  <span class="na">projects</span><span class="pi">:</span> <span class="s">A growing collection of your cool projects.</span>
  <span class="na">repositories</span><span class="pi">:</span> <span class="s">Edit the `_data/repositories.yml` and change the `github_users` and `github_repos` lists to include your own GitHub profile and repositories.</span>
  <span class="na">teaching</span><span class="pi">:</span> <span class="s">Materials for courses you taught. Replace this text with your description.</span>
  <span class="na">unk</span><span class="pi">:</span> <span class="s">Looks like there has been a mistake. Nothing exists here.</span>
<span class="na">projects</span><span class="pi">:</span>
  <span class="na">titles</span><span class="pi">:</span>
    <span class="na">project1</span><span class="pi">:</span> <span class="s">Project </span><span class="m">1</span>
    <span class="na">project2</span><span class="pi">:</span> <span class="s">Project </span><span class="m">2</span>
    <span class="na">project3</span><span class="pi">:</span> <span class="s">Project </span><span class="m">3</span>
    <span class="na">project4</span><span class="pi">:</span> <span class="s">Project </span><span class="m">4</span>
    <span class="na">project5</span><span class="pi">:</span> <span class="s">Project </span><span class="m">5</span>
    <span class="na">project6</span><span class="pi">:</span> <span class="s">Project </span><span class="m">6</span>
  <span class="na">descriptions</span><span class="pi">:</span>
    <span class="na">project1</span><span class="pi">:</span> <span class="s">a project with a background image</span>
    <span class="na">project2</span><span class="pi">:</span> <span class="s">a project with a background image</span>
    <span class="na">project3</span><span class="pi">:</span> <span class="s">a project that redirects to another website</span>
    <span class="na">project4</span><span class="pi">:</span> <span class="s">another without an image</span>
    <span class="na">project5</span><span class="pi">:</span> <span class="s">a project with a background image</span>
    <span class="na">project6</span><span class="pi">:</span> <span class="s">a project with no image</span>
</code></pre></div></div> <p>E para o <code class="language-plaintext highlighter-rouge">_i18n/pt-br.yml</code>:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">titles</span><span class="pi">:</span>
  <span class="na">about</span><span class="pi">:</span> <span class="s">sobre</span>
  <span class="na">blog</span><span class="pi">:</span> <span class="s">blog</span>
  <span class="na">cv</span><span class="pi">:</span> <span class="s">cv</span>
  <span class="na">news</span><span class="pi">:</span> <span class="s">novidades</span>
  <span class="na">projects</span><span class="pi">:</span> <span class="s">projetos</span>
  <span class="na">publications</span><span class="pi">:</span> <span class="s">publicações</span>
  <span class="na">repositories</span><span class="pi">:</span> <span class="s">repositórios</span>
  <span class="na">teaching</span><span class="pi">:</span> <span class="s">ensino</span>
  <span class="na">submenus</span><span class="pi">:</span> <span class="s">submenus</span>
  <span class="na">unk</span><span class="pi">:</span> <span class="s">página não encontrada</span>
<span class="na">descriptions</span><span class="pi">:</span>
  <span class="na">about</span><span class="pi">:</span> <span class="s">sobre</span>
  <span class="na">blog</span><span class="pi">:</span> <span class="s">blogging</span>
  <span class="na">publications</span><span class="pi">:</span> <span class="s">publicações por categoria em ordem cronológica reversa. gerado pelo jekyll-scholar.</span>
  <span class="na">projects</span><span class="pi">:</span> <span class="s">Uma crescente coleção de seus projetos interessantes.</span>
  <span class="na">repositories</span><span class="pi">:</span> <span class="s">Edite o `_data/repositories.yml` e mude as listas `github_users` e `github_repos` para incluir seu próprio perfil do GitHub e repositórios.</span>
  <span class="na">teaching</span><span class="pi">:</span> <span class="s">Materiais de cursos que você ministrou. Substitua esse texto com sua descrição.</span>
  <span class="na">unk</span><span class="pi">:</span> <span class="s">Parece que ocorreu um erro. Não existe nada aqui.</span>
<span class="na">projects</span><span class="pi">:</span>
  <span class="na">titles</span><span class="pi">:</span>
    <span class="na">project1</span><span class="pi">:</span> <span class="s">Projeto </span><span class="m">1</span>
    <span class="na">project2</span><span class="pi">:</span> <span class="s">Projeto </span><span class="m">2</span>
    <span class="na">project3</span><span class="pi">:</span> <span class="s">Projeto </span><span class="m">3</span>
    <span class="na">project4</span><span class="pi">:</span> <span class="s">Projeto </span><span class="m">4</span>
    <span class="na">project5</span><span class="pi">:</span> <span class="s">Projeto </span><span class="m">5</span>
    <span class="na">project6</span><span class="pi">:</span> <span class="s">Projeto </span><span class="m">6</span>
  <span class="na">descriptions</span><span class="pi">:</span>
    <span class="na">project1</span><span class="pi">:</span> <span class="s">um projeto com imagem de fundo</span>
    <span class="na">project2</span><span class="pi">:</span> <span class="s">um projeto com imagem de fundo</span>
    <span class="na">project3</span><span class="pi">:</span> <span class="s">um projeto que redireciona pra outro website</span>
    <span class="na">project4</span><span class="pi">:</span> <span class="s">outro sem imagem</span>
    <span class="na">project5</span><span class="pi">:</span> <span class="s">um projeto com imagem de fundo</span>
    <span class="na">project6</span><span class="pi">:</span> <span class="s">um projeto sem imagem</span>
</code></pre></div></div> <p>Em seguida, atualize todas as páginas para usar as novas chaves. Essas são: <code class="language-plaintext highlighter-rouge">404.html</code>, <code class="language-plaintext highlighter-rouge">_pages/projects.md</code>, <code class="language-plaintext highlighter-rouge">_pages/publications.md</code>, <code class="language-plaintext highlighter-rouge">_pages/repositories.md</code>, <code class="language-plaintext highlighter-rouge">_pages/teaching.md</code>, e todos os projetos dentro do diretório <code class="language-plaintext highlighter-rouge">_projects/</code>. Por exemplo, a nova descrição em <code class="language-plaintext highlighter-rouge">404.html</code> será:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>description: descriptions.unk
</code></pre></div></div> <p>e em <code class="language-plaintext highlighter-rouge">_projects/1_project.md</code>:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>description: projects.descriptions.project1
</code></pre></div></div> <p>Além disso, atualize o <code class="language-plaintext highlighter-rouge">_layouts/cv.html</code> e <code class="language-plaintext highlighter-rouge">_layouts/page.html</code> para exibir apenas a descrição da tradução se uma descrição for definida no arquivo markdown. O novo <code class="language-plaintext highlighter-rouge">_layouts/page.html</code> terá:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- &lt;p class="post-description"&gt;{{ page.description }}&lt;/p&gt; --&gt;</span>
<span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"post-description"</span><span class="nt">&gt;</span>{% if page.description %}{% t page.description %}{% endif %}<span class="nt">&lt;/p&gt;</span>
</code></pre></div></div> <p>Agora as descrições também devem aparecer traduzidas. Os títulos e as descrições dos projetos quando um projeto é aberto também devem estar traduzidos, mas não na página de visão geral dos projetos. Então, vamos corrigir isso.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2022-09-30-localized-projects/not_localized_projects_overview-480.webp 480w,/assets/img/blog/2022-09-30-localized-projects/not_localized_projects_overview-800.webp 800w,/assets/img/blog/2022-09-30-localized-projects/not_localized_projects_overview-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blog/2022-09-30-localized-projects/not_localized_projects_overview.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> A visão geral dos projetos ainda não está funcionando. </div> <h2 id="traduzindo-a-visão-geral-dos-projetos">Traduzindo a visão geral dos projetos</h2> <p>Quando você abre o arquivo <code class="language-plaintext highlighter-rouge">_pages/projects.md</code>, percebe que ele possui mais código do que um arquivo markdown normal. Os autores decidiram chamar aqui o código html para construir o layout principal da página de visão geral. As partes interessantes são estas:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% if page.horizontal -%}
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row row-cols-2"</span><span class="nt">&gt;</span>{%- for project in sorted_projects -%} {% include projects_horizontal.html %} {%- endfor %}<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
{%- else -%}
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"grid"</span><span class="nt">&gt;</span>{%- for project in sorted_projects -%} {% include projects.html %} {%- endfor %}<span class="nt">&lt;/div&gt;</span>
{%- endif -%}
</code></pre></div></div> <p>Essas partes significam que há um layout horizontal e vertical para a página de visão geral dos projetos. O layout horizontal é usado quando o atributo <code class="language-plaintext highlighter-rouge">horizontal</code> é definido como <code class="language-plaintext highlighter-rouge">true</code> no cabeçalho desta página, e o vertical, caso contrário. Esses layouts podem ser encontrados em <code class="language-plaintext highlighter-rouge">_includes/projects_horizontal.html</code> e <code class="language-plaintext highlighter-rouge">_includes/projects.html</code>, respectivamente. Esses são os arquivos que precisamos atualizar para traduzir a página de visão geral dos projetos. As mudanças serão basicamente as mesmas nos dois arquivos: precisamos adicionar a tag <code class="language-plaintext highlighter-rouge">t</code> aos títulos e descrições dos projetos, e também atualizar corretamente os links para eles. As mudanças no <code class="language-plaintext highlighter-rouge">_includes/projects_horizontal.html</code> serão:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- &lt;a href="{{ project.url | relative_url }}"&gt; --&gt;</span>
<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{{ project.url | prepend: site.baseurl }}"</span><span class="nt">&gt;</span>
  <span class="c">&lt;!-- &lt;h3 class="card-title text-lowercase"&gt;{{ project.title }}&lt;/h3&gt;
&lt;p class="card-text"&gt;{{ project.description }}&lt;/p&gt; --&gt;</span>

  <span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">"card-title text-lowercase"</span><span class="nt">&gt;</span>{% t project.title %}<span class="nt">&lt;/h3&gt;</span>
  <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"card-text"</span><span class="nt">&gt;</span>{% t project.description %}<span class="nt">&lt;/p&gt;&lt;/a</span>
<span class="nt">&gt;</span>
</code></pre></div></div> <p>Agora, a visão geral dos projetos é exibida corretamente. Mas, se você olhar de perto, notará que as categorias de projetos não foram traduzidas. Vamos consertar isso.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2022-09-30-localized-projects/localized_projects_overview-480.webp 480w,/assets/img/blog/2022-09-30-localized-projects/localized_projects_overview-800.webp 800w,/assets/img/blog/2022-09-30-localized-projects/localized_projects_overview-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blog/2022-09-30-localized-projects/localized_projects_overview.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Visão geral dos projetos agora funcionando. </div> <h2 id="traduzindo-as-categorias-de-projetos">Traduzindo as categorias de projetos</h2> <p>As categorias somente serão traduzidas ao serem exibidas, não dentro dos cabeçalhos dos projetos. Isso significa que, ao criar um projeto, você ainda usará as categorias em inglês, como em <code class="language-plaintext highlighter-rouge">_projects/1_project.md</code>:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">category</span><span class="pi">:</span> <span class="s">work</span>
</code></pre></div></div> <p>Para isso, crie a versão localizada das categorias para os dois idiomas. Vamos manter isso dentro da chave <code class="language-plaintext highlighter-rouge">projects</code>, de modo que agora fique assim em <code class="language-plaintext highlighter-rouge">_i18n/en.yml</code>:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">projects</span><span class="pi">:</span>
  <span class="na">titles</span><span class="pi">:</span>
    <span class="na">project1</span><span class="pi">:</span> <span class="s">Project </span><span class="m">1</span>
    <span class="na">project2</span><span class="pi">:</span> <span class="s">Project </span><span class="m">2</span>
    <span class="na">project3</span><span class="pi">:</span> <span class="s">Project </span><span class="m">3</span>
    <span class="na">project4</span><span class="pi">:</span> <span class="s">Project </span><span class="m">4</span>
    <span class="na">project5</span><span class="pi">:</span> <span class="s">Project </span><span class="m">5</span>
    <span class="na">project6</span><span class="pi">:</span> <span class="s">Project </span><span class="m">6</span>
  <span class="na">descriptions</span><span class="pi">:</span>
    <span class="na">project1</span><span class="pi">:</span> <span class="s">a project with a background image</span>
    <span class="na">project2</span><span class="pi">:</span> <span class="s">a project with a background image</span>
    <span class="na">project3</span><span class="pi">:</span> <span class="s">a project that redirects to another website</span>
    <span class="na">project4</span><span class="pi">:</span> <span class="s">another without an image</span>
    <span class="na">project5</span><span class="pi">:</span> <span class="s">a project with a background image</span>
    <span class="na">project6</span><span class="pi">:</span> <span class="s">a project with no image</span>
  <span class="na">categories</span><span class="pi">:</span>
    <span class="na">fun</span><span class="pi">:</span> <span class="s">fun</span>
    <span class="na">work</span><span class="pi">:</span> <span class="s">work</span>
</code></pre></div></div> <p>Agora, em <code class="language-plaintext highlighter-rouge">_pages/projects.md</code>, precisamos pegar a categoria correta dentro do laço, e então sua tradução. Para isso, usaremos a tag <code class="language-plaintext highlighter-rouge">capture</code>. O novo código será:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- &lt;h2 class="category"&gt;{{ category }}&lt;/h2&gt; --&gt;</span>
{% capture localized_category %}projects.categories.{{category}}{% endcapture %}
<span class="nt">&lt;h2</span> <span class="na">class=</span><span class="s">"category"</span><span class="nt">&gt;</span>{% t localized_category %}<span class="nt">&lt;/h2&gt;</span>
</code></pre></div></div> <p>Agora, tudo está traduzido. A página de visão geral de projetos, as categorias dos projetos e as páginas dos projetos.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2022-09-30-localized-projects/correct_localized_projects_overview-480.webp 480w,/assets/img/blog/2022-09-30-localized-projects/correct_localized_projects_overview-800.webp 800w,/assets/img/blog/2022-09-30-localized-projects/correct_localized_projects_overview-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blog/2022-09-30-localized-projects/correct_localized_projects_overview.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Visão geral dos projetos com categorias traduzidas. </div>]]></content><author><name></name></author><category term="website"/><category term="development"/><category term="al-folio"/><category term="website"/><category term="jekyll"/><category term="localization"/><category term="languages"/><summary type="html"><![CDATA[Como criar páginas de projetos traduzidas em seu site al-folio.]]></summary></entry><entry><title type="html">Criando páginas de CV traduzidas</title><link href="https://george-gca.github.io/pt-br/blog/2022/localized-cv/" rel="alternate" type="text/html" title="Criando páginas de CV traduzidas"/><published>2022-09-29T21:40:13+00:00</published><updated>2022-09-29T21:40:13+00:00</updated><id>https://george-gca.github.io/blog/2022/localized-cv</id><content type="html" xml:base="https://george-gca.github.io/blog/2022/localized-cv/"><![CDATA[<p>Este post faz parte de uma série de posts que explicam como configurar seu próprio site baseado no tema al-folio e adicionar suporte a uma segunda língua:</p> <ul> <li><a href="/pt-br/blog/2022/running-local-al-folio/">Executando localmente seu próprio site al-folio</a></li> <li><a href="/pt-br/blog/2022/dual-language-al-folio/">Tornando seu al-folio em um site com dois idiomas</a></li> <li>Criando páginas de CV traduzidas</li> <li><a href="/pt-br/blog/2022/localized-projects/">Criando páginas de projetos traduzidas</a></li> <li><a href="/pt-br/blog/2022/localized-blog/">Criando postagens de blog traduzidas</a></li> </ul> <hr/> <p>Já <a href="/pt-br/blog/2022/running-local-al-folio/">criamos um site al-folio local</a> e <a href="/pt-br/blog/2022/dual-language-al-folio/">adicionamos suporte para outro idioma nele</a>. Se você olhar a aba <code class="language-plaintext highlighter-rouge">cv</code>, ela é bem bonita e também dá a opção de baixar um arquivo pdf. Vamos ver como podemos criar uma versão “localizada” (com tradução por idioma) dela.</p> <h2 id="criando-a-estrutura">Criando a estrutura</h2> <p>A estrutura atual da página cv é composta por 3 arquivos principais: <code class="language-plaintext highlighter-rouge">_pages/cv.md</code>, <code class="language-plaintext highlighter-rouge">_layouts/cv.html</code> e <code class="language-plaintext highlighter-rouge">_data/cv.yml</code>. A primeira é a definição da página, a segunda é o layout da página e a terceira são os dados que são usados ​​para preenchê-la. Vamos criar uma nova pasta para cada idioma dentro do diretório <code class="language-plaintext highlighter-rouge">_data/</code>, e copiar o arquivo <code class="language-plaintext highlighter-rouge">_data/cv.yml</code> para ambos. O novo diretório <code class="language-plaintext highlighter-rouge">_data/</code> ficará assim:</p> <ul> <li>_data/en/cv.yml</li> <li>_data/pt-br/cv.yml</li> <li>_data/coauthors.yml</li> <li>_data/repositories.yml</li> <li>_data/venues.yml</li> </ul> <p>Agora, vamos substituir o conteúdo do arquivo <code class="language-plaintext highlighter-rouge">_data/pt-br/cv.yml</code> pelo seguinte:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Informações Gerais</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">map</span>
  <span class="na">contents</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Nome Completo</span>
      <span class="na">value</span><span class="pi">:</span> <span class="s">Albert Einstein</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Data de Nascimento</span>
      <span class="na">value</span><span class="pi">:</span> <span class="s">14 de março de </span><span class="m">1879</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Idiomas</span>
      <span class="na">value</span><span class="pi">:</span> <span class="s">Inglês, Alemão</span>

<span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Educação</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">time_table</span>
  <span class="na">contents</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">PhD</span>
      <span class="na">institution</span><span class="pi">:</span> <span class="s">University of Zurich, Zurique, Suíça</span>
      <span class="na">year</span><span class="pi">:</span> <span class="m">1905</span>
      <span class="na">description</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">Descrição 1.</span>
        <span class="pi">-</span> <span class="s">Descrição 2.</span>
        <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Descrição 3.</span>
          <span class="na">contents</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s">Sub-descrição 1.</span>
            <span class="pi">-</span> <span class="s">Sub-descrição 2.</span>
    <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Diploma de ensino federal</span>
      <span class="na">institution</span><span class="pi">:</span> <span class="s">Eidgenössische Technische Hochschule, Zurique, Suíça</span>
      <span class="na">year</span><span class="pi">:</span> <span class="m">1900</span>
      <span class="na">description</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">Descrição 1.</span>
        <span class="pi">-</span> <span class="s">Descrição 2.</span>

<span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Experiência</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">time_table</span>
  <span class="na">contents</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Professor de Física Teórica</span>
      <span class="na">institution</span><span class="pi">:</span> <span class="s">Institute for Advanced Study, Princeton University</span>
      <span class="na">year</span><span class="pi">:</span> <span class="s">1933 - </span><span class="m">1955</span>
      <span class="na">description</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">Descrição 1.</span>
        <span class="pi">-</span> <span class="s">Descrição 2.</span>
        <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Descrição 3.</span>
          <span class="na">contents</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s">Sub-descrição 1.</span>
            <span class="pi">-</span> <span class="s">Sub-descrição 2.</span>
    <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Visiting Professor</span>
      <span class="na">institution</span><span class="pi">:</span> <span class="s">California Institute of Technology, Pasadena, Califórnia, EUA</span>
      <span class="na">year</span><span class="pi">:</span> <span class="m">1933</span>
      <span class="na">description</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">Descrição 1.</span>
        <span class="pi">-</span> <span class="s">Descrição 2.</span>

    <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Diretor</span>
      <span class="na">institution</span><span class="pi">:</span> <span class="s">Kaiser Wilhelm Institute for Physics, Berlim, Alemanha.</span>
      <span class="na">year</span><span class="pi">:</span> <span class="s">1917-1933</span>

    <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Professor de Física Teórica</span>
      <span class="na">institution</span><span class="pi">:</span> <span class="s">Karl-Ferdinand University, Praga, Tchecoslováquia</span>
      <span class="na">year</span><span class="pi">:</span> <span class="s">1911 - </span><span class="m">1917</span>
      <span class="na">description</span><span class="pi">:</span>

    <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Professor Associado de Física Teórica</span>
      <span class="na">institution</span><span class="pi">:</span> <span class="s">University of Zurich, Zurique, Suíça</span>
      <span class="na">year</span><span class="pi">:</span> <span class="s">1909 - </span><span class="m">1911</span>

<span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Projetos de Código Aberto</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">time_table</span>
  <span class="na">contents</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">&lt;a href="https://github.com/alshedivat/al-folio"&gt;al-folio&lt;/a&gt;</span>
      <span class="na">year</span><span class="pi">:</span> <span class="s">2015-atual</span>
      <span class="na">description</span><span class="pi">:</span> <span class="s">Um tema Jekyll bonito, simples, limpo e responsivo para acadêmicos.</span>

<span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Honras e Prêmios</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">time_table</span>
  <span class="na">contents</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">year</span><span class="pi">:</span> <span class="m">1921</span>
      <span class="na">items</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">Prêmio Nobel de Física</span>
        <span class="pi">-</span> <span class="s">Medalha Matteucci</span>
    <span class="pi">-</span> <span class="na">year</span><span class="pi">:</span> <span class="m">2029</span>
      <span class="na">items</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">Medalha Max Planck</span>

<span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Interesses Acadêmicos</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">nested_list</span>
  <span class="na">contents</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Tópico 1.</span>
      <span class="na">items</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">Descrição 1.</span>
        <span class="pi">-</span> <span class="s">Descrição 2.</span>
    <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Tópico 2.</span>
      <span class="na">items</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">Descrição 1.</span>
        <span class="pi">-</span> <span class="s">Descrição 2.</span>

<span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Outros Interesses</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">list</span>
  <span class="na">contents</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">&lt;u&gt;Hobbies:&lt;/u&gt; Hobby 1, Hobby 2, etc.</span>
</code></pre></div></div> <p>Agora, abra o arquivo <code class="language-plaintext highlighter-rouge">_layouts/cv.html</code> e substitua a seguinte linha:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- {% for entry in site.data.cv %} --&gt;</span>
{% for entry in site.data[site.lang].cv %}
</code></pre></div></div> <p>Isso será suficiente para fazer a página funcionar para o novo idioma. Agora, vamos adicionar a opção de baixar o arquivo pdf traduzido. Para isso, crie uma nova pasta para cada idioma dentro do diretório <code class="language-plaintext highlighter-rouge">assets/pdf/</code>, e copie o arquivo <code class="language-plaintext highlighter-rouge">assets/pdf/example_pdf.pdf</code> para ambos. O novo diretório <code class="language-plaintext highlighter-rouge">assets/pdf/</code> ficará assim:</p> <ul> <li>assets/pdf/en/example_pdf.pdf</li> <li>assets/pdf/pt-br/example_pdf.pdf</li> <li>assets/pdf/example_pdf.pdf</li> </ul> <p>Agora, vamos atualizar o link para o arquivo pdf no idioma correto. Usaremos o mesmo nome para ambos os arquivos, que já está definido no atributo <code class="language-plaintext highlighter-rouge">cv_pdf: example_pdf.pdf</code> dentro de <code class="language-plaintext highlighter-rouge">_pages/cv.md</code>. Se você deseja usar um nome diferente para os pdfs, renomeie ambos e também atualize esta informação no atributo relacionado. Em seguida, modifique a seguinte linha no arquivo <code class="language-plaintext highlighter-rouge">_layouts/cv.html</code>:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- &lt;h1 class="post-title"&gt;{% t page.title %} {% if page.cv_pdf %}&lt;a href="{{ page.cv_pdf | prepend: 'assets/pdf/' | relative_url}}" target="_blank" rel="noopener noreferrer" class="float-right"&gt;&lt;i class="fas fa-file-pdf"&gt;&lt;/i&gt;&lt;/a&gt;{% endif %}&lt;/h1&gt; --&gt;</span>
<span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"post-title"</span><span class="nt">&gt;</span>
  {% t page.title %} {% if page.cv_pdf %}<span class="nt">&lt;a</span>
    <span class="na">href=</span><span class="s">"{{ page.cv_pdf | prepend: '/' | prepend: site.lang | prepend: 'assets/pdf/' | relative_url}}"</span>
    <span class="na">target=</span><span class="s">"_blank"</span>
    <span class="na">rel=</span><span class="s">"noopener noreferrer"</span>
    <span class="na">class=</span><span class="s">"float-right"</span>
    <span class="nt">&gt;&lt;i</span> <span class="na">class=</span><span class="s">"fas fa-file-pdf"</span><span class="nt">&gt;&lt;/i&gt;&lt;/a</span>
  <span class="nt">&gt;</span>{% endif %}
<span class="nt">&lt;/h1&gt;</span>
</code></pre></div></div> <p>E isso vai servir.</p>]]></content><author><name></name></author><category term="website"/><category term="development"/><category term="al-folio"/><category term="website"/><category term="jekyll"/><category term="localization"/><category term="languages"/><summary type="html"><![CDATA[Como criar páginas de CV por idioma no seu site al-folio.]]></summary></entry><entry><title type="html">Tornando seu al-folio em um site com dois idiomas</title><link href="https://george-gca.github.io/pt-br/blog/2022/dual-language-al-folio/" rel="alternate" type="text/html" title="Tornando seu al-folio em um site com dois idiomas"/><published>2022-09-28T11:29:13+00:00</published><updated>2022-09-28T11:29:13+00:00</updated><id>https://george-gca.github.io/blog/2022/dual-language-al-folio</id><content type="html" xml:base="https://george-gca.github.io/blog/2022/dual-language-al-folio/"><![CDATA[<p>Este post faz parte de uma série de posts que explicam como configurar seu próprio site baseado no tema al-folio e adicionar suporte a uma segunda língua:</p> <ul> <li><a href="/pt-br/blog/2022/running-local-al-folio/">Executando localmente seu próprio site al-folio</a></li> <li>Tornando seu al-folio em um site com dois idiomas</li> <li><a href="/pt-br/blog/2022/localized-cv/">Criando páginas de CV traduzidas</a></li> <li><a href="/pt-br/blog/2022/localized-projects/">Criando páginas de projetos traduzidas</a></li> <li><a href="/pt-br/blog/2022/localized-blog/">Criando postagens de blog traduzidas</a></li> </ul> <hr/> <p>O <a href="https://github.com/alshedivat/al-folio">al-folio</a> é um ótimo tema para sites em Jekyll. É altamente personalizável e fácil de usar, com suporte para blogs, informações de repositório, projetos e muito mais (veja o <a href="https://alshedivat.github.io/al-folio/">exemplo</a>). No entanto, ele não oferece suporte a vários idiomas. Neste post, vou mostrar como adicionar suporte para outro idioma no seu al-folio. Vou adicionar suporte para <code class="language-plaintext highlighter-rouge">pt-BR</code>, já que é minha língua nativa. Para isso, você já deve ter <a href="/pt-br/blog/2022/running-local-al-folio/">clonado sua cópia do repositório al-folio e executado localmente</a>.</p> <h2 id="instalando-dependências">Instalando dependências</h2> <p>Faremos isso com a ajuda do <a href="https://github.com/kurtsson/jekyll-multiple-languages-plugin">Jekyll Multiple Languages ​​Plugin</a>. Ele adiciona suporte ao i18n para Jekyll. Para instalar, adicione a seguinte linha ao seu <code class="language-plaintext highlighter-rouge">Gemfile</code> na parte <code class="language-plaintext highlighter-rouge">group :jekyll_plugins do</code>:</p> <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="s1">'jekyll-multiple-languages-plugin'</span>
</code></pre></div></div> <p>Além disso, adicione a seguinte linha ao seu <code class="language-plaintext highlighter-rouge">_config.yml</code> em <code class="language-plaintext highlighter-rouge">plugins:</code>:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="s">jekyll-multiple-languages-plugin</span>
</code></pre></div></div> <p>e as seguintes linhas depois dele (fora de <code class="language-plaintext highlighter-rouge">plugins</code>), por exemplo, antes da seção <code class="language-plaintext highlighter-rouge">Jekyll Minifier</code>:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># configurações de vários idiomas</span>
<span class="na">languages</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">en"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">pt-br"</span><span class="pi">]</span>
<span class="na">default_locale_in_subfolder</span><span class="pi">:</span> <span class="kc">false</span>
</code></pre></div></div> <p>Definir <code class="language-plaintext highlighter-rouge">default_locale_in_subfolder</code> como <code class="language-plaintext highlighter-rouge">false</code> faz com que seu idioma principal seja a raiz do seu site, em vez de estar em uma subpasta. Por exemplo, em vez de <code class="language-plaintext highlighter-rouge">https://george-gca.github.io/en/</code>, será <code class="language-plaintext highlighter-rouge">https://george-gca.github.io/</code>. Este é o comportamento padrão do al-folio, então vamos mantê-lo. O primeiro idioma na lista será o idioma padrão, inglês neste caso. Em seguida, execute <code class="language-plaintext highlighter-rouge">bundle install</code> para instalar o plugin.</p> <h2 id="criando-arquivos-de-tradução">Criando arquivos de tradução</h2> <p>Crie uma pasta chamada <code class="language-plaintext highlighter-rouge">_i18n</code> e adicione subpastas para cada idioma, usando os mesmos nomes usados ​​na configuração <code class="language-plaintext highlighter-rouge">languages</code> no <code class="language-plaintext highlighter-rouge">_config.yml</code> que acabamos de adicionar. Além disso, crie um arquivo <code class="language-plaintext highlighter-rouge">yml</code> para cada idioma. Por exemplo, para <code class="language-plaintext highlighter-rouge">pt-br</code>, crie uma pasta chamada <code class="language-plaintext highlighter-rouge">_i18n/pt-br</code>. Em seguida, crie um arquivo chamado <code class="language-plaintext highlighter-rouge">_i18n/pt-br.yml</code>. Nossa estrutura de diretórios deve ficar assim:</p> <ul> <li>_i18n/en.yml</li> <li>_i18n/pt-br.yml</li> <li>_i18n/en/</li> <li>_i18n/pt-br/</li> </ul> <h2 id="adicionando-alternância-de-idioma">Adicionando alternância de idioma</h2> <p>Agora, precisamos adicionar uma forma de mudar o idioma do nosso site. Vamos adicioná-lo à barra de navegação. Abra o arquivo <code class="language-plaintext highlighter-rouge">_includes/header.html</code> e adicione o seguinte código antes da área <code class="language-plaintext highlighter-rouge">Toogle theme mode</code>:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- Mudar a lingua --&gt;</span>
<span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"nav-item active"</span><span class="nt">&gt;</span>
  {% if site.lang == "en" %}
  <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"nav-link"</span> <span class="na">href=</span><span class="s">"{{site.baseurl_root}}/pt-br{{page.url}}"</span><span class="nt">&gt;</span> PT-BR <span class="nt">&lt;/a&gt;</span>
  {% elsif site.lang == "pt-br" %}
  <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"nav-link"</span> <span class="na">href=</span><span class="s">"{{site.baseurl_root}}{{page.url}}"</span><span class="nt">&gt;</span> EN <span class="nt">&lt;/a&gt;</span>
  {% endif %}
<span class="nt">&lt;/li&gt;</span>
</code></pre></div></div> <p>Isso adiciona um link para o outro idioma. O <code class="language-plaintext highlighter-rouge">page.url</code> mantém a informação da página atual, para que o usuário não seja redirecionado para a página inicial. Observe que <code class="language-plaintext highlighter-rouge">site.baseurl_root</code> é uma variável introduzida pelo Jekyll Multiple Languages ​​Plugin e aponta para a raiz da página sem o caminho do idioma. Mais informações sobre as variáveis ​​recém-adicionadas podem ser encontradas <a href="https://github.com/kurtsson/jekyll-multiple-languages-plugin#55-link-between-languages">aqui</a>.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2022-09-28-dual-language-al-folio/header_en-480.webp 480w,/assets/img/blog/2022-09-28-dual-language-al-folio/header_en-800.webp 800w,/assets/img/blog/2022-09-28-dual-language-al-folio/header_en-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blog/2022-09-28-dual-language-al-folio/header_en.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Cabeçalho com botão para mudar de idioma. </div> <h2 id="adicionando-títulos-traduzidos">Adicionando títulos traduzidos</h2> <p>Até agora, adicionamos tudo o que é necessário para dar suporte à tradução, mas não fizemos a tradução de fato. Vamos fazer isso agora. Abra o arquivo <code class="language-plaintext highlighter-rouge">_i18n/en.yml</code> e adicione as seguintes linhas:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">titles</span><span class="pi">:</span>
  <span class="na">about</span><span class="pi">:</span> <span class="s">about</span>
  <span class="na">blog</span><span class="pi">:</span> <span class="s">blog</span>
  <span class="na">cv</span><span class="pi">:</span> <span class="s">cv</span>
  <span class="na">news</span><span class="pi">:</span> <span class="s">news</span>
  <span class="na">projects</span><span class="pi">:</span> <span class="s">projects</span>
  <span class="na">publications</span><span class="pi">:</span> <span class="s">publications</span>
  <span class="na">repositories</span><span class="pi">:</span> <span class="s">repositories</span>
  <span class="na">teaching</span><span class="pi">:</span> <span class="s">teaching</span>
  <span class="na">submenus</span><span class="pi">:</span> <span class="s">submenus</span>
  <span class="na">unk</span><span class="pi">:</span> <span class="s">page not found</span>
</code></pre></div></div> <p>Isso vai criar os títulos das páginas. Agora, abra o arquivo <code class="language-plaintext highlighter-rouge">_i18n/pt-br.yml</code> e adicione as seguintes linhas:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">titles</span><span class="pi">:</span>
  <span class="na">about</span><span class="pi">:</span> <span class="s">sobre</span>
  <span class="na">blog</span><span class="pi">:</span> <span class="s">blog</span>
  <span class="na">cv</span><span class="pi">:</span> <span class="s">cv</span>
  <span class="na">news</span><span class="pi">:</span> <span class="s">novidades</span>
  <span class="na">projects</span><span class="pi">:</span> <span class="s">projetos</span>
  <span class="na">publications</span><span class="pi">:</span> <span class="s">publicações</span>
  <span class="na">repositories</span><span class="pi">:</span> <span class="s">repositórios</span>
  <span class="na">teaching</span><span class="pi">:</span> <span class="s">ensino</span>
  <span class="na">submenus</span><span class="pi">:</span> <span class="s">submenus</span>
  <span class="na">unk</span><span class="pi">:</span> <span class="s">página não encontrada</span>
</code></pre></div></div> <p>Isso adiciona os títulos das páginas em português. Agora que temos os títulos traduzidos, temos que modificar as páginas para que usem essas variáveis. Para isso, abra todas as páginas da pasta <code class="language-plaintext highlighter-rouge">_pages</code> e altere seus títulos para usar a variável <code class="language-plaintext highlighter-rouge">titles</code> correta. Por exemplo, o novo título da página <code class="language-plaintext highlighter-rouge">about.md</code> deve ficar assim:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">title</span><span class="pi">:</span> <span class="s">titles.about</span>
</code></pre></div></div> <p>Se você executar seu site agora, verá que os títulos são mostrados como <code class="language-plaintext highlighter-rouge">titles.about</code> em vez de apenas <code class="language-plaintext highlighter-rouge">about</code> como deveria, já que o padrão é em inglês. Ainda precisamos dizer aos modelos html para selecionar a versão traduzida correta dessas variáveis. Para isso, abra o arquivo <code class="language-plaintext highlighter-rouge">_includes/header.html</code> e altere todas as variáveis ​​<code class="language-plaintext highlighter-rouge">title</code> para usar a <a href="https://github.com/kurtsson/jekyll-multiple-languages-plugin#51-translating-strings">função t</a>. A função <code class="language-plaintext highlighter-rouge">t</code>, ou sua versão mais longa <code class="language-plaintext highlighter-rouge">translate</code>, vai garantir que ela selecione a versão correta do arquivo yml do idioma atual. Mais especificamente, faça as seguintes alterações:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- &lt;a class="nav-link" href="{{ '/' | relative_url }}"&gt;{{ about_title }} --&gt;</span>
<span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"nav-link"</span> <span class="na">href=</span><span class="s">"{{ '/' | relative_url }}"</span>
  <span class="nt">&gt;</span>{% t about_title %}

  <span class="c">&lt;!-- &lt;a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"&gt;{{ p.title }} --&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"nav-link dropdown-toggle"</span> <span class="na">href=</span><span class="s">"#"</span> <span class="na">id=</span><span class="s">"navbarDropdown"</span> <span class="na">role=</span><span class="s">"button"</span> <span class="na">data-toggle=</span><span class="s">"dropdown"</span> <span class="na">aria-haspopup=</span><span class="s">"true"</span> <span class="na">aria-expanded=</span><span class="s">"false"</span>
    <span class="nt">&gt;</span>{% t p.title %}

    <span class="c">&lt;!-- &lt;a class="dropdown-item" href="{{ child.permalink | relative_url }}"&gt;{{ child.title }}&lt;/a&gt; --&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"dropdown-item"</span> <span class="na">href=</span><span class="s">"{{ child.permalink | relative_url }}"</span><span class="nt">&gt;</span>{% t child.title %}<span class="nt">&lt;/a&gt;</span>

    <span class="c">&lt;!-- &lt;a class="nav-link" href="{{ p.url | relative_url }}"&gt;{{ p.title }} --&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"nav-link"</span> <span class="na">href=</span><span class="s">"{{ p.url | relative_url }}"</span><span class="nt">&gt;</span>{% t p.title %}<span class="nt">&lt;/a&gt;&lt;/a</span>
  <span class="nt">&gt;&lt;/a</span>
<span class="nt">&gt;</span>
</code></pre></div></div> <p>Agora execute seu site novamente e você verá que os títulos têm os valores corretos. Você pode até alterar o idioma clicando no link e ver que os títulos mudam de acordo.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2022-09-28-dual-language-al-folio/header_pt-br-480.webp 480w,/assets/img/blog/2022-09-28-dual-language-al-folio/header_pt-br-800.webp 800w,/assets/img/blog/2022-09-28-dual-language-al-folio/header_pt-br-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blog/2022-09-28-dual-language-al-folio/header_pt-br.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Cabeçalho em português. </div> <h2 id="corrigindo-a-navegação-traduzida">Corrigindo a navegação traduzida</h2> <p>Tudo parece funcionar bem, só que não. Se você clicar no botão <code class="language-plaintext highlighter-rouge">PT-BR</code> no cabeçalho, depois clicar em outra página (por exemplo, repositórios), os títulos serão alterados novamente para inglês. Para lidar com esse tipo de situação, temos que garantir que, quando o usuário clicar nos links do cabeçalho, ele manterá o idioma. Vamos fazer isso primeiro para a página <code class="language-plaintext highlighter-rouge">about</code>. Para fazer isso, abra o arquivo <code class="language-plaintext highlighter-rouge">_includes/header.html</code> e mude o link para a página <code class="language-plaintext highlighter-rouge">sobre</code>, para que ele use a variável <code class="language-plaintext highlighter-rouge">site.baseurl</code> ao invés de <code class="language-plaintext highlighter-rouge">relative_url</code>. Mais especificamente, faça as seguintes alterações:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- &lt;a class="nav-link" href="{{ '/' | relative_url }}"&gt;{% t about_title %} --&gt;</span>
<span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"nav-link"</span> <span class="na">href=</span><span class="s">"{{ '/' | prepend: site.baseurl}}"</span><span class="nt">&gt;</span>{% t about_title %}<span class="nt">&lt;/a&gt;</span>
</code></pre></div></div> <p>Agora, se você estiver em outra página, por exemplo, a página <code class="language-plaintext highlighter-rouge">repositories</code>, e clicar no botão <code class="language-plaintext highlighter-rouge">PT-BR</code>, depois clicar na página <code class="language-plaintext highlighter-rouge">about</code>, ele vai manter o idioma nos títulos. Agora, vamos habilitar isso para todas as outras páginas. Para isso, abra o arquivo <code class="language-plaintext highlighter-rouge">_includes/header.html</code> novamente e faça as seguintes alterações:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- &lt;a class="nav-link" href="{{ '/blog/' | relative_url }}"&gt;{{ site.blog_nav_title }} --&gt;</span>
<span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"nav-link"</span> <span class="na">href=</span><span class="s">"{{ '/blog/' | prepend: site.baseurl }}"</span>
  <span class="nt">&gt;</span>{{ site.blog_nav_title }}

  <span class="c">&lt;!-- &lt;a class="dropdown-item" href="{{ child.permalink | relative_url }}"&gt;{% t child.title %}&lt;/a&gt; --&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"dropdown-item"</span> <span class="na">href=</span><span class="s">"{{ child.permalink | prepend: site.baseurl }}"</span><span class="nt">&gt;</span>{% t child.title %}<span class="nt">&lt;/a&gt;</span>

  <span class="c">&lt;!-- &lt;a class="nav-link" href="{{ p.url | relative_url }}"&gt;{% t p.title %} --&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"nav-link"</span> <span class="na">href=</span><span class="s">"{{ p.url | prepend: site.baseurl }}"</span><span class="nt">&gt;</span>{% t p.title %}<span class="nt">&lt;/a&gt;&lt;/a</span>
<span class="nt">&gt;</span>
</code></pre></div></div> <h2 id="adicionando-títulos-traduzidos-dentro-das-páginas">Adicionando títulos traduzidos dentro das páginas</h2> <p>Agora tudo funciona! O sol está nascendo e o mundo está colorido novamente :rainbow:. Mas espera, ainda faltam algumas coisas. Se você clicar no botão <code class="language-plaintext highlighter-rouge">PT-BR</code>, depois clicar na página <code class="language-plaintext highlighter-rouge">publicações</code>, você verá que o título da página ainda é <code class="language-plaintext highlighter-rouge">titles.publications</code>.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2022-09-28-dual-language-al-folio/publications_title_wrong-480.webp 480w,/assets/img/blog/2022-09-28-dual-language-al-folio/publications_title_wrong-800.webp 800w,/assets/img/blog/2022-09-28-dual-language-al-folio/publications_title_wrong-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blog/2022-09-28-dual-language-al-folio/publications_title_wrong.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> O que deveria ser um título traduzido. </div> <p>Que merda, isso vai acabar algum dia? :scream: Bem, sim, vai. Só precisamos dizer às páginas para usar o título traduzido correto. Para isso, vamos ver quais templates as páginas usam. A página <code class="language-plaintext highlighter-rouge">publications</code> por exemplo, que está localizada no arquivo <code class="language-plaintext highlighter-rouge">_pages/publications.md</code>, utiliza o template <code class="language-plaintext highlighter-rouge">page</code>, como pode ser visto na seguinte linha no início do arquivo:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">layout</span><span class="pi">:</span> <span class="s">page</span>
</code></pre></div></div> <p>Então, vamos abrir o arquivo <code class="language-plaintext highlighter-rouge">_layouts/page.html</code> e alterar o título para usar a função <code class="language-plaintext highlighter-rouge">t</code>. Mais especificamente, faça as seguintes alterações:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- &lt;h1 class="post-title"&gt;{{ page.title }}&lt;/h1&gt; --&gt;</span>
<span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"post-title"</span><span class="nt">&gt;</span>{% t page.title %}<span class="nt">&lt;/h1&gt;</span>
</code></pre></div></div> <p>Agora, se você executar seu site, ele não funcionará. Isso acontece porque a função <code class="language-plaintext highlighter-rouge">t</code> agora está tentando traduzir uma variável que não está definida. Mas onde? Se você fizer uma pequena pesquisa, notará que a página <code class="language-plaintext highlighter-rouge">publications</code> não é a única que usa o <code class="language-plaintext highlighter-rouge">layout: page</code>. Todas as páginas que o utilizam são:</p> <ul> <li>404.html</li> <li>news.html</li> <li>_pages/dropdown.md</li> <li>_pages/projects.md</li> <li>_pages/publications.md</li> <li>_pages/repositories.md</li> <li>_pages/teaching.md</li> <li>_projects/1_project.md</li> <li>_projects/2_project.md</li> <li>_projects/3_project.md</li> <li>_projects/4_project.md</li> <li>_projects/5_project.md</li> <li>_projects/6_project.md</li> </ul> <p>Você precisa alterar o <code class="language-plaintext highlighter-rouge">title</code> de <strong>TODAS</strong> essas páginas. Nós já fizemos isso para as páginas dentro de <code class="language-plaintext highlighter-rouge">_pages/</code>, então vamos fazer para o resto. Abra o arquivo <code class="language-plaintext highlighter-rouge">404.html</code> e altere seu <code class="language-plaintext highlighter-rouge">title: "Page not found"</code> para <code class="language-plaintext highlighter-rouge">title: title.unk</code>, pois já definimos <code class="language-plaintext highlighter-rouge">titles.unk</code> em <code class="language-plaintext highlighter-rouge">_i18n/en.yml</code> e <code class="language-plaintext highlighter-rouge">_i18n /pt-br.yml</code>. Para manter a seção de projetos mais organizada, vamos criar novos atributos para ela dentro de cada um dos arquivos de tradução. Assim, os novos <code class="language-plaintext highlighter-rouge">_i18n/en.yml</code> e <code class="language-plaintext highlighter-rouge">_i18n/pt-br.yml</code> ficarão assim, respectivamente:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">titles</span><span class="pi">:</span>
  <span class="na">about</span><span class="pi">:</span> <span class="s">about</span>
  <span class="na">blog</span><span class="pi">:</span> <span class="s">blog</span>
  <span class="na">cv</span><span class="pi">:</span> <span class="s">cv</span>
  <span class="na">news</span><span class="pi">:</span> <span class="s">news</span>
  <span class="na">projects</span><span class="pi">:</span> <span class="s">projects</span>
  <span class="na">publications</span><span class="pi">:</span> <span class="s">publications</span>
  <span class="na">repositories</span><span class="pi">:</span> <span class="s">repositories</span>
  <span class="na">teaching</span><span class="pi">:</span> <span class="s">teaching</span>
  <span class="na">submenus</span><span class="pi">:</span> <span class="s">submenus</span>
  <span class="na">unk</span><span class="pi">:</span> <span class="s">page not found</span>
<span class="na">projects</span><span class="pi">:</span>
  <span class="na">titles</span><span class="pi">:</span>
    <span class="na">project1</span><span class="pi">:</span> <span class="s">Project </span><span class="m">1</span>
    <span class="na">project2</span><span class="pi">:</span> <span class="s">Project </span><span class="m">2</span>
    <span class="na">project3</span><span class="pi">:</span> <span class="s">Project </span><span class="m">3</span>
    <span class="na">project4</span><span class="pi">:</span> <span class="s">Project </span><span class="m">4</span>
    <span class="na">project5</span><span class="pi">:</span> <span class="s">Project </span><span class="m">5</span>
    <span class="na">project6</span><span class="pi">:</span> <span class="s">Project </span><span class="m">6</span>
</code></pre></div></div> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">titles</span><span class="pi">:</span>
  <span class="na">about</span><span class="pi">:</span> <span class="s">sobre</span>
  <span class="na">blog</span><span class="pi">:</span> <span class="s">blog</span>
  <span class="na">cv</span><span class="pi">:</span> <span class="s">cv</span>
  <span class="na">news</span><span class="pi">:</span> <span class="s">novidades</span>
  <span class="na">projects</span><span class="pi">:</span> <span class="s">projetos</span>
  <span class="na">publications</span><span class="pi">:</span> <span class="s">publicações</span>
  <span class="na">repositories</span><span class="pi">:</span> <span class="s">repositórios</span>
  <span class="na">teaching</span><span class="pi">:</span> <span class="s">ensino</span>
  <span class="na">submenus</span><span class="pi">:</span> <span class="s">submenus</span>
  <span class="na">unk</span><span class="pi">:</span> <span class="s">página não encontrada</span>
<span class="na">projects</span><span class="pi">:</span>
  <span class="na">titles</span><span class="pi">:</span>
    <span class="na">project1</span><span class="pi">:</span> <span class="s">Projeto </span><span class="m">1</span>
    <span class="na">project2</span><span class="pi">:</span> <span class="s">Projeto </span><span class="m">2</span>
    <span class="na">project3</span><span class="pi">:</span> <span class="s">Projeto </span><span class="m">3</span>
    <span class="na">project4</span><span class="pi">:</span> <span class="s">Projeto </span><span class="m">4</span>
    <span class="na">project5</span><span class="pi">:</span> <span class="s">Projeto </span><span class="m">5</span>
    <span class="na">project6</span><span class="pi">:</span> <span class="s">Projeto </span><span class="m">6</span>
</code></pre></div></div> <p>Agora, tudo o que precisamos fazer é abrir todos os arquivos dentro de <code class="language-plaintext highlighter-rouge">_projects/</code> e alterar seus títulos. Para o arquivo <code class="language-plaintext highlighter-rouge">_projects/1_project.md</code>, por exemplo, ficará assim:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">title</span><span class="pi">:</span> <span class="s">projects.titles.project1</span>
</code></pre></div></div> <p>Finalmente, podemos executar nosso site novamente e ele funcionará conforme o esperado. :tada:.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2022-09-28-dual-language-al-folio/publications_title_fixed-480.webp 480w,/assets/img/blog/2022-09-28-dual-language-al-folio/publications_title_fixed-800.webp 800w,/assets/img/blog/2022-09-28-dual-language-al-folio/publications_title_fixed-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blog/2022-09-28-dual-language-al-folio/publications_title_fixed.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Agora ISSO é um título traduzido. </div> <p>Não se esqueça de fazer o mesmo para as outras páginas que usam layouts diferentes, como <code class="language-plaintext highlighter-rouge">cv</code>. Abra o arquivo <code class="language-plaintext highlighter-rouge">_layouts/cv.html</code> e modifique:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- &lt;h1 class="post-title"&gt;{{ page.title }} {% if page.cv_pdf %}&lt;a href="{{ page.cv_pdf | prepend: 'assets/pdf/' | relative_url}}" target="_blank" rel="noopener noreferrer" class="float-right"&gt;&lt;i class="fas fa-file-pdf"&gt;&lt;/i&gt;&lt;/a&gt;{% endif %}&lt;/h1&gt; --&gt;</span>
<span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"post-title"</span><span class="nt">&gt;</span>
  {% t page.title %} {% if page.cv_pdf %}<span class="nt">&lt;a</span>
    <span class="na">href=</span><span class="s">"{{ page.cv_pdf | prepend: 'assets/pdf/' | relative_url}}"</span>
    <span class="na">target=</span><span class="s">"_blank"</span>
    <span class="na">rel=</span><span class="s">"noopener noreferrer"</span>
    <span class="na">class=</span><span class="s">"float-right"</span>
    <span class="nt">&gt;&lt;i</span> <span class="na">class=</span><span class="s">"fas fa-file-pdf"</span><span class="nt">&gt;&lt;/i&gt;&lt;/a</span>
  <span class="nt">&gt;</span>{% endif %}
<span class="nt">&lt;/h1&gt;</span>
</code></pre></div></div> <h2 id="adicionando-conteúdo-traduzido">Adicionando conteúdo traduzido</h2> <p>Agora, vamos ver como adicionar conteúdo traduzido. Por exemplo, digamos que queremos traduzir a biografia na página <code class="language-plaintext highlighter-rouge">sobre</code>. A melhor maneira de fazer isso é criar partes traduzidas das páginas para cada idioma e importar a versão correta. Para isso, recorte toda a parte da biografia da página <code class="language-plaintext highlighter-rouge">about</code> (<code class="language-plaintext highlighter-rouge">_pages/about.md</code>), deixando apenas o cabeçalho. Em seguida, crie um novo arquivo <code class="language-plaintext highlighter-rouge">_i18n/en/pages/about.md</code> e cole o conteúdo lá. Faça o mesmo para o arquivo <code class="language-plaintext highlighter-rouge">_i18n/pt-br/pages/about.md</code>, mas adicionando a versão traduzida. Agora, no arquivo <code class="language-plaintext highlighter-rouge">_pages/about.md</code>, adicione a função <a href="https://github.com/kurtsson/jekyll-multiple-languages-plugin#52-inclusive-translated-files">translate_file</a>, apontando para os novos arquivos de sobre. O <code class="language-plaintext highlighter-rouge">_pages/about.md</code> final ficará assim:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: about
title: titles.about
subtitle: <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">'#'</span><span class="nt">&gt;</span>Affiliations<span class="nt">&lt;/a&gt;</span>. Address. Contacts. Moto. Etc.
permalink: /

profile:
  align: right
  image: prof_pic.jpg
  image_circular: false # crops the image to make it circular
  address: &gt;
    <span class="nt">&lt;p&gt;</span>555 your office number<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;p&gt;</span>123 your address street<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;p&gt;</span>Your City, State 12345<span class="nt">&lt;/p&gt;</span>

news: true # includes a list of news items
selected_papers: true # includes a list of papers marked as "selected={true}"
social: true # includes social icons at the bottom of the page
---

{% translate_file pages/about.md %}
</code></pre></div></div> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2022-09-28-dual-language-al-folio/about_pt-br-480.webp 480w,/assets/img/blog/2022-09-28-dual-language-al-folio/about_pt-br-800.webp 800w,/assets/img/blog/2022-09-28-dual-language-al-folio/about_pt-br-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blog/2022-09-28-dual-language-al-folio/about_pt-br.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Biografia em português. </div> <h2 id="resolvendo-o-título-da-página-no-browser">Resolvendo o título da página no browser</h2> <p>Atualmente, quando você abre uma seção do seu site, na aba do navegador o nome da seção não é traduzido. Para resolver isso, abra o arquivo <code class="language-plaintext highlighter-rouge">_includes/metadata.html</code> e altere o seguinte código:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">if</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">'/blog/index.html'</span><span class="w"> </span><span class="cp">%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">blog_nav_title</span><span class="w"> </span><span class="cp">}}</span> | <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">elsif</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s1">'blank'</span><span class="w"> </span><span class="ow">and</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s1">'/'</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span> | <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">else</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">endif</span><span class="w"> </span><span class="cp">-%}</span>
</code></pre></div></div> <p>por esse código:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">if</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">'/blog/index.html'</span><span class="w"> </span><span class="cp">%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">blog_nav_title</span><span class="w"> </span><span class="cp">}}</span> | <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">elsif</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="ow">contains</span><span class="w"> </span><span class="s1">'/blog/'</span><span class="w"> </span><span class="cp">%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span> | <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">elsif</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="ow">contains</span><span class="w"> </span><span class="s1">'Announcement'</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">elsif</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s1">'blank'</span><span class="w"> </span><span class="ow">and</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s1">'/'</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{%</span><span class="w"> </span><span class="nt">t</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="cp">%}</span> | <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">else</span><span class="w"> </span><span class="cp">-%}</span>
  <span class="cp">{{</span><span class="w"> </span><span class="nv">title</span><span class="w"> </span><span class="cp">}}</span>
<span class="cp">{%-</span><span class="w"> </span><span class="nt">endif</span><span class="w"> </span><span class="cp">-%}</span>
</code></pre></div></div> <p>Isso irá gerar outro problema, causado pelo título da segunda notícia na página de sobre. Precisamos adicionar um título traduzido para esta notícia. Agora, faça as seguintes alterações:</p> <p>Arquivo <code class="language-plaintext highlighter-rouge">_news/announcement_2.md</code>:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># title: A long announcement with details</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">news.titles.news2</span>
</code></pre></div></div> <p>Arquivo <code class="language-plaintext highlighter-rouge">_i18n/en.yml</code>:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">news</span><span class="pi">:</span>
  <span class="na">titles</span><span class="pi">:</span>
    <span class="na">news2</span><span class="pi">:</span> <span class="s">A long announcement with details</span>
</code></pre></div></div> <p>Arquivo <code class="language-plaintext highlighter-rouge">_i18n/pt-br.yml</code>:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">news</span><span class="pi">:</span>
  <span class="na">titles</span><span class="pi">:</span>
    <span class="na">news2</span><span class="pi">:</span> <span class="s">Um anúncio longo com detalhes</span>
</code></pre></div></div> <h2 id="resumindo">Resumindo</h2> <p>Adicionar uma versão traduzida do seu site não é difícil, mas é meio chato. Mesmo com a ajuda deste <a href="https://github.com/kurtsson/jekyll-multiple-languages-plugin">ótimo plugin</a>, existem alguns pequenos detalhes que, se perdidos, levarão muito tempo e paciência para dominar (pelo menos me levou). Há algumas coisas que podem ser feitas também, como traduzir a descrição das páginas e mais conteúdo, mas como isso pode ser feito com base nos mesmos conceitos que mostrei aqui, vou deixar como lição de casa :laughing:. Vou detalhar como criar versões traduzidas do cv e blog em outros posts, já que esse já tá bem longo. Espero que este post tenha sido útil para você. Se você tiver alguma dúvida, sinta-se à vontade para perguntar nos comentários.</p>]]></content><author><name></name></author><category term="website"/><category term="development"/><category term="al-folio"/><category term="website"/><category term="jekyll"/><category term="localization"/><category term="languages"/><summary type="html"><![CDATA[Adicionando suporte para outro idioma em seu al-folio.]]></summary></entry><entry><title type="html">Executando localmente seu próprio site al-folio</title><link href="https://george-gca.github.io/pt-br/blog/2022/running-local-al-folio/" rel="alternate" type="text/html" title="Executando localmente seu próprio site al-folio"/><published>2022-09-27T22:13:16+00:00</published><updated>2022-09-27T22:13:16+00:00</updated><id>https://george-gca.github.io/blog/2022/running-local-al-folio</id><content type="html" xml:base="https://george-gca.github.io/blog/2022/running-local-al-folio/"><![CDATA[<p>Este post faz parte de uma série de posts que explicam como configurar seu próprio site baseado no tema al-folio e adicionar suporte a uma segunda língua:</p> <ul> <li>Executando localmente seu próprio site al-folio</li> <li><a href="/pt-br/blog/2022/dual-language-al-folio/">Tornando seu al-folio em um site com dois idiomas</a></li> <li><a href="/pt-br/blog/2022/localized-cv/">Criando páginas de CV traduzidas</a></li> <li><a href="/pt-br/blog/2022/localized-projects/">Criando páginas de projetos traduzidas</a></li> <li><a href="/pt-br/blog/2022/localized-blog/">Criando postagens de blog traduzidas</a></li> </ul> <hr/> <p>Decidi escrever este post porque tive dificuldade em descobrir como executar minha própria página Jekyll localmente, principalmente porque eu não uso regularmente o Jekyll. Espero que este post ajude você a executar seu próprio site <a href="https://alshedivat.github.io/al-folio/">al-folio</a> localmente, ou qualquer outro tema baseado em Jekyll que você tenha.</p> <h2 id="instalando-ruby-e-rbenv">Instalando Ruby e rbenv</h2> <p>Meu código foi executado em um ambiente Linux nativo (Ubuntu 22.04.1 LTS), mas também testei em um <a href="https://learn.microsoft.com/pt-br/windows/wsl/install">ambiente WSL</a> . Primeiro você precisa instalar o suporte à linguagem Ruby. A <a href="https://github.com/alshedivat/al-folio#local-setup-standard">maneira recomendada</a> pelos criadores do al-folio é usar <a href="https://github.com/rbenv/rbenv">rbenv</a>. Para aqueles familiarizados com Python, <code class="language-plaintext highlighter-rouge">rbenv</code> é semelhante ao <code class="language-plaintext highlighter-rouge">pyenv</code>. Para instalar o <code class="language-plaintext highlighter-rouge">rbenv</code>, execute os seguintes comandos:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/rbenv/rbenv.git ~/.rbenv
<span class="nb">cd</span> ~/.rbenv <span class="o">&amp;&amp;</span> src/configure <span class="o">&amp;&amp;</span> make <span class="nt">-C</span> src
</code></pre></div></div> <p>Isso fará o download e compilação do repositório <code class="language-plaintext highlighter-rouge">rbenv</code> no seu home. <strong>NÃO</strong> instale via <code class="language-plaintext highlighter-rouge">apt</code>, pois ele baixa uma versão mais antiga do pacote e não permite que você instale as versões mais recentes do Ruby. Em seguida, adicione as seguintes linhas ao seu arquivo <code class="language-plaintext highlighter-rouge">~/.bashrc</code>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># habilita o rbenv</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-d</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.rbenv/"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.rbenv/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
    <span class="nb">eval</span> <span class="s2">"</span><span class="si">$(</span>rbenv init - bash<span class="si">)</span><span class="s2">"</span>
<span class="k">fi</span>
</code></pre></div></div> <p>Reinicie seu terminal ou execute <code class="language-plaintext highlighter-rouge">. ~/.bashrc</code> para recarregar suas configurações do bash. Isso tornará o comando <code class="language-plaintext highlighter-rouge">rbenv</code> disponível no terminal. Para testar se está funcionando corretamente, execute <code class="language-plaintext highlighter-rouge">curl -fsSL https://github.com/rbenv/rbenv-installer/raw/main/bin/rbenv-doctor | bash</code>. Ele deve produzir algo semelhante a isso:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Checking for `rbenv' in PATH: /home/gca/.rbenv/bin/rbenv
Checking for rbenv shims in PATH: Not found
Checking `rbenv install' support: /home/gca/.rbenv/plugins/ruby-build/bin/rbenv-install (ruby-build 20220910.1-10-gecb9d22)
Counting installed Ruby versions: 1 versions
Auditing installed plugins: OK
</code></pre></div></div> <p>Vai aparecer um erro na linha <code class="language-plaintext highlighter-rouge">Checking for rbenv shims in PATH</code>. Não se preocupe, isso vai ser corrigido. Em seguida, você precisa instalar o <a href="https://github.com/rbenv/ruby-build">ruby-build</a> como um plugin do <code class="language-plaintext highlighter-rouge">rbenv</code>, para que você possa facilmente baixar e instalar diferentes versões do Ruby. Para isso, execute os seguintes comandos:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="si">$(</span>rbenv root<span class="si">)</span><span class="s2">"</span>/plugins
git clone https://github.com/rbenv/ruby-build.git <span class="s2">"</span><span class="si">$(</span>rbenv root<span class="si">)</span><span class="s2">"</span>/plugins/ruby-build
</code></pre></div></div> <p>Para verificar quais versões do Ruby estão disponíveis para instalação, basta executar <code class="language-plaintext highlighter-rouge">rbenv install --list</code>. Você pode instalar qualquer versão que desejar, mas recomendo instalar a versão estável mais recente. No momento é a versão 3.1.2. Para instalá-la, você precisa primeiro instalar a dependência ssl e depois a versão do Ruby.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> libssl-dev
rbenv <span class="nb">install </span>3.1.2
</code></pre></div></div> <h2 id="instalando-as-dependências-do-al-folio">Instalando as dependências do al-folio</h2> <p>Agora que você tem o Ruby instalado, você pode instalar as dependências do al-folio. Primeiro, clone o repositório al-folio em sua máquina local. Em seguida, entre no diretório do repositório e crie um ambiente Ruby local com a versão do Ruby instalada. Em seguida, instale o pacote <code class="language-plaintext highlighter-rouge">bundle</code>, para que ele se encarregue de instalar o restante das dependências. Para fazer tudo isso, execute os seguintes comandos:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone ~/git@github.com:alshedivat/al-folio.git
<span class="nb">cd</span> ~/al-folio
rbenv <span class="nb">local </span>3.1.2
gem <span class="nb">install </span>bundle
bundle <span class="nb">install</span>
</code></pre></div></div> <p>Também é necessário instalar o pacote <code class="language-plaintext highlighter-rouge">jupyter</code>, já que o al-folio suporta <code class="language-plaintext highlighter-rouge">jupyter</code> notebooks. Se você não planeja usar notebooks com tanta frequência, pode instalar via <a href="https://github.com/pypa/pipx">pipx</a>. Para instalar o <code class="language-plaintext highlighter-rouge">pipx</code> e o <code class="language-plaintext highlighter-rouge">jupyter</code>, execute os seguintes comandos:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># também é possível instalar via apt com o comando `sudo apt install -y pipx`</span>
python3 <span class="nt">-m</span> pip <span class="nb">install</span> <span class="nt">--user</span> pipx
pipx <span class="nb">install </span>jupyter
</code></pre></div></div> <h2 id="executando-o-al-folio-localmente">Executando o al-folio localmente</h2> <p>Agora você pode executar o site localmente. Tudo o que você precisa fazer é abrir o diretório do al-folio e executar o Jekyll:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">exec </span>jekyll serve <span class="nt">--lsi</span>
</code></pre></div></div> <p>Boa programação!</p>]]></content><author><name></name></author><category term="website"/><category term="development"/><category term="al-folio"/><category term="website"/><category term="jekyll"/><category term="local"/><summary type="html"><![CDATA[Passo a passo sobre como executar seu próprio al-folio localmente.]]></summary></entry></feed>